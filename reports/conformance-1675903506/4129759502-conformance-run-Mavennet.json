{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9fd99cc5-f29f-4244-b94e-c5faac853b23",
        "name": "Clear Cache",
        "item": [
          {
            "id": "1902394b-0368-47bb-813e-ef04b5935066",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55d1a948-52cb-44f2-acac-97946abd3918",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "1687488d-496c-4d8d-b78f-987d1496bf9d"
                }
              }
            ]
          },
          {
            "id": "9ef780c4-ccb0-4dbd-a2f2-0d930665184f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a854ecd2-c8c3-46a9-b48c-518ad02ffe58",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3c576919-0949-4566-9311-681aa57cf7b9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "233239db-897b-4f77-845a-ec6ccba54c9d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b6605b94-1d13-44b6-a471-4f94b7477978",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b57b2c94-6d38-4974-8241-e86af2f58e0f",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd80d74f-4064-4b11-bceb-cc70ca168150",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "acc4ed2a-facd-438c-83ee-6d4c671ef1bd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "89f44d4d-4ff1-46f8-8e43-88f211a9d427",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "590b3294-8287-4e04-92f2-d2b33fe246db"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4e723c3a-f406-4dec-a5c1-700b8e23a096",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e547a7bd-eded-45c6-aa60-21ae3ad0aee9"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7d9152c3-98c7-462f-b1f3-8c63edcf010a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0093f051-b757-4415-98fb-cea4283f5694"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7a454ff-b08e-4fa9-82e0-f83cfb28b704",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "44609ab5-c2ce-48ce-8dab-64fb54123972"
            }
          }
        ]
      },
      {
        "id": "072772c9-7fd9-4d0d-be20-dee1dc19adcc",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "565f2738-858d-4d99-8022-ae19cd996f4c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97d2cc36-e801-4725-acfe-afa4b3a15cfc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "514ba0c4-a098-4bbc-b156-28880038ac49",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a51f6f-6398-4bc0-9655-2b41e2ea0097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "162a2d8b-7ab1-4837-9fef-00df0f0dfa94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f3dc62-a103-4a6e-ad55-a50476f624d7",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76791f47-feda-4075-aeab-171180dc895e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6671c623-390f-422b-9e3c-a1e1e741e524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1403ddce-1083-4303-a993-a0e860792f63",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49c1237d-50d4-479d-8ed7-f17771a41710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28c9428b-1aca-47ac-ac47-dff1e37bb771"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e5ce1873-dd2d-4f75-97ed-c84f12a87879",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c132581b-6a60-46ff-9ce7-9fb98719707f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ce3301-2b1d-4c1c-8eb0-ad278f18ed9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "091f702c-4506-4474-b345-c41103db8047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76a96448-b9ef-464a-955d-04bfacc88148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2181e2fa-6294-4148-959d-284230282014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4198f281-63c4-479b-91fc-eccb9cdc8be4",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36450158-a24b-47dd-9fee-f7aec9f15827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71a10b00-806c-40e9-96e1-2e7da72e04d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01a780a-6f46-4595-9925-38203310f5b4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "de6ee187-aa5c-4b5e-90e3-cd781efdada6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "186003de-574d-463e-80ff-624805c4b53f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "db321fec-3cf0-4323-83cc-2b879b75fee8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b4de332-c6fd-4a64-a7e6-f4c8acfc2e2c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e03973e0-ae5a-4766-88d7-65e0723af6da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01a736ec-2b9d-43d8-a6ff-d7c5d1ad3f20",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "a062ba7c-2603-440a-9044-bb791a54bc5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f70ca5b-829e-4275-8b90-d445abe33acb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "75aca38e-a53f-40ce-8743-78d94c24f398"
            }
          }
        ]
      },
      {
        "id": "cbde03dd-f52d-45d4-96bf-8464096dbd9d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "a44a608e-451e-49fe-b6b1-39163be282ee",
            "name": "Negative Testing",
            "item": [
              {
                "id": "43fc3ee4-5ed8-4040-b8bd-8e297669eacb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "98ea18eb-4a6d-4803-a53c-c1f7ac3c732a",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3074e63-776b-40f9-bc02-2949d41b1773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b6a3fab-9450-4384-b3cf-718a6e3f27b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e26bb7-86e2-409d-94fe-599a8f2673c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3afc8531-69b1-4248-9432-551878dd749c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3839a7d5-9ec0-46f9-aa9f-e8832896dc6d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c215799-3bc0-4339-a948-615f5c85356f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "446918db-da27-475c-b0a3-15dab8c86acb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee11ed2-6269-4b52-a5e9-d08807f22b75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2d43a7a-ae16-41c4-b7b8-28299f14c96b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fb54990-9e6c-464a-aab5-06c4e1467f08",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed2a256-837e-431b-b8fe-d37c5f9d325d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f70e00-b1bf-48ea-8891-1276fcc9e358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e775b76f-6f4d-44ee-aa00-dca0ee81118b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f4bd9c9-8eae-4054-8fee-5814413de058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1506de89-c456-4893-aa59-1f53b7731a5b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5490b51-9187-4757-aec9-112656c9f266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b936cc98-5c44-46be-a15a-3c6d88279aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d4b6da-7c97-4327-85c6-7c3583bd0e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f1ffc83-f329-4c25-b642-6372e6a1599a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfbd21bf-992d-40b1-a2ad-d4dbdc0ec1eb",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd047374-9861-42bc-a1db-171b31bbdae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae09df5-205e-4d96-a795-de313066178f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c37700d-716e-4db0-8a5b-edaa755e68f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8d2484a8-6160-4d9c-ad23-9fbade9f30b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18be7d17-ecd6-4248-a50c-ed06386f3eb2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21fa813-065a-4b2b-8efd-94019a511143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2318fc8-136b-48e1-a503-9ae65071ad99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6710a0-9f67-468f-b052-1b9ae2662f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "926fdd59-7b5e-4df9-8a26-ad2c8926a001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a95ff95a-9e44-4b29-ad42-f3ddf006c17c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f349306-95a3-4436-8e58-2235209e2ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f00ac7-ea8f-4116-9abb-f1fe0433f96d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20867cd8-183e-4418-a1c2-439a84eb0095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3984971-0243-4ea2-a9ba-bc88acf2110f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0425e5-b48e-4352-aa96-9cc19532fd76",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8778731c-5890-4b64-a20b-2318fab0fbfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "478515e1-bf9a-451b-8dce-3cf1349fae13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a186378a-9c1e-4e07-a668-0075a3bca97f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cd4b48ac-e945-4acc-a9e7-6e28a40fd219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "926f8d11-50a3-4195-b9d7-7d1306f237a2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2918114-9355-4e9e-becb-746bf38e3c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dc37e38-5185-42e5-a9ae-e4140d06f379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5853724-06ca-40d7-a3ff-6eb391fdf15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3f9903a-243f-43c0-9791-94ccef7e2fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e520bb52-8f16-492d-8cff-9e7139ba7f78",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6fe7df-ba24-42d6-bb85-fa0e3b56c80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36845a0-7b30-4708-8224-fdfa153154d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd572b4-0ec9-42ce-ac6a-2769e42e52ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2c00c682-e663-46d6-a91b-3bb57a9fa0db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa2107e-d102-4f64-9fc1-785fe848674a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52f6bf65-a0d4-400c-a3bb-feb807a92d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b26b5ee0-f5ab-4456-ba62-dbc2c443bc4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db421533-9012-4667-afa6-b9aecae2de4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03074cf0-f520-4893-ba67-9bc6d11a88eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b18a4f-4315-43a2-bcdb-e4355ab8a989",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b91c140-ad08-4237-9fcd-867ab9b4e3cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc900fb-96da-461a-8f82-b651e8543b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05c2c391-b671-4050-9071-153319d6330c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4d27b86-9491-4e89-baef-7563c76655fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a409a0-7cfd-4ea6-bdcc-e7ca25cda03e",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d499c1d0-7796-4d7e-bd04-f0cb0d42aa3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eaa9ec1d-ebf6-477b-958a-61daa7bd6658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b901d316-a5c2-45e1-ba9d-99f9688ddfd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01cf3748-e811-4ec1-8c55-fe52b009d02a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddba490a-8e3b-498e-a132-03a8ce058062",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01b8354-a248-48b3-9196-2716981a9207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10c4b7eb-683b-4664-a365-43fcb5a069cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e52e371-f311-4818-95e6-7b8973fd75ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "be0cbb74-2283-48d0-a663-023fe4e1c1eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82de6920-1bd9-4380-808d-8b8279345b0d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71068fbe-3674-4315-94e6-6c981c1900cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "300af5e8-c3aa-4e5a-bb9d-280d149102d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e856fed6-8c15-407e-998d-878e739f5ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe0051a6-3b19-4345-a2f5-aef55e4091fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5a32f18-8276-4409-b98c-fc8cedf0221e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a66af0-39c6-4a55-82a4-01011b75b757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63b22f6d-757a-4eae-a11c-113e0d26894e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bef01b-4b93-453c-94ac-6c3d07b1837a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18becaf4-5633-486b-a656-65f7fc218d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32db6c31-6bcb-4f03-b488-b462b6a0f914",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2379550-5198-4b00-abf5-6b4461178fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cfffdae-5df7-4510-bec7-8957b438f4e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dbbdcb2-9697-4002-bbae-85bbcb88df4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b74485ed-057a-44a4-ac51-282c3a8910b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2387e4f-672a-42c4-9aaf-8250f6b90785",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a54b6e8b-df98-43e5-91d6-eb09353a797f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b79076-6412-48be-8de7-c4864a5b7126"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48707f3e-32e5-4165-81a6-b0b894ed1db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f675bf6-6a2e-4c4e-8cdf-8bb03291f288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee08c898-1d8c-4d62-a78e-4af986834c21",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b44029-28a7-4658-9e2c-71b13ed1ae1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd7f9084-4e67-4360-8aac-c4bd504cd1b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ed2fcdf-3880-47f3-89b2-ebcfe0ab7991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6423885-9ece-464b-b141-5f6faba55085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0677e14-4ddf-4542-a00c-99c6a900dd1f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "496a5cac-ac3d-4e9e-87bb-620542076303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821214d9-355d-4af3-b61a-18714e836fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6403127e-92d5-4cd0-8c9e-0592d22b6f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9fca8a8-f4bf-43f6-a269-2967af8d675a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbad9dee-cff2-4033-8ec0-ce5293752dde",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ccabbd-4096-44f7-b89c-a265fe88ca6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a4f215f-17d6-4bda-a881-4f3febb544e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447ac875-14bf-425f-80b7-5e6a846d9b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb40f44-8f21-4613-b910-31c842c9ac8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b0fad3-c938-4dea-8399-2ec3ff223317",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc11d82-166c-4fe4-9e9c-96522e3e60c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc7597fc-ef9c-4c48-9f99-4b8a69846869"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1568324-f71f-4a43-a8eb-b578fb8398fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39f01ecf-700d-492d-8d48-fdb764b03a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fdd8fff-eaca-49c0-916e-5f81c2dafddc",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c94fe7-2db5-4ab9-9511-4fcb3e420603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1667e9c-c3e9-40b2-8a7d-c026eca6b488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccc11bb-a7c2-4a89-9ce6-43a239c9599a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "096b2d40-96c7-43c5-948c-447a16029c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd0cd27-a152-46be-8a3e-617270c65b1a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89e00dfd-0a7e-461d-b531-c1d4b94d78e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "142b3533-b469-4f29-8950-17c307693c0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d5524c-0aff-4d98-bf65-68b5ed23b01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d60bf6a-9f7f-4f4e-a869-3416b1d07668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afb36d65-78aa-4c5f-8176-57cfc76690aa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e7abfa6-d529-4114-8197-d31de87286a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d9524a5-e92f-4cd1-a0d6-43a9aa437085"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a150dd94-4b51-40a2-938a-967d45cf3bab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3ef87f-30d5-40b9-a148-644ec6df7a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c13621-b6a2-4957-9617-a7fd7a67a245",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e25aec7-d08b-44c3-881c-86759f03c5d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e1a3a2-ae4f-4555-ad3e-952981664e0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7534cbbd-4954-4962-af72-310868028c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c750cf68-26d5-4127-a0a2-71d01e2e2898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8516139d-fb0a-49d7-ae9d-c3ea10762bff",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f22c580-afa7-42b0-a48c-c1842b98cf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c193bb6-8722-4596-8c20-d9f507c8bff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b8638ab-b22e-4379-aa02-40f23fd77812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "70aa7775-2044-4bb4-820a-06630ffdb82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09159a3b-78c7-40ea-b78a-2f2e9de27203",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48dd0eee-8291-49ee-bc0b-d43d4c7afeb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19bc3215-b0be-456a-bc87-298e6942e018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26737bbf-050f-49f1-a8b9-7274904a63e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab85c90-c3b5-4241-b4f7-bf96e9c242f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bfa8b1-a0d1-4d2e-8a1b-40984b0b0a2b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47bb7c78-421d-4b78-827f-f7420756c20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc49e59f-9ab6-4ed6-b298-bf692272feb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb57d4d2-21a3-4800-9aa2-32ccc5d1f825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8eefd823-d97a-4c90-9076-429dbe4218ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e36e87a1-9300-4bd5-aac9-ced3cbdc1c97",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f50d04-7363-416d-b21f-6f88aeacc420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cdbeb1-f58e-42f7-a642-6523a4c5e212"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1181e8-2cdd-484d-b468-ad12671cf376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31226245-7d14-4ebf-b2ce-312dbeab9cf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f11184d-28dd-4fbb-a035-0395d268abc3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ea9d548-abc2-4f31-bfb8-43513058e760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c601e697-5c91-45b1-b0ae-cf622dfdadff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6429fa6-2f2f-4e1c-a359-16595145d025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd687d9-9175-4625-81c1-5938971599f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e2926b0-88f7-4817-8e71-1d922939ac8d",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c45e94-02a2-4eb2-8436-ad498cff7cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cc0b1a9-d488-46c6-b188-daea17c5ecf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a00b05-80b4-45a8-9768-4195777398e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "4058ae75-d9a8-4afb-8dce-4bb1d241622e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30099005-7974-4b24-9535-0386fb116d56",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd28eecb-a20a-4d90-8afd-f07e69bfdc8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb8e4057-c89f-499c-be6a-e060c52676b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71271c36-1609-467e-a861-41393cefc11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9102f83-8dd5-4efd-9199-b8cea949b5f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b54ab75-b12d-4542-b558-8dc4d0b03160",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdf84b69-43ce-4796-8677-f6b28ee2c674",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e38392-1d59-430e-94f6-19c02c7fbb15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f4eff0-75ad-4210-a03c-e5f850597f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95e99731-3935-4d0f-8774-b5b27914fd69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5663ed4b-b92d-4201-b889-d93c49af795a",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29ada74d-576f-4bb3-9c3a-67f2946844ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8777d49b-06df-452b-93af-dc7a445a30f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0084e951-0499-4c14-89a4-ceb96169d79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "389977df-1d59-4b52-8587-23dd2dd55830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48d68c1-3341-4e51-9128-1d2301143641",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794a0ad4-c79d-45d9-92f9-509668fc058f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3731adce-6aab-4794-81e7-3a86b15dc347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1ff10c1-3ba0-43b0-8783-53562fa3900c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "459b5414-316a-450b-a178-62bfcd34ed53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91bcfd51-73cf-4338-8073-f06200830991",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e8ecdf3-8543-45ea-8193-108bed805cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044a1f65-b04d-4bdd-ada1-357788cefa8e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0dc2d0-a115-423f-9bb3-4ed2e138eee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e88a3ea4-0ff9-4c0c-9dfd-8911e441fd10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "218d8c25-bc2c-48c1-899c-e3b2f67618e9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac54162-5d6d-40c9-b464-1c61a91f1931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1df0d262-07e2-400c-81d3-0dc996b88d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43b9a335-bdbf-4bca-b8b1-df285a325095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d6436560-851f-4575-aa2e-d050e948afdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9c91bb-b53d-4aa2-b34b-a417a216234e",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4131459-8770-40ed-9b4f-5360fcd0481d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58923120-2e91-4e07-8b75-5a0a2232346a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8c5aac-efa7-4e00-af47-3745cc4c50d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d18c61e1-4976-4b52-9876-4f2ed59b8587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfc2680-a7f3-443d-baf3-d8a8efbc1c0f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c739ef24-902d-439c-8cca-a13348df48cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb32f19c-9239-4e85-b813-adced537a5f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad7fda9c-5017-4e65-96f9-510d998801d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "95c9bff6-70e0-4270-9e00-0de58d00abc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305efc4e-e8df-4219-811f-fcd8fc21be31",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f00a1f2-e9e3-4abe-8edb-aecb5534e9ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85f9eaed-73bf-46f4-b07c-f7f4b0158802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48205531-f8d5-4b87-9516-f1312205059b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ed71fa25-5a40-4c32-9eec-53426816305b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623a0615-97d7-4ca5-b4a6-e77847be85b9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f335a6b-f05c-4db8-ab77-792112f47031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce04ea5-ec71-40ff-b235-9263d4297193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befa89db-6d8c-4d8a-9490-d77a8adb79c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ced73bb1-8607-42f2-aba0-0a5b83f7a624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b8d767-6f19-49ad-9c34-ee30bb3c2fe1",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2468392b-a64d-4c44-a988-433ea4d1cf26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba594b97-f9e5-4c97-a577-c26e1c9fa61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91328de8-040f-47d7-92e6-1ce7a88bc56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2d53db-acdb-45c6-9ece-7f1363e7a991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4690f256-905b-42d2-9311-b50074a7320a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85eabf82-3fa7-407c-bd43-72110308fae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "549fee25-9da2-47d4-a672-01a2ed5e34bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a3a3ca-48a2-4746-98c2-e568f6ed1bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3107f628-5b4a-4e4f-851f-d2e850ab2bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09bac8a-d56f-4c59-bdd7-78800f79ac57",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0e1fa09-0246-4b62-8a84-76a8b26f3656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbcb145-67e1-43ad-bc2b-10e28727c02d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246c8383-7a1e-46c7-9bc1-319182490e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "617c0c90-c49e-4a09-bee4-59f741f6f11e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8a6e8b-78d0-4c65-8371-6b1ef7452399",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584337bc-c660-44c3-86c2-0f454e6ba26c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2ba788-a3bd-42e6-a02c-f7a2e1c199c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27fbaf31-02df-4e8d-86cb-e75d3b341394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e181e14a-826e-413c-9e13-34042644a6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b66f858-c2ac-48d4-8037-9c0f1eb8f159",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b555c8-56f7-4bbf-84bd-2a94e60f6961",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8499b1-2fa2-4d83-b405-08f486cf24f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7eacb2e6-feb3-471f-a37c-23daa976af54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59aacb5d-96e4-4f5e-9e86-072c26a95d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2372f169-26e2-4b2e-a265-8b875bbbb5c0",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22c343e9-2c04-47ff-ad29-156de8708ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4885a734-3622-433d-8142-1977744baa73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b8d67b8-0f3b-489a-811d-0cca4ba7c3bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ee1c3ae-06c1-4341-b6d7-b91c069e569c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40713a55-3dc6-4a65-b723-64f3f70ce118",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f3a314-ebe0-48b4-a3ff-2b2cd2eab93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c4c6fb3-bc4b-479a-88c3-fc237bcef447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aec4e8b-46b3-4300-a171-bb4cb1b70802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d5763b9-f979-4e7e-9ecd-3c7816e131a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c37b98b-f977-41f5-b29d-6e30a1724092",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6fb4fd-22bb-418a-a5df-cad2e8ad14cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31c1f8ae-aeac-4db5-b2f4-f35ba2cd93db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773c0a91-5247-4195-bcea-58a4037197bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f496ef71-bfe1-4ec7-b726-a7fc61f884a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00f964b-da90-4ff9-90a3-25289f68381b",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d14db81a-2dc0-4e66-b8d2-8737a8d7d949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd92c831-521e-4fdd-a27d-fca186107fd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea1ce3f-cbc0-4882-9118-f2330a7bf2b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca582da1-3e97-431f-bb34-6c5c109a06bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a036b4-a6fa-48f3-a96c-c738198db9eb",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96199e1b-284b-49c1-9d85-b70e20a0df48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18dad368-caf1-44d4-9f6e-9b22ad00744d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9d87857-ac75-44fa-927d-3b2705d2761b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c535c060-299a-403f-a32e-00f65edb4b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8fd8ce-c3aa-4c8a-a651-03d723a03289",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35234515-608b-4198-a848-1c8128fbd2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a6256c7-5c1f-4390-a3f9-1b38946eed1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b6b6b2f-1de1-4469-9e62-f00996026c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "aba7a041-ad64-4604-91e2-9a25331752bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebcd36ec-4550-42c3-90aa-78d135fc551f",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb0396f-3a10-41f6-8405-d91c96cb19d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95a4b902-5c32-4f4e-8d42-388b9f795a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b6b68f-47f4-4cf6-811e-783d02332cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0610a7f-1374-481a-b33c-f5a3d8d7c353"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c708c273-bba7-40c3-9e2a-432773234aae",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4cf967-9efb-4da3-b8fb-fe43b341aabf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c994fd26-4b7a-4600-9c1e-3f5b2c27f677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87123bf9-2dbb-4c5b-949a-f7ced9873a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "71b37582-240f-475a-b111-92e689f79f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd6a3f7-6b74-44e7-aad9-6e20cb09cdb6",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6e8f05-c9cb-413d-bedd-427b04fe8828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d5e1ec-7280-4028-8e7a-ddb547b08bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48be845b-0ebc-4e37-86d0-866bee38eed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a3ad920-2dd5-43ad-9db9-f8207df17bdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "492c5d9a-24dc-4b35-afb0-eb27c1359d27",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613d18f8-9b14-4b21-a61e-b717500ec6db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4a69488-b666-4840-8131-3fa67506dc1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf327d89-ebd3-4ccf-8cd1-056cf49046c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64cd129e-435c-462e-98b1-15afcadd959a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5062109a-83fa-478d-a400-763f4b912556",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded07a1a-2f87-4c47-94aa-5cad7d3d6838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa47d8ae-d45c-4f42-96ab-ce96b28fb3fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8510175d-5d14-42be-a6de-12a4c6abdabb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9caf76-4f64-49e1-ad3f-3eb308708854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a490ac9-b3d4-4453-9dcd-d4f0ba39e615",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92f28a81-ef61-4d23-9cb3-c8db4b1acfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7db5d9ed-caf5-44a9-8933-5d07db70c279"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "418fa1bf-30d1-49fa-97ff-85cf00e8d3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f4a2c7-351f-4182-80d8-381acf9c514a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd17885-9bed-44bf-b4b3-d73e1509b761",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8727bca-e2f4-473f-9a27-acf0023f45b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fe84665-ad89-42b5-b832-eaf99749771c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cb7995c-07ff-458f-9848-d8ccc7f1883a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b6d7739-a04b-4b0d-ace4-e0734218eb91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42c701a-885c-4e9a-99b2-a8bfbb2cb84d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45d779ca-1779-4828-98ca-fb9de62d84ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b45822-cc6c-4fe6-aef1-d211d6d99720"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5960ebf-8183-4a42-864d-d0e158dd2f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "5adc07ff-5b40-4804-8f77-58fd0a9f0cde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93e37ee-29fb-4f9c-978c-0f3b9d7dddc4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23aea0b-128d-41b2-9a53-58454cee91da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca695eb9-fb0e-47fe-af72-c34a6633c617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f71a930-d350-429b-be23-56c4f006c564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5500795f-1765-4f7b-a29e-7c78db7246d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969d8583-30bb-429b-9852-7a3cb8c73fc9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db17471a-ca4d-4906-b57c-6193dda550bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57b2bf9e-41d4-49ba-8066-7550263c7088"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfaf004-6bdd-48ff-a2c2-9550a5d0b690",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5263cda2-f9eb-481e-9f50-225854b60aa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19734bf2-bb83-4267-952d-35e59a2a6e28",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84426e01-6f1a-4a4c-b5eb-6887a3cd0a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3564fde9-67f7-4fcd-b43c-97ed38f59f9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b64f7c-0465-4aa7-85c7-554ea71c8cfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "22e6b2f3-96d9-47e5-8746-700d155ea08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d8cd32e-bc00-4180-a42d-9783df5b910b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6456572-1b04-491e-89ea-f86fb5b8de93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af28ac31-a5cc-4b82-90b4-cab483073eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c49b91ad-e4cf-4b5b-918f-72cc8ca42b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb6d9c74-ba8d-4a05-8708-7675ad07e49b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9da43bff-c30d-4825-951c-93431d0d5a95",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fddd3d69-967c-42e9-a656-cc94a3c98c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f608d9-8184-49bf-947e-3607fb8c25a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a223d3e0-2006-49df-a0a5-ea2fd24222d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e599cd67-8b11-4950-a4ff-fd0a5741dfe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339c5a23-25e3-4f23-bf0e-ea065a9157dc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffe7887-333a-4076-a2cd-a21b5d89a629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea5bc678-4496-4b9f-ae43-b008cef7e11c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12495abc-7c70-479a-ab97-785600dc01d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02cc0846-c78e-497d-98bc-cd75f87de447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45db6d62-ffef-4a7f-94ce-3a1cf9d6c551",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b38a51-1642-4aa5-9c2e-378d2c148ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47cee69-b49c-4f4a-a353-dfb7de526253"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f8b54b5-a88b-4adc-ab8d-243b5f480a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f1aff86-0f90-4a8e-a93c-98d35fb5259d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617fb29d-fc39-49f9-8b2d-3564adf0f408",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "407ba65a-122e-49fc-a0ca-baf24511e9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b35e67db-fd3b-4a81-898b-5cae295de27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b070c0c-90ee-4863-ba11-4a800b7117ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16c29b54-6bfd-4e4a-99bd-b5c65f2e7a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79b5d5a-bcfa-448c-a3a7-fa0c188114a2",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be07976e-600c-4544-9131-fcc471dde35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08cac0a6-5957-437f-b0d5-91c8be5bb502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebfeccb0-753b-4277-9447-21e614f23d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2248f904-eba0-4beb-851f-1106a9a1289c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfb44898-b62e-40a9-b913-b98e17a9b953",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e5ab88-8a79-41f6-8ac7-b63337143b23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb59df9c-1d94-436c-96d6-59a35630b4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d45609da-ad1a-418f-85f0-d74904582389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "be917390-e61b-4b98-adac-5ad5b3759d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d351860a-c318-4784-bbba-d17136c8fc20",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53825fd8-0ada-4907-85b6-d7799247b7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84343419-7ebf-43cc-964e-c783a4b1d59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b6a97f9-3f22-49f5-8cd1-2dd35d96837b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb65d9a-87d3-4c3b-a2fd-054929801685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc2d137-00a9-4a62-9529-332a67575aba",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e5fcba3-53f5-403b-bad4-24717727b80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e2ab69-71a7-432b-a19c-1403f89e3d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2655268-33a9-4435-b3c2-e6585552b29b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d8b34c0-e044-485c-96ad-25107a9277a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd53d7a-4a89-490a-abae-277fdbe39d2d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec176c8-e4a4-409a-81a2-94637607fce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c8094e-0812-4b27-8d16-f28acbc77ec7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42312686-c5b1-4e1c-9784-df39d3bb7c76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60c4b671-55d2-42d5-83b6-f37d90ccfdd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbe2e70-0784-47c1-bf28-559e0e24d661",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059dcc12-c145-479f-a714-ca3904b74c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8345e1a-87c2-4e1d-8b2f-65bcb32032c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d65ed25-5e91-4280-93a7-fa3117aec346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f7c00e6-78fc-46a6-b075-a3c28edbfa56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568569fa-f687-4d68-9fae-10dfd18ec1d8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c5f78e-b74e-45e9-b266-d823db9e99f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88b849a4-eba7-4f73-ba5b-de75001fb465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae36008-6912-483e-9cb5-99f1a7832788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c747272b-32af-4bbe-bdb4-e92de41d5c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b72730-df97-462f-b654-3bfe51392197",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64d4d1c5-6323-4a39-8c5e-a955c9006ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b14ff7f-7ea4-44dd-b30f-25d5f4963861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1206d8f-0478-4ba9-b105-bdb4d44c1f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff81519d-64b6-4758-929e-073255b11f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9bb5d92-87e5-4425-a40b-ea49d07160a7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c6d540-f548-412a-87d9-e52673dea08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c234886a-23d6-4c86-a5dc-f312cd5da223"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb6dbee-65b1-411f-928b-607daddeec9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "219a36f3-7731-478c-bb26-0482959a4d96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a93ee32e-dd65-4d9a-9a77-ed7566fedf91",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64b799e0-e8eb-48ba-a62b-5e744f8bda73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906b892a-363d-4dc7-ad95-118ad32e7cf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40676c68-07ff-44f0-96be-573d9b747b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f44be081-3518-43a9-95cb-978863671210"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bfa4a57-ac58-459a-acdf-89e0601e8e7a",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5990dfe5-8aef-4ba2-ab51-545602d1b06a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f7860f1-d079-4395-a558-73653c2dfb7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c6185f-48d4-4b34-a563-f3900669f7e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "73635c78-77c9-41de-a791-f767c1530070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86392a8-1bd2-4439-b506-6712bdf30024",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8ce7d4-1178-432e-9362-91aba025af42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "380f583e-0c15-4ea9-b816-88df41c0c1f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ac98009-f67c-4ec6-b8d3-0e1d62568abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7db41092-1b67-4535-8b43-53530a6ff0a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d695e7-330d-4efe-98e1-001460e7454b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fc76d5-4db9-43ef-a37f-3e80d9431ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "025b1422-e010-48fe-bbaf-74285c8eba84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57de1133-97b7-40b4-8c25-79bdc78c4770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffe9304-b1d5-42f9-9ea4-9196df2f5d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd32f52-5b47-48b9-b0b3-f305191d1410",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7219c747-bdd8-45f5-ad32-50c80e82ae09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5e471e8-fe3d-45b0-9e51-c917bd5d6f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38b8600-4bde-4ee5-b97c-4ccb7b600fb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "96465a40-2b59-479f-b1fd-d52f58d0e36b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32dfc5f2-20b1-48e4-8037-9ea48ca6e2dc",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf310cee-c3c7-4dca-abec-d437809c87ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17621b96-861f-46ec-8a20-b3d48cc92274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1deae6be-a5c9-4566-a397-6acfc5e891df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd2135d2-894c-4a09-bcc8-b1e86a6b2493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60b6954f-a8e7-4e61-84be-fb65f22b7b15",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff9c654-86de-4a9d-bcd8-4156778c0713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e3b724-1654-4a8c-851d-ee99a25304e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef7a552-f184-4e86-b766-53d46432086e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b78e70-619b-4434-9729-129e95e5e64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d4badb9-51a8-4460-bd7e-5a82275ceb37",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e064d20-257b-47fb-9b9c-786b8d92e3a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c3eb15b-0bd4-4393-b608-43f211f1ce3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81980037-68cd-4392-8392-9092ed16bde4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25e7faa5-c000-41e3-9566-1f9b6ace4798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16904f51-c717-42aa-92c8-f55c969bddfc",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70510ee-2389-43b2-8087-39a313a3147c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f89b3a-0d19-486a-a096-c2585c98d517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88a8f1b-a041-4cac-9ea0-85fca71a36c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "47dc37b0-acd2-4ddf-b738-94c15151ea2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10abbf67-8013-4d76-bf67-fd99ab06c0de",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7a7d58-c9ed-4b60-bd2d-a3175a2c76c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665576d1-b3ec-450c-90e2-85c99fec04cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f80b507-b8f4-419d-a816-bc4f66ea6ae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6673f0a3-1517-45ca-8dde-4207b44f9b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f003342-4b0f-4355-88cb-c39d5d722778",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc616fb-0c1a-40ab-b72f-8bfb3cdfdf2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9840b5cd-16c1-4395-a965-ae3fe2b1c667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3377d9-725b-45c8-b58b-feb3f0b405da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e78b9f70-e37e-46e5-89b1-82a749559d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d355a1-f1c8-4818-b0a3-de0c563ff858",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b396f55f-9c25-4e00-ab87-8b097dcdd6ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b3fed3c-8da1-4884-b3d8-e3ffa3de7b3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d0db8e-4d9a-4201-b314-61c2cd78793d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7da670f-2011-41f9-ac43-08c5165347e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1c89a1-8cb9-4131-9ba1-25a12d026589",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5dcdf10-07bc-4853-967b-69f7f36d9337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057ccc7b-4b8a-4137-bd6c-6f2ec2c47a1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ca96731-9552-482c-894c-084281657d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b24a5a80-c00f-40e7-8ef2-250a3eee78b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9192733b-9bcf-481c-98e8-57b0ea1b7e1d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef24a75-c9c8-45a4-b237-9e5166cf3470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "223b98a4-931a-4d2a-b820-87aeaafefd2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77e04041-94e0-40c5-8c0c-cf44d0237768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "820d13af-c44d-4c8a-ad1e-31e70eeb5ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8a7f62-f47c-4bd8-857a-d103437249c8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6842f2c-77b4-4ba0-b49c-7cb6c07d47fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b34a8db-0d83-442d-9b6e-c68ab3c15771"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41a39a3b-7866-4118-b54c-b67416488c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "990eac1a-8666-4b22-90b1-667949fbcda8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667e6420-a795-41c3-bb60-fee8dce6d8c5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70db8867-1bab-4a82-ae55-c9422821f4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "28f08487-cbff-40dc-a8f1-861fcd91c132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16f22ce-ee8e-4b3c-ad35-6c913b6efd95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1acf4b84-74f2-4703-9249-6bd398ed7202"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fa35e466-8b8b-4e1e-8b3f-da2790da0479",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e252f208-888a-4286-8cb2-8ffeebb6aa43",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a271266-1824-40af-9dd8-2c0ca8fd06bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5f09543-c752-4534-aa3a-18f3117963e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0504c7ce-4bcb-4693-a386-a905fd56d27b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a0ee016c-cb8a-4aef-860c-0c42c15ff842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc71808-71ac-477c-8205-ccb0ca6e92c3",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3e296d-8245-42c7-a5a9-1a8a9b581dc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79f76196-fa70-4f94-ac67-f86326778632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7825f3a-7a94-4e37-bee0-2f76c6cb941e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2226fded-8d4f-412d-87cf-a62e7d0c2416"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd4bf96f-e916-4d4a-942c-3df18021e679",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eff12453-b6ee-497d-b753-8292f1a4547f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34fe2a03-2dc1-426f-95cd-a992aceb5219",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee036e33-96cd-4af0-95c1-d5894b0fe00b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70d8e163-01d7-4b77-929a-148726a030f5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6f808e4f-07dc-4fe7-8bb3-45921f5c0774"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0d1e54c0-3e59-43f4-910c-80da7e611e7f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8122e199-1866-4b61-9498-235db4685b6b"
                }
              }
            ]
          },
          {
            "id": "0494a93c-6717-4fcd-b5a4-f91ae60d6150",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c80f928d-55cb-4441-ad25-4051947e0f7f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33e479e2-5e51-4f56-b252-ad2f709ec830",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5444f43f-3eb9-424f-bc5c-9b3b2c55e127"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c364a01f-ad5f-414b-9c21-4f457987d61e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a6926449-9135-4a9a-baf5-47dab6df25b7"
                    }
                  }
                ]
              },
              {
                "id": "2cfb1d2c-74c6-486b-9f6e-86c1b0d7d473",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bca1cd55-9b62-4912-90d1-1aaeb8522429",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85998e07-5aa7-44a7-a303-06829568555c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a1fe95d1-6d74-4060-92c0-b49065aa9f7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "97d1e06e-2be3-45fa-b66c-2cd782bb942e"
                    }
                  }
                ]
              },
              {
                "id": "c4f81180-d73d-413f-b993-35dffc9a95dc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e1c6f1c6-70b2-41c0-bb81-e6d5d79ce035",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "462b9ff7-37dd-41a2-bd50-d2069ef586af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe86d509-ebfc-4ace-a5a0-784611a958a8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "acc8beea-9d5c-441f-b095-296e0fcea694"
                    }
                  }
                ]
              },
              {
                "id": "ac919f8e-c5f3-48f1-9780-6384c1b3cd4b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "59315838-b897-4319-a986-ed66bd1cd60e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a0c0b3b0-83d1-4f45-af60-3bc43fa612b7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc0da2e2-2105-4ffd-930e-09647e3e8ae6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "59b36c89-c3be-4618-8cfe-0597e3589fa3"
                    }
                  }
                ]
              },
              {
                "id": "6e15cf9a-4188-4424-8f28-fa515559f62f",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa188517-4b69-45b2-9f27-7a586a2fb0a4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf6417d0-5ec3-4004-b96e-81535046e7d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7967daeb-4d9c-471e-aa3d-3b5373563857",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "35dd583e-4779-4911-b2f8-55c3c3c56a0b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8c816e25-cccd-43ac-8bbc-77e25363a5f5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ab1fbeaa-8d1e-4c6e-8d8e-8142415e4582"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1fbb97bd-1b04-4a7c-a7b9-8b61d8497f73",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "217bce01-33ad-4667-bd49-ae9f659ab98f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "831a778b-11ff-47c0-9057-a27d9c6e1186",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d1495ed2-053e-4cb1-a16d-175a666c41da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fb46027e-66b7-4df7-979d-c987dbecb6fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8160c728-d4e5-47e8-b192-88881dbcacac"
            }
          }
        ]
      },
      {
        "id": "b9dbea4b-2e1b-4653-84d0-039b0c60c869",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "37275ad5-13e0-468c-91d0-d1e68860d18a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6a841a41-8a46-4f5c-8e52-c0b520b42810",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c0a7519e-7d8d-4ae7-9246-7ac2b7f8150f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4d3888-f668-4690-87c5-ef1e5f713179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfb692c3-770f-449f-acb8-475f01f9d825"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5141677b-2a01-4ca7-b102-7be76b3205be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ea9f7b-0d6d-431a-988c-0dc69c9f46bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ef38023-d715-456e-a3b4-34113c9a98f6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0b18cfb-dc7e-4c51-a31b-cb6972c7a45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969ec26b-ea5c-4371-afa7-916689dc67cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a311880-94c3-4e80-a136-6adcc653c911",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3392e40f-bb87-4b95-8e42-85dda7791f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e09b2975-0a53-409d-8551-cc6954e50973",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab31e9db-084a-4cd2-b5c8-1678bf729ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13cb86ca-c914-4fa0-9618-528cd98321b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a8211f5-f420-462e-a43f-1caefc3dade7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92ab5704-b9b7-4352-8e41-1922c4c5811a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3cc1acf-952e-412e-95d2-3942a065b274",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c33afd-1054-4883-a2a7-04830be876af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df8396cd-21a6-4a83-a582-0dccecc1b262"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafcfe85-2e99-4c11-8eda-7ff26be6adbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c87cd09-a32a-4a83-93ca-cf792861cda5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd82e841-0858-48dd-b760-c3b0d90de6f5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b546c7-147f-4da1-90a4-7cc844b83928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1295deff-cbe6-41ff-bd42-4c012d57f54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737bf525-78ea-4c7a-aff9-dde34b3d7c9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc10f3a2-701d-4cc2-b50c-c64e9d437b4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9506fbcc-c610-443f-b3cb-aaea29bf9996",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87bc8ca3-1de2-4a0b-b42f-1c38609e5007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da73cfbd-4828-48c8-a91a-83e6dd240ac4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f280e1f-b009-45d1-b417-a1fae0310723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb6032b5-22ab-453e-8c96-78e2ad653218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea5364b-9940-4c2a-be09-18548835c561",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f45ecd-872f-451a-928c-206e53e9ffd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e88c58e8-6fdc-4270-a2f6-d415bb166d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42af4544-e158-4cee-a664-01ca01b723f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "d36f10d3-459d-4096-ae83-57bdf758f950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12f4d20-2552-4374-936b-414951b445ca",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad95c059-93fb-4d9e-8842-1a3007c5a0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f693cc41-b99f-473e-99ef-fd6f92d7f193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7873712-f00a-4428-b26a-b9207561d264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be648fd9-98d8-4569-9c2b-d5aa87332575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3e6375-58c3-4015-9550-9ae6dcff4373",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16489eb4-2767-4613-bcbc-23216cd6954b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aba140a9-5bf7-4774-adc5-235c423b402d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1124699-5f7e-40b3-86c8-c630c0a94a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "554a1ed0-edcc-41d6-a8f8-b77eaf7d69b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddf703e1-ee18-47d7-82c8-c5f3aab1ef6b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb7c69f5-00c5-46ea-896f-334ce2f941c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "595e0ad8-dc89-4326-8e14-d0793db4cba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5254a87a-dbda-4fcb-94d2-db087559923f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7429cd8-9aa0-4db3-86cc-2c1b5995222f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b07638-a569-456d-bf3b-d2d145ca4073",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49144b0f-0af7-4d9f-8351-f42fc3ef01f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c5c845-c4c7-46d7-8848-5f3ea91042d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12fb7403-9339-49e6-a5c8-326a4f49dc3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "86f9aebe-c6ca-4785-b098-aa4912339631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1768ebe8-f0e6-405b-929e-8e8d13e3125c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf5b503-8c81-4b1c-a47c-934a8d52bcfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa237f3-8545-4e3e-980d-5caafccd899d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b263952c-8a9e-4cfe-b493-967b66279c22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f8e34b3-97e8-4ae4-acbd-4833ccaaf9c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3044229-ca6f-43aa-b290-729c67885ddd",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5371713-2d4c-4f95-a878-57973f49a81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20fe2eb-41b8-411f-afa1-fcd64879da5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b2b92a-c485-4da7-bdf0-ecf276c470df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b6e8c6-f08e-45af-ac7a-7292295d8dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7004f28e-2fe3-4a5b-a08f-2607935471b4",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c53c5b-04b5-40df-948a-4240683a33b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dfab0bf-6a04-4a36-97a1-6156026ccba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0ed0514-5f9d-4c25-8c7b-9ffd86b6d547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f56e952-e579-4c2c-bd5f-47250a87d9dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74046f1-5418-420b-ab85-8a8acb5682fb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b11b8c-f2dd-4733-8af2-1effaeedf87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61124ed2-67ea-43c4-bca2-442d8298c6eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9012fe19-3c8e-40e2-833d-cc91b87b8385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d0af9ab-de59-4664-bc0d-4c0e2bd6dadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e1953c-42d6-4f2a-bb4b-ed1bd1f80b15",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1db3b86-35d9-4bfd-a677-58292aa98beb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "929d57db-eacd-44dd-a8c6-6f187ee048ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80bfd45f-467b-4536-afb2-1b56f3a4c6a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1f017f-910d-43ad-9b16-3d62c5c02261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28b4676e-197f-4de4-a4ae-40c0141d53bf",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbab171a-1c13-46f1-94e2-3e27a0905f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39cab3a2-ec34-4a44-b4ce-bc9a917799ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dab74f9b-5f1f-4e3e-9dd4-1100edacf427",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "0152e2d5-1822-4666-86e4-32bf2ee9f2ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91cde6d3-3703-4021-ba60-47a0ea2155c6",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc591d7-dfd4-4bf4-afd2-d8d75e0ce295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b422de55-abbc-4c14-8c77-65c2eedb089b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a17a02a-bb51-4f59-afda-94dc0c3feb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ef1032-c34e-4ba1-b16f-7eca90960f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a96017-1821-4947-87fc-d71bce933618",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32676c10-b4bb-4a31-bf0e-82b1e250e975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64b4a032-bc4c-4645-9360-b9346c0db70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fde041c-c70a-4fea-aeb3-ec7ad8234bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a419d1b2-0fbc-44ff-8deb-393c41fcc370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8bdd37-05a1-4d9b-968d-bee93eab1d59",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400415a8-8e58-48bb-ae3b-ec701f8a3710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f77d414-5d80-4f58-a3c1-cb3a4e428072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f637ecd-ef30-41dd-91ae-2c0294bbb126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62bab000-f5ec-4190-906d-e669a62c6bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f34eb0f-2075-482d-b3f6-7c9f8d836c8e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38031ce1-4c4c-41fe-884d-a69990fc960f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e73f3f20-428a-4d26-9ddd-1436affb2980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5cefda-b847-4675-9256-442f217d3a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4eae7267-9116-45f7-b089-ffefcc690edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c47ba55-5352-4c79-afa7-74a6d7cacc52",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1bd5ec9-0dae-47a7-9db2-4a8745842874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48cf71ca-45ea-49d3-8ab9-b450e488e918"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "096ef5d3-abbe-4883-941e-8a3c71437ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a3ef0c3-5cbb-4795-960c-90edce9ed15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4146b41e-f492-4c3a-a6a7-97b3afb344da",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df7b42a0-abec-454e-867b-f6b53ef0aa46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1274091e-dcfb-4168-b89b-2d42700695cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e11ca2c-63b1-4b2e-9fef-ca402bebc4cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04673155-091c-4cb7-81d4-c2a244f22df3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad41c61-2003-44b8-931e-3e6d5c9b13c0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68b2bf40-3f69-46d5-b685-93010463efd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ba9686-0f3c-4d8a-8707-f034f019ee4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb89d4c-f769-4c34-938c-5a8f93a02db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "beefec3e-c65d-4598-8c90-c42a9beef89c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab5874e-633c-41c6-b42c-1b6b0e069752",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f363a536-c52a-499a-b799-ea2d6ab8adc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70b9763f-1501-4a3f-ba13-7b66d80ec71d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a9e9d9-8b80-40f9-9c72-4ad80481451a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f6622a2-561a-4cd9-9077-be26f8a77cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00a058f2-e138-49a8-98ef-3d3c4e187d3f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ec4274-5563-4e5b-909a-8e7ec9ffddeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7e5108b-2286-4429-a462-954093efefb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d4c01e-db1c-463a-a47e-0f7533a7b3d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b24464ee-7c54-4515-92b2-8330a089f033"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee53f1b7-02bc-44c2-84c0-9e6449bc21f2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048c74d6-c56a-4923-bf85-43c56e5c1075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2034398a-6143-4eab-b321-2fb3d48fd1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37234d81-fefc-4d40-9b79-ecb9517c7362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3823647e-ba09-4fa5-9435-ee5cd4d1101f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1fbdd1-0d2d-447d-9e7a-e737da74db08",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c100c7-e600-4af8-a50e-b372e7fdc11f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37df99a7-d339-4e2e-b230-9389a16d1100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "300112db-7178-4f3f-9247-2d78ce9a0ff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f496d45-2e35-4133-a5fa-c7830e313201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f2cc977-b809-45a8-8a76-43760a951de1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e922859-10db-482c-a2ad-824a549fb38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f5b1078-f8a6-47a7-94a5-7322c7d6fed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f282971-f400-43cf-8475-41f2e2cb0262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80cd640c-f4cb-4c1b-98a0-74aacc24dcd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9f228d-a61f-481b-bec5-e361ee18d3e9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63375ce0-fad5-4795-985e-a2a7f51d7a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89d44a7-f7dd-4d83-89ef-8db67123913d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3bc68b-8e3f-4808-a76e-f0b36c334f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9e4d8fc-6326-444c-9ac9-d0e2ca9f8cda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dd7555e-7e9c-41ec-a94c-fe4f31b23f05",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "520fb8c7-347a-4955-ac7b-5bed81a0207a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68227b23-e52b-4ef7-a1f1-e17035b07faf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786d20ce-2b7c-4e31-baea-681e575c9844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b105812-2729-442d-b9c2-c70612b443b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa5be3d-0740-41e2-b9b5-f23d408f754d",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99f576d5-69be-48ed-ba90-9864c8abfe97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d402870-f06d-4369-9aea-40b2267968f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842b3e21-0399-41b0-8011-19908d9210f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18d5bc5e-704b-45fd-a604-33f94a7c3db4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c2bc3e6e-437c-4b89-ac48-3cb1aebaae96",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b17f4267-c040-4fa5-8ba4-fc2e376ce70a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36331a3d-bf58-44fa-bf23-9d21844b0a98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322fed29-5b57-45a1-8534-cd600a19a077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ac71f3-7cdd-44d5-8924-ec8f1372154b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c0e2b45-2c07-4564-bce1-f21d6b55f593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "820ef3f1-42c1-45a0-91e9-9d6708ddd9a0",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f7ba27-171a-406d-991f-65529d9e4d08",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "a4af5e0c-c757-4e45-a2ce-0f58aeafe6ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268bd624-34ca-4a64-b35c-b1b5398168de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adde53a6-dc8c-4755-9353-fec95bed95b8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76b8f1ad-6e4a-43f6-8e7c-e7e7aff7b778",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b9609b1-13cb-472e-95c7-b8791c5c1844"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7231e8c-c5c7-4d7a-8769-6dbb8fe6f9fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e281883-580d-4e5e-aa83-8a8af119cf65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e36b591c-16c1-4738-baf7-5626f5cd70e4",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9ad939a9-304c-4a0c-bd57-b0f6ddd3a823"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "09805fa6-19b8-4ac1-bdcc-05cfbd110fe1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "27480a13-fc09-48c8-b286-47b76b6e2179"
            }
          }
        ]
      },
      {
        "id": "a06cabc2-7962-4a13-89c8-a15128b6010c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "47b934a9-9eef-4863-92c4-0296962ef4ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc2c8bc4-3e85-49c6-9b9b-b98ad1d2b398",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0bf5e3ab-c210-49a3-a0f5-7180e185e27b",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "965cbe63-55f1-4abc-939d-37e17a237e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5745e205-e22b-463b-8dbb-0c160e11056e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6094770-302b-4b80-b65a-3a39b1b87789",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b948537e-4b80-441e-b06e-c67fc25771e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa02c71-49b1-4fe8-b594-7e036f2bbe43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f02b43c-d3a7-49d1-bd93-a8de555d24fe",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b86cb30-e819-4923-845f-48423b198926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2d0731e-9f55-4a94-80e1-c72c20c48d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62fbd99f-718a-4cf4-996e-43d1b17bd440",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4052eda9-b8ec-4135-b77b-f27a2d177cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e7fd52a-1f0d-4dc5-97ff-61b5aec54d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d50cdcf-27c9-416b-bd4e-93fb67ec1387",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d132d6-fb0b-4155-88ee-4e7c180cc24e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b422a0e2-c0b9-476c-9825-34f2ad0edb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d1f305-d4e5-486a-b01e-99e0c359a068",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00898f27-1de2-452e-8f06-7f0c9eae0336",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e732f551-a0a9-41ad-b116-528eb20f3061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16670d9-b002-481a-884e-b5eb7f80b8d5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c1e28c-1c61-4e02-b80a-953a572a8be4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4144f84e-8e52-471f-adb1-584064b3c1a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e52ae42-5ff4-4b72-b195-78f29cbf33c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "664d246d-c8d1-4337-a7f3-47ebbc51f7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26867928-0489-4b40-9c86-007bfa735dba",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfab7c9b-9c18-4897-b7d8-c9d811f85ae6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b718f9c4-dcaa-45b1-bf00-db03e29006c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6361fb44-87b7-42a9-a1df-08f765328f3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55aedfbd-ea9f-4f1c-9758-b408bb39be30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312222ac-2847-482a-b054-1b021291b74d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0700cf-a6ca-4853-b80c-ec0a37c959e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fc80844-b33d-47fa-aca5-b56d9a36b3ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0377fee5-44ac-4963-bec6-6e28bd4d832f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f137858-7e86-4822-8b60-666851ba7857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a5d6159-04fc-46f6-bc94-38180fc9253e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594c4831-eb12-4f4c-a8f8-1d077a0d19e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7d66d27-1d64-4d13-be9f-bd98c78d5c6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5307ed82-e932-43a5-81e8-4467a33e0090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9be948-0a06-491a-993b-28d1e4600499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9016f6e8-5341-473c-8418-15d3c57591b0",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61be792f-254d-4f80-83a7-f5b44f8df0c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d0a3c47-153a-49a1-908f-67d8d3baf1f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd1dbd2c-492c-4a9b-8e82-5c260ffef963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "998ef073-e9c6-486d-bca5-ff9f146d8e8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fabc46-4276-41c5-a6a1-62962de68cc0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aa4c5fe-7740-4333-9605-7a8e2b13026a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdda5688-9f94-422e-9baf-f84e77bec3db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12872d27-3e55-4874-8d11-377ce5d4f3f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73691699-6d26-4fca-9815-9c9bcf1b5dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d16c3c21-0f55-4efa-8775-061a166cd450",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77a57f8a-b80c-4c6e-965b-950020df50b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77f66464-eb46-4b6d-97f4-1588741f60bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e2f1165-e093-4d0b-92f0-8b766c7fbc1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e7afe62-58b8-4c62-8372-24e5e2af2324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795ce4f1-9aba-46e1-9c58-9065052d4922",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac7154b-8c32-40e6-981d-a58a0c81f584",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "901714c1-8edf-4b55-8e6b-2ab9d970a367"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d710ec-bfce-49e4-83d2-a940afba56b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb5065b3-3ebe-4bf8-a492-ba3deb3b41f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d818a5af-4f99-41ff-856a-72b3aee892fd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae4c712-1121-44eb-9ea4-d7b65be2d41f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e11835d9-3d51-4414-9384-086b766884f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dd439b-0a8a-49c0-8acd-bbd6ef3a3e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa8ba369-07fd-4ae5-83ea-808cac10bda4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e93740-60d2-4f45-b5dc-53481ea2fac6",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920f96a9-5262-4a8f-877f-32ee1f03f3cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d9d5ea7-954a-4ea2-9a7c-37c8426f71ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e1d92e-88db-4cd8-bcf5-82e8bacd137b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36fad061-a394-4c6e-b999-a357181b5cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc146ec-eae9-45ff-81cb-39b09beaf9b5",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b48e396-f6b9-4099-8f35-4a01ccb75636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e86b40c6-a3a9-41de-b1dc-042dd7206805"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccba1d66-44ba-4861-b4f8-15b3e20df4b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2ab04d-4752-4ed6-98d0-79f429a5d086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5279c4c8-c94b-412c-9ae3-86a63c6b331c",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45b7484a-c699-4313-a5bb-c5766c923ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2459d3-f580-42b4-b7be-aa598c821f92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1274129d-ecd3-4195-ac8f-4b5f9513694e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a056926-831a-4558-ad27-5811118970dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980e62bb-6b6c-4c3e-9513-5249549c1689",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdc4a8a8-f79a-437f-bee0-58da084a46e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66bb9440-3041-4e00-9abc-4ab484356921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbd7ac1-1860-4f73-9ca2-c998f6677d8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef6f97d-f35c-442e-b9b7-1d4ed0fc0f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45afd674-1b76-42b2-8ca4-3fe53c1608b6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db9dd841-8c83-441f-8f2b-00f01f11baf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b18ae56-23f8-4ec0-baf3-515025e5f43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d1a94de-d498-4abb-9a6d-b16b3cc613f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d57407f-7132-4a90-ab90-0ec730bc3a60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c23c2a-eda9-4a44-8521-7ddb48b75e12",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9f768e-cbad-46c9-b0f6-43d6b2b45e8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faab5351-f52e-4d13-8ce3-0926b99a767b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e93584c-83c7-4542-9fb2-35ca60fda401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2741bfd-3d96-45c1-ac7c-0f8d26ca0e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4ce4bf-d8c1-4236-b219-325950bf0681",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06d95887-9a0e-49f5-b7ab-cfdce9d5ece3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da283a64-a1d2-4ed3-a6dd-7a0587c6531d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc57e5c4-b1ce-4321-ae20-43d11cccd703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9468b3a1-a968-46db-904d-afe69f281fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9f874e7-2d4e-4558-a189-a35edf85b910",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cfdad72-f6f0-4386-b939-67abcd051066",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afee3cdd-c8ed-43ee-951d-47b6ba238594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e09f894-4425-4497-aa19-2d81fefa4ec0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91895ba-ec2d-40ad-aafd-9b1e6971740a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9601857-ba84-48e7-8016-f9ea1be81c78",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "246b3d8e-29b0-402f-bf45-ebec9d982194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd127c51-de98-43d0-a49a-a9ce8c03b8d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59152329-136a-47e3-85d7-957f09b05c12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25c34412-af5b-420d-8a9f-6aef4d6cb158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2618395e-d046-48d8-9b4a-d57469f763a7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a12d50-3e13-446c-affc-b20f9a7c2216",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12b1385e-4a89-4c74-82fc-a639a48999a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1c92001-3ee8-4c3d-a9b5-0bb6d7cd476b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4227ae3-5395-439e-a2c7-d43249925b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01868acc-2a65-46b0-a303-6a2f66778322",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90521112-18f4-4afb-80c4-698476ce012a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb7b3a17-0375-402a-bb64-f826b11bfa3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e17d974-3772-47cd-bf14-70666a5fcda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d32e27bb-556c-4385-b5d1-f7d20333753e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41305154-2bdc-42db-985f-ec755d03966d",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc4ef7d0-ad46-4c08-89bb-c74f4378e418",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a05777c-5680-408a-a4f8-bff62b1921d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "038dd80a-2a30-4b0f-8893-2dcec027fb67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b46370-c767-4ce2-a06b-f9fec638ea15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba50d57e-b3db-4871-810d-90ee3fb0577e",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1049a1a-09b2-44e5-abfb-3fab98a2a97e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afec9c8f-357f-4c83-b238-b8a231c849a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8543d776-09cd-4a53-b2df-f2de35d824ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a98c6cf-b778-43ae-961d-d2bd96da0571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85cf707-a7f9-4885-81d3-9b7562544973",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c446bafa-58c6-4b28-8356-05b3dec5eb46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b2eb7c7-d242-4270-bf73-ffda6142ee0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "588f7dbc-1f13-4cd6-9627-05a7bb344a16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224a3f34-5427-4488-af9d-03ed534b6d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "269a3708-e2fa-47c7-8e35-411b39c700fc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc51e7c-713f-46db-bebd-b8b5f43f79b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65dc684a-f92f-4fbe-9dab-5615bd377a66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8557232f-ba84-4331-9cb5-fd3a4c5f5b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98bedaaa-6882-4d6c-bd51-ee4c51f796f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15141b04-4f79-4dc0-9c2b-937c9a5c6fa3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058cce95-d971-49be-a1b9-46b99ff1a619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "651e3367-1909-4a6e-89aa-812331ab4cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821b6436-b1f9-4d94-8295-8ab0a7d51fdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fef1bd8-f7ed-48ab-8cc5-4c75ddecd347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adce1a2-243f-40b1-9ffc-a7950b088fdd",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82096a59-2a24-4064-8304-dc234a4d6b53",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61cbb8fc-2a73-43d8-972b-03efc0318019"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb645970-ade0-48f8-b58d-76e7a17707bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a609cbfb-1a79-4dae-b39f-51e38842c798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11de7d4d-0c51-4b11-a82f-bc5749016d4e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68c712b-4379-4ad0-815e-b585259b03f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85c08e95-0f8d-4372-acad-1ec9fe8b7ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2869bd1-739f-4e20-bde6-5409791740a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0865f24-6d81-48e5-85f9-21b83f7b5a5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210647e6-7e5e-462c-9820-61cc7d7bb1bf",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1164f180-fcaa-4a8e-bdc2-c35d2c589ada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da0b2e34-9c8b-4d4d-91d4-8511e1e685e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7739c31c-6d6d-4eaa-9d17-8ab2e37aad4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b792d954-b496-42ad-8888-7ce3aefe3cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5c6e25-d0d1-41fe-9d66-8a807abd35ee",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab5cf666-31aa-4bfa-b718-f8a75a2b466e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e8c849b-fb86-474d-9be0-580dc4d202cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9dbe033-94e1-44a5-9e01-53febf4b66ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a472730-4613-4221-8573-2cffb2331989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0532df49-40e7-4d80-97a5-3ca2adec74f6",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ea057c-7006-4a2a-9a69-f5e865b389f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9011ae-f7d9-45a2-a2e2-82c3029fb8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9008086-bc0b-481a-bdec-d3ea367f3e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1678bd41-2402-4700-96c0-b6edc935a790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f31f564-a50e-44b8-a2c4-3e46b479db98",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d12edd-b3d1-44ce-b5a5-c5779aff98dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ad8dd5-0014-41ab-b635-5ee09b1533f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e898f024-e013-4483-b4a5-3c4f2f9684fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e767e51-ad93-41c5-9111-ed2c6029971a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fa2773-8e66-4711-804c-f6ed85f4959c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfbcf94-571c-4587-8a86-c52c347717d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af562e01-c39f-4708-9eee-e62daad170eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f201a1a-6c5e-4edb-abb3-dacaecd52466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ac00f9-132d-42f8-a3f1-cbc37133d940"
                        }
                      }
                    ]
                  },
                  {
                    "id": "977b8d6a-ae51-469b-92ad-50f3234b0cfd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1be55353-aa62-4769-bc5d-8fb4b8058685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f805c7c-eafa-4e04-8516-9568b23342bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6b7f3b-f1d7-4c29-8cbc-c2b9d4a3d5a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43be2891-8ade-4c2a-949b-bf9a80ef6b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3146bb3e-582d-4422-b79e-74c82e9fec8d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04e5576-590b-4fbb-88dd-7acf5cb7e2a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5273d6cd-464f-48cd-9073-ecd341717bfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4e14d0-caee-4710-853e-8c96be7cbeca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cc63b9-ded5-477a-bbaf-b98e600cbafe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceba1f17-d3bb-464b-9a78-7dd1d0dc70a7",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f715c3c0-bd9f-4358-813e-0b3cd79ca59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d23890b-8a0c-43f5-83e0-2c68f78fa076"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "831ffea3-3396-49c7-87fa-3c7ed6c28d6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "796b672f-ba86-4603-a4c5-f19aa2a489e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e7ec7f-8457-4be0-b6de-3ac879e9804f",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50eaae38-b8d2-42a2-be23-015494c5fbc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ce4c65-117f-47f4-a927-543a6a163eef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb1af6d-11a0-4772-96ce-437b28ffab2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "523dae93-8ece-4749-81a3-4a3de0fe2d35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f992ce06-bef3-4f13-bd17-e1a87383bc55",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9545abe0-b218-40c2-ad46-f8c4d45f5bd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd83ae6a-8ff8-44f6-9b02-a39251dbe318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f18f23-24d4-4ab1-86a1-d4f3f0e11577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78adb8ad-c0ed-4dae-81fd-a9500490864d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741b962d-4258-43e5-ab72-9a60eb8717ce",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b764038-e7b5-48ea-9a50-19b4e247b964",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a519a7-f86b-4216-a8b6-01714c0c1c56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b3e12d4-b04e-4718-9890-aeec37cb3124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fdd11ec-751c-4b67-840f-f3adf756e0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bd18b66-381b-4199-9549-3447205de9e3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a69be2-c3fd-47c6-9a18-08938eaf9462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d7a737a-de10-4b32-9e5e-59f9b78bbe21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f17b181-9ecf-41b8-ba83-9ee6900ad3fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73801a7-e8dd-446d-8fd1-1ceaf2527efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4c69f4-92bb-458f-a1de-5756e174df78",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64543714-067d-4189-9762-3f3d482ff654",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737fe4a2-d627-4caf-ad57-03f59923b0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b0600c4-97e1-4d23-967f-f28262e63921",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce1ce470-903a-475e-af25-8dcf4b95dc97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47271a4c-3134-42a7-bf13-382c2d071387",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f0681df-47db-4fac-b02c-a2eefe60227a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "480f0116-3281-446d-9299-2bfd5d14c3b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad1104d3-a461-4d42-9484-03bbc9f26b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "675cc1c9-1d7e-482c-811a-df833f028aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55cdd0e3-59fe-479b-b94c-2f685eb8230e",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e14f89da-41d6-4e46-a4a9-a2f942b917af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb4a35b1-e342-4d38-adaa-fedac63a9d62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6049be58-acf7-42d4-8e3c-f3ddb559da97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab5e07c-0a46-4bea-8ef1-bf4ac1f3df87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f544b2b0-379a-4857-8432-eb1e028ec9e0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6066d43a-8342-49f5-8491-30e2a26a2e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "816c95a1-4b63-4407-9719-8aebd379f561"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4de86a90-814b-4d14-aeb1-fc72c60f24d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8602c522-4f93-4a57-9cf0-4170937a46ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972122bc-e260-4609-8d1c-24f4a8357ac4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbe8c87-60fb-4b41-b027-7ac62a9adf9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8688ccbb-0bca-481d-9bdb-59736f0632c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357b9348-de9a-40dc-899b-7a07e205ef3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "476680cb-3024-4651-9ae5-58ebd8c26454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fea036-c8bd-413f-a3ce-f511adc493b2",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e424d375-ee44-458b-a82b-b144d677e4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46c94ff8-1faf-4c6f-853b-8afe35841218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "343d6374-e8fe-4add-8849-2759a6118c3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eadbf0c7-39fe-4602-a8af-f513ba3b6118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24aa0606-7507-41e2-bd85-ff3801535967",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6766f020-e601-41db-a25a-d1d0905e32b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f510dab-16da-4ce8-93f6-f3b3e6184348"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "720aa715-c05f-4649-92c1-37abbe66e283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06155aa6-e35c-41f1-81f0-4889850fce63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5498e423-b221-4149-be82-14b23f78ff03",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f793758f-e771-4a8a-9747-61d12125faac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e63dbf5d-6077-4765-8828-a30b0a548047"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aaa4203-b69b-4ae0-9ba8-d271d87f4d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d04e0f3-f587-47fe-9c06-557d90c296ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eacfa44-416f-4c79-8385-51104131f3d4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b80546b-45d3-4005-9103-eba3a1e41e07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e359cf65-e122-4661-8108-df53f69beaa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3a798b-ec57-4bb0-aa38-c3ceaa7f5089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d09da06-f578-4680-8dad-8ad4f6ca6d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75164b20-eabd-486b-a23a-6db0958fdd10",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "076d356c-c850-4466-b27c-7d6f51b1f2aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb02fd2e-182b-40e9-9a3d-0130ce4ac249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8a0e40c-84de-439a-94c6-8023fa21c23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a1c17a6-d978-494f-9225-a336015a5737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cd6114-36dc-49db-a4c4-02d035a12026",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5019b0-b8d4-4f8e-a255-f7cb88aa74e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "531933f3-02a9-48f3-b6ce-27ce81c01a0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b183b41e-a2de-4cfd-b574-8778dafc1e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efb63521-e8cd-4831-b732-826c9903d75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05b09c1-ba4b-4364-ae80-71efaeea9061",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9205c99c-1508-467b-95e5-165c2994ecf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c279fb2b-9e3f-4824-bd87-3daf6a9c58d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e4c4d25-b728-4f95-a616-c8588d6a3757",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5605aa9-93eb-463e-87ee-508abe3b86a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbb09702-0f05-43e3-bdf7-850dcf7d7b6a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f79b96a1-224f-4642-825e-13a0871328aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36e8034-f5a4-46b9-bb5c-66d19d2cb96f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be6d9943-1602-42f3-a18e-a13010ff68a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad3b3e78-0d66-42c0-8e66-8ae33d41741d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c70da7a7-4191-4c41-8eef-4099e4338597",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616d79ba-d1da-4fe9-85c4-e98596973b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e5c4d88-1c70-4175-a349-239677d61ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb286324-dff9-4af7-a969-5dfecb05f009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a36dca-a50e-409b-b2db-6f79530bd9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb097dc-39ea-4309-9d16-dd6988c5c342",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "821ba19b-7c88-432c-ab47-b45a29c647ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70fa8aee-fae3-4aef-8eeb-f16d1bd207f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3666f452-4fea-47fc-8f23-6f7f931a4c07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1501ab1-fc7b-4542-8d4b-e0264e15c181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad61be60-7d84-46fc-a053-5ff7402beba9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ff9912b-333e-48a9-8ff8-9cec24d6c260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b46f89ed-e53c-46e1-81ac-fadb3bfae947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f829167-61e1-4199-83ba-2bb47dbddec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61bfea4-8d07-4513-86e0-23609123ecbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53ba6d5-c3f0-4121-a06c-06a39cc9462e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d4c5b0-af16-4118-8e53-545deccb6e75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e009f5d5-fe32-4cc5-ae6b-3aa6507830cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a930bef9-53c1-47b0-a212-bcc08e01be3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54cae7a0-0b5a-4b55-b6fc-3606675ed871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9a6a960-35da-4cdd-b8dc-bbe96eb66d5f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "704fef5c-a883-472f-9704-aa565581a60c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a1b62ba-2baa-4065-9215-757f3651a880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da00e1d3-a5d7-4f78-9eb1-e3cbf0076ad2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a69b4f5-189e-43ee-bd14-0647a10b120d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17f02627-e5cb-4f42-ae75-d2df50999b15",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97363aeb-eba7-411d-ac40-c2a37243292a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c834ddc-69b9-406d-8c41-98301fd9be93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab3f575-69e1-4318-9c6f-2443cb479aa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "381c4763-a0ac-4477-a4be-fe5f87eb4e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5012b476-2a2a-4881-b30c-ef706958acc4",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8be7165-7d89-4de9-ba71-ddff70de7a22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6aa4c59-92a0-4c78-85ad-4749202d3b3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74622536-05d0-407f-8653-ce2bd7e823e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "212c8d1c-4239-444e-be7a-8b14c1959bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b873587e-1847-481e-837d-3b5555f74a6a",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d5d3f4-3d45-4c00-a18b-1a32d7e4363d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45fc68e1-cef0-4fa8-8526-79c918273088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca1e7bb-0144-4ad0-9987-43a71831d364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d887396-cfa9-41d8-8135-c9bb8359b907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "347d6d9d-e265-494e-b6c7-e07c48d3c229",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2dcef22-6bca-4ca4-b1da-f41f30095f70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15d6d98b-9d28-4260-8300-2a9378519317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb5581bc-955f-40a4-89fa-d2ea7b3bf376",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26955e93-82a9-47a9-89b9-b4a1807636f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4126429e-0680-4dba-bc7f-9e957efa9d2c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f389fa1d-6cbc-4011-9a39-0963c3f0183a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f50cbbb-5684-46b0-a381-0a92de5e6f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15c3ed5-5886-4ce3-ad0c-fa3c73ac5f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "728b2af9-d055-4c05-8022-4a56b4f8938a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57a6504-2bdd-4634-8fae-1e9cdee8fe79",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3856a416-bb1a-4a6c-a98c-5e1b2a026ba2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e0865a7-3208-4129-9156-201cfbebce04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e175e636-4468-4672-9724-4f24d05fa83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0cf10c-1569-4487-8718-c84e629568e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abc94a5d-15ea-46b4-81d5-69c685c8eb52",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89d83c0f-5450-4d54-86d5-54dd12af735e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fa98f7a-df15-4ce6-8d98-60c8fbb048bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "322619cc-33dc-41c8-b270-706a622642b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f9ee11a-438f-4c31-850e-bd24e70b890e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6f60017-c3f9-41bb-b88e-a2c702eef562",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2605f04-5377-48fc-87b1-e244d7e0b6ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce7a9827-4bfc-45a7-8ef3-3a849fad57ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d7962d-51e4-4f60-a52a-df70a8e18743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cc73e04-2115-41e0-8822-cf3510a380d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddd54c78-3df6-4c15-8b62-2e6289bf28c6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c04cb14d-6921-4760-b4f4-53622bb040ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ed381ec-f4f8-48f5-aaf7-2d32efe21057"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "525af1f2-406d-477f-9584-86b54feb0e01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6ccd67-150e-4928-93b1-45d52d22ece4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402f6791-5680-451f-b6c5-66db34ca979d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa789a59-e939-4053-8f87-239bb8f395e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61d80a30-b707-4725-8d3c-5217abc5ae0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d8e5a9-ce17-451c-912c-b229e729de4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cfdce7a-783d-4339-a86e-f68a12e85b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfc66b07-fa71-434c-9237-f93a20df27f5",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d8f2ce-a9ce-47fa-b1da-d07716d8d23d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c276b498-4f90-4099-b1ad-3df61be102b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebbefa0a-b86a-46d5-8be7-d791b742bef0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba52fdec-25a6-4d95-a568-6cd46aeb6801"
                        }
                      }
                    ]
                  },
                  {
                    "id": "115d7f37-7f73-4be8-8225-e9c026b05077",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f8c81bc-e2bc-4b95-b369-44ccba44d2bd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3714281d-55ee-43c3-b583-3fab8f7f2b03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cb58e2-f970-4327-aaf7-668a3375f566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fca2fef0-e040-4ced-a9cf-72db00986f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c9a1132-207a-4ff8-afd1-a59dcd6a5c0c",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eec0514-2179-499a-8756-2e172f34a649",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0973d043-7ed5-4d09-bda0-1ffcc5b306a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71801c5c-d953-4704-a146-253d3c9ff5dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ffb150-1396-4136-a477-3ba587d8937e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c550aaf-6198-4a02-a4b6-7e7913eee320",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e65d904-7053-4e5e-9faa-7d9d3f793ed0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d712e09-cb09-4fd3-8512-721be6f40393"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21e23ef-ab3a-4d71-a4f8-061f4b48aa02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bf7aed-a449-40fd-8c13-ec81f358a599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa73e734-4d2c-4bdb-8ae6-fce34d369439",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581c85e9-3695-4e06-bd8d-56066a6c5ad9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e3a9593-a531-4a40-86d5-9255e52cbb76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e35b48-cd8e-48ee-80b6-6bc4ed09dc1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "848932dd-a828-4125-8039-064dbb483fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493a25fd-316d-419a-b97f-b75c37f75f21",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39a319ca-bad0-45be-b2d3-233991aa4bc4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44603190-a1ac-4a23-9d87-f058638717de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa133f2-ebcb-48cb-8c58-f02a35a13b71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e315758-1c9a-42a0-9bdb-3394168aa9d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddb63c4c-f8a9-4c78-887a-e04a633f4be1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bbbb56-d9ab-4748-81db-047f65e84841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "322e4f76-d1a1-4547-a324-14aa53a8b7ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83845a1f-d231-40bf-b9a0-1109c83f201b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c73d59e-47d8-46d2-90fe-f7ff8d3b3876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6440c785-0ed2-4fa6-a6fa-038d0ece54e8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40744e1c-d44c-4bf0-8832-53f4fa95d1cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fec5e1b0-6656-4c04-8d18-6bf1b14e8f01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81fbb6e-4155-4db6-82d2-17aa55acba96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09ca07e3-ddae-4c17-8892-18ca8c682ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "938613ef-aecd-473e-b69c-0e42c109d248",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014d25e2-5863-45c5-9acc-f9dc6bff7d46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4b79066-5d54-44d5-9368-f9a27d68f72f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1acf1d-8ebf-4070-b186-c7aeb8007178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323131a3-63e3-4a17-81e2-826f4187223f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1bb5652-db6f-4e14-a8fc-3eda2e43278e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8662abbc-f9b3-439f-8126-fea158ffccf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c369c04-6d3a-42a9-86d5-2808aaf400c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbaa9c9-4351-4560-9911-1a7aff22005a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a3c178-dbf9-4b71-9deb-eb3e79b2b5b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d4abff-3f55-4ed5-9162-9ae76ecbd82f",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d38ea5c-53fd-458d-a10b-046d34343065",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e982f9b4-1df3-4fee-8f79-e18abcff519d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bfefe22-5edb-46d8-badf-cbf10bb152b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0124a97-7596-4c5d-9f2e-09c25981c112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc92731-0578-421d-9fed-d458a7ee14e1",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a9d300-65ac-42f5-b306-08f81b05cb75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bab0407c-a834-4635-8963-85ffaa35225c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cf0008d-4f16-4274-8b9d-56ec7db3be5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95ddcef8-ad5c-43fb-9ae0-c7fd553cd4f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf092d3c-283d-4607-a5b3-ef6bb2a23665",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b98b7c9-f84d-4b1f-af0b-6c9a89714757",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fffa8f6-45dc-464d-b672-f5c57ad47187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66daadd-2845-47c8-87cd-5ed1abec5968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f10133bf-5b1f-4579-afa2-0ef6f52bf233"
                        }
                      }
                    ]
                  },
                  {
                    "id": "490729d8-2960-40e7-9b62-3eab1fec7698",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8df7f82-e14c-42bc-a1b1-e6192fb0847b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e61c93a7-033c-48e5-8d0b-b4ca3b5fdf80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14316680-2399-42f5-8441-3c3423e58c6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a81c235-5c1d-4f80-8771-7789d6ecb723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8eee432-f6ca-4c4d-bab1-c2d5a0033760",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed790f6-9de8-4245-a03d-eda56807c4e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6904a779-59bf-4759-80bf-4c3edfbe4bc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dba651a2-f877-4222-8767-07119d085a99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d44025f-caf8-460c-aa5c-b09ff1344d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "137d7c4c-3c31-4e18-8536-3237dbf5b282",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d04e72a-a053-4b1a-a81d-9b2577e398d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00c4cc6b-6822-4afd-8a14-5225510997f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e789a5a-8697-4fba-ac37-0d8557ff5302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75aebea0-641b-4b99-ae39-41b95857c55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acbef954-df51-4f91-a08f-8ffb4c2915df",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7039f78e-c007-4106-9ed6-55afba425036",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2509dc1-521d-4488-a1e1-0775169ddd01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e79b5e-cee1-4040-b3ca-8fbccb8f0c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e74388-4478-4e9d-aafb-b4adeb3acd85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc56ae7-dcb2-4783-893c-1001ed07765e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f51b373-c568-4952-9593-3cb1720ddc3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd1c981b-f377-4844-8b32-a74db57f51f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e938468-c3ad-4128-a8f0-e65c9ba0565c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e268e2b-2330-4263-b63d-ddc60842e2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03b64d5-9ef2-4e28-9ebe-f5d4b2d261ae",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4352857e-2cf2-458e-a3f1-de7fb47ad36d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b6a5cdc-e012-4351-92da-dbab833a4601"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53d08f4-3a33-4c78-95b9-992727c2cd9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349851da-a71f-44bd-81b7-121f3f304e0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e13e83-1b94-48b6-ae86-2997542d57f5",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9a76a8-4f3b-487c-b7c3-72e60f6a5c91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02e16fca-eff5-41fd-87af-a4678376d9f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddaae778-ddc7-47c8-a883-539b91adf3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35b194e9-5d57-4a4f-99a8-4d811b4ff6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9c40082-39c4-4ebf-9c9c-275e46571415",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0c09dd-1468-4734-8413-c7331e04f301",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f86c2ab6-a0d1-412c-822d-a96fb76f080a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5833b056-1639-4bed-9e65-fd7deed7d787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a715fe00-bbf1-4d45-ab20-f0c36561a4be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "563bb6c4-7e0e-49e8-be80-016d1212552d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dcf04e6-852b-42bd-83f0-112fc29abada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14960473-193c-4040-b546-9b99ce1e1e77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53788bd-9869-4bfb-b742-c55077b85683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ecb40ed9-cfbc-4881-8a7e-eb930f37b8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d496c702-01eb-43b1-b51b-944dd0a45975",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7696c4db-7dd9-468a-93ea-c11f0885f340",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "344144c5-6c85-45b3-b773-a20255a726bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "def29d97-300e-4cd2-a332-9da2ae29a8e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "840e18f7-fd16-4085-b2b2-38c2c29f896e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179fe6a7-5992-4fc7-b52a-bdc7b0bb671b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2de0a7-5899-4a5c-8d9a-58584c1f0538",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec4c4e71-8b5f-4a62-b579-bf3b8bf0c472"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7361db27-f5a1-4120-aab2-ca6925b16cfd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "211dfb0e-f777-4a4e-bcf9-6656c8abc552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38dbba82-fd1d-4c4c-bc8e-41b20f126dfb",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b516cf-0148-4c8a-a928-5c83d899bb32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c1f9fd6-d02e-4801-a73e-5dd42363b398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30bf6b7-f5c7-4aa2-b42e-264dd8a624cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470e584a-f9e1-473d-8603-fbc267fa60c1"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0410882-f6ea-4ed4-9611-51b5980d780e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "416edf43-f38c-4f26-92f7-025b8479a906"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95390ad8-ccfa-4c1f-ad71-7b922060e51e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68e65094-715d-4ca6-ad3f-f8b11801d3f4"
                    }
                  }
                ]
              },
              {
                "id": "d329232d-ce51-4eb5-93f6-09a8e155ac36",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7db3cdf4-08d4-4136-96b6-b3c1217e2786",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0da0a775-b624-4fed-b04d-3614189c21ac",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f48275cf-89a6-4ba3-9d5e-e84e680d3d07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0bda78c-df7a-423b-a876-f5c7ad7a97ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "72d86195-1924-46bf-a88a-e898324ddcc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b85fbb-0734-48bd-a77b-6bc853703d96",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf7e7fe-949c-410d-93d7-ab3a6f9954ee",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "9644a1ee-a2e5-434d-a2dc-838d8a092ff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a1a994b-ce2f-4bc3-88ad-7d310cad1de3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2164d350-6a15-4870-b652-3597e36b2f52"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd03894a-2247-4317-86d3-4ef1987d8892",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1623b9ac-925e-472e-aea5-ec03b515519f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38042484-c387-45d7-9481-29f47867aa18",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c3ef6115-24fe-4261-9ffc-bdf586ef624f"
                    }
                  }
                ]
              },
              {
                "id": "d178cf31-ce50-4c34-9b85-10b26120d96f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "6a6cbd19-0475-40c2-9396-8ecf9e30fcac",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d61d058-42d0-4260-9e64-6e644b9ec502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "146e0352-e8e7-4f2d-8d7b-34dbc85e947d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d97ea434-482d-48ed-a689-0d483eda530b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c44946-7fb2-41b0-8b4b-2f48465861fb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3cdfedac-f685-43a4-bfed-6408230827e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e4aee545-6642-4ed8-91a2-335e5209333d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d753511-998d-4e38-b3a4-870e9aef40d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dd69a764-55dd-415a-a918-077f2006aaf7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1bad3d93-cc87-45f7-82c8-c13c5a74a1d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4f15f9d-09c0-4800-8b4e-7cd656546d77"
                    }
                  }
                ]
              },
              {
                "id": "740b19da-eb56-47d6-813a-37e7115dc816",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66db198c-9b8d-4137-b8de-32471980abcf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8958f442-783c-4fc3-9dd5-e16da8101a60"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6874e413-7f8c-4a71-9379-d7205d475602",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f54b80d5-e485-443f-bbab-ee7098a3a17c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4277734f-9733-4b73-ada9-d5bd6ba276e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "06f86097-00a1-4e3b-8ed3-9a5fcf99eba1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3bfbfcbe-3315-4d33-bf44-274b5c437077",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ba924160-2146-441c-8f1b-591948339802"
            }
          }
        ]
      },
      {
        "id": "93032533-53b4-4ba1-9cce-97e985d7b439",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c9b95147-1e9b-49cc-8e90-e11b66481b22",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4fc0c38b-c1a6-475d-97cf-4875f257f4b1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "61cb2c5d-feec-4d0c-945a-96c02b52e2bc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94a8beb6-0d84-48c8-8643-02efc5bddd96",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "92dd64d2-3184-4b73-8734-88ac3b9ce467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78fc014e-5d90-45ff-9ba1-a1104f74a0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08886f56-cfc9-498f-a8d5-5dee929ae2cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f2b929-ad14-4a5b-be40-566e3da548c3",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3130c111-6dc8-467e-984e-b32a283d4f32",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "78a11681-91ed-42f2-9a0b-ae9d5ad9164d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bd95458-6670-491d-9bc8-bd1ead2c3c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a7e4c61-ae23-47fd-8ec0-2943581cbfcd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b259c2d9-6f5d-4e20-a179-5d44af99f0c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffaea90a-461f-4592-90c6-412fdd03b9ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c40e7996-c4d6-4f74-8e3a-ea681a8f9c96",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "10c0041d-1963-4cbe-8fd7-ec12781fd931"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "450b77d3-8358-4c6f-99e1-b47a8fa8e3b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f19866c7-c051-46c0-a19f-7e820a7b74e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "15641869-dc5a-4fc3-b427-1c0772fd1752",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8d7dd135-e42a-4b50-8868-416c89d6a746"
            }
          }
        ]
      },
      {
        "id": "c5f55c4a-a1f4-47a9-a9fc-fb797ede4f09",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "1dc73fd9-df8a-4253-93f2-3a27f4ff5770",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a27e2a37-abbe-439b-8268-191edb47a56e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4e9b52ca-e160-458a-b137-d66e612d67fd",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a03075b8-1140-4f69-8592-b1c86e3b8676",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c6302114-24fa-4add-8b6a-bd1575561e8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01090b12-377f-4f45-b9f1-11510755e9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6a9b88a3-28e2-4b3a-88ee-935087e6146b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b070ff51-7b3d-4efa-8b1d-04dac3818650",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd01113-46ab-4e7b-8f5a-e73895df2499",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "405b6b30-c9cf-46c9-8f57-3c4de43128ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "903a5a1c-8339-424f-b9b0-61f1e3d07f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "52526d80-e64b-4c63-a756-731e9f00c300"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca686fa1-f1e8-45ae-b1e8-2502b13f736b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3a7020c6-d303-4ec0-99d8-1af15b5f8518"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c49e677-120d-4d3a-8970-fee550f50898",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "229a173c-4cb3-4eb7-9ea6-0c4d444e46d1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4918ed90-76be-441e-ab61-96077f62bf56",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "72219240-a999-4a00-8bc0-38db19df5aae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2580feb4-61c5-4648-9aa8-fa04c8755e74",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f29d0f6f-6d05-45e2-aa7d-e3ac4c749024"
            }
          }
        ]
      },
      {
        "id": "e46861ab-f90f-46a5-90d6-e191fc8124f3",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5d308c5a-dedc-430e-b250-b821075d1bed",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c6ade39b-d467-4dc8-9da3-e19e00c0d841",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d212c2a8-a37e-490a-b38e-cc6942828bb3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc12121b-a2cc-421f-9d7a-5bf3184c37f6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ad0246fe-07b4-4099-8f70-60a15dfa6728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e647313c-eaef-406c-b3b2-c114fab5b71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "39a0fc2b-9c62-4966-b772-4f5fcc7d9c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03001615-333a-4b81-9bd1-047e7070de89",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bbe18bc-c582-4d70-9207-349c82299c8d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b6ca5f4a-3bb1-44c1-a6f7-b23f8acee403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaa98c9-d99e-474c-b009-ce38a833d6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e257c83f-566b-4127-b46b-175989ffc7c5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc3c2a51-7c7e-43a4-9dd9-e265da96c2c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "690c0150-9157-4de0-8617-fd3b3b4600ed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53589a02-8f26-4493-9ea5-29868432f4a9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86750b0f-0981-4884-bd03-8420fb19356b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad4ff6a4-f9a9-4851-9653-3ba1a75e9dea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bd54930b-8da9-4ce0-bf5c-b21f0a7a9d01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b5c4c81f-ed69-41ee-8bf3-5eed993993c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b6b2601-cc16-4b80-bc6a-938fa7262c98"
            }
          }
        ]
      },
      {
        "id": "f902c7ca-8b96-4790-a732-fd0d58ee2325",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6d4098d5-9f2f-4ed3-b11e-d1050a98bde8",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cf3bc650-c7bb-4810-a6f5-46e5ee1f015c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "68e20917-3ed3-49fc-a220-d324481a035c",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f95a9d7-7695-48da-84ea-891b37d0e98c",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c07dde9-559a-400b-af95-2fa549007dfd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 473
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 169.2586357166487,
      "responseMin": 10,
      "responseMax": 7873,
      "responseSd": 907.89909283763,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675903175973,
      "completed": 1675903253772
    },
    "executions": [
      {
        "id": "1902394b-0368-47bb-813e-ef04b5935066",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "45a65829-fd02-4c50-baf4-8cb345cb2554",
          "httpRequestId": "fe9bf0c9-a86b-47ba-b0bc-594e75f377db"
        },
        "item": {
          "id": "1902394b-0368-47bb-813e-ef04b5935066",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "13a622cb-51b0-4a11-8522-215899208e46",
          "status": "OK",
          "code": 200,
          "responseTime": 59,
          "responseSize": 0
        }
      },
      {
        "id": "9ef780c4-ccb0-4dbd-a2f2-0d930665184f",
        "cursor": {
          "ref": "55ccddfa-579d-4d3c-b7dc-f556a8cc2bb4",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1327fe64-d953-420c-b8c9-31a2633e3afc"
        },
        "item": {
          "id": "9ef780c4-ccb0-4dbd-a2f2-0d930665184f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4ee705b9-9e0a-47ca-a947-7054f3e5c8f9",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "b57b2c94-6d38-4974-8241-e86af2f58e0f",
        "cursor": {
          "ref": "a84eeb5d-8faa-40f2-9dbb-abab08f2906d",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8fb76467-029b-48a0-8461-006758225aa3"
        },
        "item": {
          "id": "b57b2c94-6d38-4974-8241-e86af2f58e0f",
          "name": "did_json"
        },
        "response": {
          "id": "25a96ffb-69d0-4969-95ae-a88f863d22a3",
          "status": "OK",
          "code": 200,
          "responseTime": 425,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514ba0c4-a098-4bbc-b156-28880038ac49",
        "cursor": {
          "ref": "f3b8709b-c84b-4fc7-b936-f74a900d8c34",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dcf3b9fe-f22f-4316-9155-bf801624b781"
        },
        "item": {
          "id": "514ba0c4-a098-4bbc-b156-28880038ac49",
          "name": "did:invalid"
        },
        "response": {
          "id": "4ec8ebe8-416d-4e7f-a04d-f3d57dc77030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514ba0c4-a098-4bbc-b156-28880038ac49",
        "cursor": {
          "ref": "f3b8709b-c84b-4fc7-b936-f74a900d8c34",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "dcf3b9fe-f22f-4316-9155-bf801624b781"
        },
        "item": {
          "id": "514ba0c4-a098-4bbc-b156-28880038ac49",
          "name": "did:invalid"
        },
        "response": {
          "id": "4ec8ebe8-416d-4e7f-a04d-f3d57dc77030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f3dc62-a103-4a6e-ad55-a50476f624d7",
        "cursor": {
          "ref": "660fd403-c6c8-4675-b016-012f43cf8f34",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1429f0b5-44b0-42a1-8b4b-d1473cc62d02"
        },
        "item": {
          "id": "82f3dc62-a103-4a6e-ad55-a50476f624d7",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "464a4a0a-0e9e-4188-9ad0-57c55d3c4be9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 141,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1403ddce-1083-4303-a993-a0e860792f63",
        "cursor": {
          "ref": "33c0036d-63fc-4037-a8b4-d51f8dc9e916",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3f1ce9ae-72d0-46b6-b24f-abcfa70c2e1a"
        },
        "item": {
          "id": "1403ddce-1083-4303-a993-a0e860792f63",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "01a1ea84-7225-4643-b574-70afcfa517c9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 45,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c132581b-6a60-46ff-9ce7-9fb98719707f",
        "cursor": {
          "ref": "1471ea25-510d-4abd-9b10-6716f61d5e09",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "07a364c6-58a7-422a-aa0a-4362519af328"
        },
        "item": {
          "id": "c132581b-6a60-46ff-9ce7-9fb98719707f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "eb03bcb1-ffaf-4390-a223-bbeb1c77b971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4198f281-63c4-479b-91fc-eccb9cdc8be4",
        "cursor": {
          "ref": "253d14f1-e5be-44c1-ad25-185cabe9067e",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c9e4a7ec-e185-4c3d-8e48-9192e9c8e775"
        },
        "item": {
          "id": "4198f281-63c4-479b-91fc-eccb9cdc8be4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b31a42ec-04b8-46a7-a523-8d98878ef407",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "4198f281-63c4-479b-91fc-eccb9cdc8be4",
        "cursor": {
          "ref": "253d14f1-e5be-44c1-ad25-185cabe9067e",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c9e4a7ec-e185-4c3d-8e48-9192e9c8e775"
        },
        "item": {
          "id": "4198f281-63c4-479b-91fc-eccb9cdc8be4",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "b31a42ec-04b8-46a7-a523-8d98878ef407",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "db321fec-3cf0-4323-83cc-2b879b75fee8",
        "cursor": {
          "ref": "8f656fb4-7223-48b6-9c08-bae7fe4d6fd9",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4a3abaca-3b88-41d6-a379-eb2dbb7f3823"
        },
        "item": {
          "id": "db321fec-3cf0-4323-83cc-2b879b75fee8",
          "name": "identifiers"
        },
        "response": {
          "id": "5cd9c9bf-b695-4ad7-a0f6-7bf9de9b1f2a",
          "status": "OK",
          "code": 200,
          "responseTime": 56,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ea18eb-4a6d-4803-a53c-c1f7ac3c732a",
        "cursor": {
          "ref": "620b7c13-dd89-4dd1-97c0-eb8ad7cab968",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "792a5e67-018b-4e8b-8052-9171e0c65cf8"
        },
        "item": {
          "id": "98ea18eb-4a6d-4803-a53c-c1f7ac3c732a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "87fe2d1c-2e5b-40da-963e-fd2e87597851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "98ea18eb-4a6d-4803-a53c-c1f7ac3c732a",
        "cursor": {
          "ref": "620b7c13-dd89-4dd1-97c0-eb8ad7cab968",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "792a5e67-018b-4e8b-8052-9171e0c65cf8"
        },
        "item": {
          "id": "98ea18eb-4a6d-4803-a53c-c1f7ac3c732a",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "87fe2d1c-2e5b-40da-963e-fd2e87597851",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "3839a7d5-9ec0-46f9-aa9f-e8832896dc6d",
        "cursor": {
          "ref": "a1952536-cc6a-4cc4-b12e-3f01b19e4294",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b748736d-f9f5-4ccf-8c95-351b0f756673"
        },
        "item": {
          "id": "3839a7d5-9ec0-46f9-aa9f-e8832896dc6d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "73ca2ed3-2bd4-4087-8493-b7847df85b70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "2fb54990-9e6c-464a-aab5-06c4e1467f08",
        "cursor": {
          "ref": "97edc9a4-9c83-4343-b813-11b1bf597260",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "fd2939a7-19c8-4e93-936a-01af5a0d888f"
        },
        "item": {
          "id": "2fb54990-9e6c-464a-aab5-06c4e1467f08",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "f96e5b96-b4c7-4dec-9a46-ae267fa439c9",
          "status": "Created",
          "code": 201,
          "responseTime": 129,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "1506de89-c456-4893-aa59-1f53b7731a5b",
        "cursor": {
          "ref": "0d7dfec9-94a0-4f19-a5d2-02fe6198758a",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2d6f4a6f-4889-4227-bb30-9c9be4ee7db4"
        },
        "item": {
          "id": "1506de89-c456-4893-aa59-1f53b7731a5b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "13e19c3a-5aad-41bb-b3f0-e969d5c05dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "bfbd21bf-992d-40b1-a2ad-d4dbdc0ec1eb",
        "cursor": {
          "ref": "c9697a15-935c-486b-a03e-2da780f27752",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bbd0ca59-3a8c-479f-a0aa-dcf4aa717eb8"
        },
        "item": {
          "id": "bfbd21bf-992d-40b1-a2ad-d4dbdc0ec1eb",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c9774f0f-1cd8-4de2-a8bc-e41dce886bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "18be7d17-ecd6-4248-a50c-ed06386f3eb2",
        "cursor": {
          "ref": "5595bc42-a51e-42e5-aa65-c2dd161a2a83",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f39fd2b2-60a6-4817-a221-f16658b76603"
        },
        "item": {
          "id": "18be7d17-ecd6-4248-a50c-ed06386f3eb2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "05f8f61b-6491-4f3d-9409-9d0edda35d22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "a95ff95a-9e44-4b29-ad42-f3ddf006c17c",
        "cursor": {
          "ref": "e0880662-1d54-461c-a2e7-3623d5ae9f11",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "e26c1927-8e2f-49f8-a958-40212b89bdfc"
        },
        "item": {
          "id": "a95ff95a-9e44-4b29-ad42-f3ddf006c17c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "79546083-b439-4b23-b92c-cc4b7766e453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "6b0425e5-b48e-4352-aa96-9cc19532fd76",
        "cursor": {
          "ref": "6828fd80-c90b-4930-9974-265216ad40dc",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bd3b4da9-d7fb-42d4-884d-d8615c9c0027"
        },
        "item": {
          "id": "6b0425e5-b48e-4352-aa96-9cc19532fd76",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "65a25cb8-5106-4271-9fb8-b050bf9e3b7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "926f8d11-50a3-4195-b9d7-7d1306f237a2",
        "cursor": {
          "ref": "9b785f87-28b9-4e63-ac48-b240a2d00790",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "e3983508-0c35-4dec-b481-7e6c1d1b223b"
        },
        "item": {
          "id": "926f8d11-50a3-4195-b9d7-7d1306f237a2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4540cbbf-4f81-4122-abb0-dd596476da21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "e520bb52-8f16-492d-8cff-9e7139ba7f78",
        "cursor": {
          "ref": "80a31d88-8c72-4570-8868-1a84a6d1ab75",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4fe8d6de-11a8-40f4-a312-99360bcbf445"
        },
        "item": {
          "id": "e520bb52-8f16-492d-8cff-9e7139ba7f78",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "2bed8b54-6d30-4dc9-a30f-59ad5957bb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "2aa2107e-d102-4f64-9fc1-785fe848674a",
        "cursor": {
          "ref": "7c9e751b-c696-4427-bb06-4449f93a0f29",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "73bbb81b-6efe-4589-aaa0-0f71257c1907"
        },
        "item": {
          "id": "2aa2107e-d102-4f64-9fc1-785fe848674a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1729f500-50fb-43f5-8e5c-346c1f6f4de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a7b18a4f-4315-43a2-bcdb-e4355ab8a989",
        "cursor": {
          "ref": "aefb06e1-10ca-4723-b39c-d15ad7674700",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c8f0fce2-7156-4201-90fc-2d26241e68de"
        },
        "item": {
          "id": "a7b18a4f-4315-43a2-bcdb-e4355ab8a989",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "072a8cfe-d517-489b-920d-ae337aa047f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "81a409a0-7cfd-4ea6-bdcc-e7ca25cda03e",
        "cursor": {
          "ref": "4ae94b82-e45a-4974-b357-07ea4f69acd2",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b589ceba-70ee-4443-9222-e888e3aba33c"
        },
        "item": {
          "id": "81a409a0-7cfd-4ea6-bdcc-e7ca25cda03e",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d797d831-187a-4172-a9d5-920538556cd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "ddba490a-8e3b-498e-a132-03a8ce058062",
        "cursor": {
          "ref": "881ecfc3-6406-46ac-82e9-8f90f9c65722",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "9507c471-491a-4290-acd5-fb70dcbffbb1"
        },
        "item": {
          "id": "ddba490a-8e3b-498e-a132-03a8ce058062",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "fe2f8d5a-9f9a-4c7f-8c88-0d8f46eee092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "82de6920-1bd9-4380-808d-8b8279345b0d",
        "cursor": {
          "ref": "8a88b74d-950d-4f2c-a0b5-05cbe0428a2e",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "05bfdd9b-08fe-475f-a5dd-391a4666e51a"
        },
        "item": {
          "id": "82de6920-1bd9-4380-808d-8b8279345b0d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "13bed2fa-25f8-4a84-9d82-fd405873923e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "b5a32f18-8276-4409-b98c-fc8cedf0221e",
        "cursor": {
          "ref": "1ac7afd2-5e40-4ff7-90f4-f4cba047ce58",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "855939dd-7f93-44e4-abc4-9b0fe79a8b2d"
        },
        "item": {
          "id": "b5a32f18-8276-4409-b98c-fc8cedf0221e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "be9328ab-7201-4eed-b9a4-7ae4799f9c29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "32db6c31-6bcb-4f03-b488-b462b6a0f914",
        "cursor": {
          "ref": "fe86f151-38ad-40b5-b904-6a74c59d7eda",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "99d4ca65-85c8-4cf3-8d89-08c4048d7a82"
        },
        "item": {
          "id": "32db6c31-6bcb-4f03-b488-b462b6a0f914",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "700eca79-c2f0-403b-8a71-5d60849feb07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f2387e4f-672a-42c4-9aaf-8250f6b90785",
        "cursor": {
          "ref": "1b3fa1d3-bc0e-407b-b862-4692cb229809",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5a1d7d82-b495-4b36-91ab-9e9265abe8fc"
        },
        "item": {
          "id": "f2387e4f-672a-42c4-9aaf-8250f6b90785",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9cb0207d-232f-4d2c-ad3e-7135087b6085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "ee08c898-1d8c-4d62-a78e-4af986834c21",
        "cursor": {
          "ref": "ecd5ada1-b9c9-4288-a643-08be69d25c09",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "97fb0506-f54d-4f17-bb89-808bc1825bb0"
        },
        "item": {
          "id": "ee08c898-1d8c-4d62-a78e-4af986834c21",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "d889c97b-b32b-4bab-bbd1-e9504b4531bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "a0677e14-4ddf-4542-a00c-99c6a900dd1f",
        "cursor": {
          "ref": "1082bd81-3f70-44a0-895f-b7c99060646a",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "9c1a3d89-38ae-4404-9a3d-12928f642cd4"
        },
        "item": {
          "id": "a0677e14-4ddf-4542-a00c-99c6a900dd1f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c6165bb1-6106-4655-b678-d0823ee6ae8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "fbad9dee-cff2-4033-8ec0-ce5293752dde",
        "cursor": {
          "ref": "f5a39a5a-eea4-4f76-be50-2d66297db3af",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "9042ad91-316a-473c-8bd0-c0467cedda8d"
        },
        "item": {
          "id": "fbad9dee-cff2-4033-8ec0-ce5293752dde",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "066a0681-a933-4f61-bf54-c14f87a6f9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "26b0fad3-c938-4dea-8399-2ec3ff223317",
        "cursor": {
          "ref": "2643c345-bec3-444c-8c42-28826bd5760a",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "0daa9709-a83f-4805-a46f-c6e9554972cb"
        },
        "item": {
          "id": "26b0fad3-c938-4dea-8399-2ec3ff223317",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "9654289b-25bc-45db-a52d-2cbdccf102dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "1fdd8fff-eaca-49c0-916e-5f81c2dafddc",
        "cursor": {
          "ref": "e9311e56-1924-4d70-ad93-d96d3e17ab18",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "344295e2-8551-405f-bf7e-d1e822f0e425"
        },
        "item": {
          "id": "1fdd8fff-eaca-49c0-916e-5f81c2dafddc",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e2a924b3-d1ec-4cf8-b60d-1a2ee6ae729a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7fd0cd27-a152-46be-8a3e-617270c65b1a",
        "cursor": {
          "ref": "52ad8a9f-a18d-407a-9287-278349c33819",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "5ce3f65f-a650-4e15-8eeb-0f23ec7f2dda"
        },
        "item": {
          "id": "7fd0cd27-a152-46be-8a3e-617270c65b1a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "feaa72fe-50a9-4cad-b17b-56f65f759343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "afb36d65-78aa-4c5f-8176-57cfc76690aa",
        "cursor": {
          "ref": "5990322e-f622-4171-ab8a-2ab06f46364e",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b25fb13d-7297-4712-ae47-57f25766dff8"
        },
        "item": {
          "id": "afb36d65-78aa-4c5f-8176-57cfc76690aa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "5fec4e59-2b12-44da-9bdb-987e32b3e6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "d9c13621-b6a2-4957-9617-a7fd7a67a245",
        "cursor": {
          "ref": "b5c71969-fa1f-4b1f-b68a-f58ed838edf0",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "006d2b7d-0232-409d-88fc-799189754984"
        },
        "item": {
          "id": "d9c13621-b6a2-4957-9617-a7fd7a67a245",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a5168669-f3cd-44e8-9432-af7e2c508cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "8516139d-fb0a-49d7-ae9d-c3ea10762bff",
        "cursor": {
          "ref": "bc9dda7b-6356-4e66-b193-962da98093e2",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "703d0133-0560-4e86-9e0d-8307cf71d367"
        },
        "item": {
          "id": "8516139d-fb0a-49d7-ae9d-c3ea10762bff",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "ac1e5104-1a7e-4cfe-99c4-3e506c6999f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7873,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "09159a3b-78c7-40ea-b78a-2f2e9de27203",
        "cursor": {
          "ref": "eb1241bf-81cb-46b2-8bdf-7d721a85bdf5",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "125fa6dd-9b2e-4f19-b7eb-f14d902d9620"
        },
        "item": {
          "id": "09159a3b-78c7-40ea-b78a-2f2e9de27203",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8bbeb0ff-25ed-476b-8006-5d1178beef8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5394,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "49bfa8b1-a0d1-4d2e-8a1b-40984b0b0a2b",
        "cursor": {
          "ref": "55f50218-b4a3-4185-b66e-458c388ffb66",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a3b5c6ab-9fc8-4c38-93db-aeb49eda1b57"
        },
        "item": {
          "id": "49bfa8b1-a0d1-4d2e-8a1b-40984b0b0a2b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e82ddac7-9e1d-4a7f-a7ef-8d045fb7b766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5714,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "e36e87a1-9300-4bd5-aac9-ced3cbdc1c97",
        "cursor": {
          "ref": "a2dcc034-778f-4a82-b4b8-23a1ba5956c6",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "038cd45f-8f53-431b-9208-809e855aed55"
        },
        "item": {
          "id": "e36e87a1-9300-4bd5-aac9-ced3cbdc1c97",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "27d0e361-cfe1-4529-9e0f-58c27ecd5041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5778,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "7f11184d-28dd-4fbb-a035-0395d268abc3",
        "cursor": {
          "ref": "d5559d95-2d68-4e76-9c34-57df1e44b6e3",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2d5e08cb-1f7a-4e90-a5b6-d751517043d2"
        },
        "item": {
          "id": "7f11184d-28dd-4fbb-a035-0395d268abc3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "58770f3f-db04-4f6f-8d0f-dd5d2d9f846d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6148,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8e2926b0-88f7-4817-8e71-1d922939ac8d",
        "cursor": {
          "ref": "36f422d6-c6cd-4277-b4ee-b872736557d8",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3d62d64f-b1f6-47d4-9711-5d7e90294ef2"
        },
        "item": {
          "id": "8e2926b0-88f7-4817-8e71-1d922939ac8d",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d4a2eb19-50bb-40fd-93a4-c694ff389255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 534,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "30099005-7974-4b24-9535-0386fb116d56",
        "cursor": {
          "ref": "7e345c51-3dee-4349-9d86-b8145dda22ce",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "dec177dd-0968-4e50-99d7-32dd87f501f5"
        },
        "item": {
          "id": "30099005-7974-4b24-9535-0386fb116d56",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "35e41956-318b-423f-aeb5-29b950911b92",
          "status": "Created",
          "code": 201,
          "responseTime": 5080,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "6b54ab75-b12d-4542-b558-8dc4d0b03160",
        "cursor": {
          "ref": "92a7f532-8c5b-4024-b617-3a121865f7df",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "332b7eb1-617b-47be-a44c-c60b24d53cc5"
        },
        "item": {
          "id": "6b54ab75-b12d-4542-b558-8dc4d0b03160",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "cb91fd0a-b002-48a1-9644-ebc8445b9dd1",
          "status": "Created",
          "code": 201,
          "responseTime": 6458,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5663ed4b-b92d-4201-b889-d93c49af795a",
        "cursor": {
          "ref": "347f116e-2cbf-4750-902c-99933f68d793",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "5dccbd7c-1817-4eb8-a149-f3f7eff5b1cf"
        },
        "item": {
          "id": "5663ed4b-b92d-4201-b889-d93c49af795a",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e944670c-ac52-4476-a58a-aae81302554b",
          "status": "Created",
          "code": 201,
          "responseTime": 4746,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a48d68c1-3341-4e51-9128-1d2301143641",
        "cursor": {
          "ref": "31cd6a32-e4bb-4ac9-9d35-a341076aceee",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "98612890-3b3c-4f4f-9c28-1ebdbf507f78"
        },
        "item": {
          "id": "a48d68c1-3341-4e51-9128-1d2301143641",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "55505fe7-6265-4bb5-b02e-041857bc59cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "91bcfd51-73cf-4338-8073-f06200830991",
        "cursor": {
          "ref": "697dd215-fa2e-4b95-a765-19d402f8683c",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cea6dae9-dd87-4c00-a71f-f5f4d2d31909"
        },
        "item": {
          "id": "91bcfd51-73cf-4338-8073-f06200830991",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "46c06a87-7c3d-430c-b620-611b4a5d1efe",
          "status": "Created",
          "code": 201,
          "responseTime": 6295,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "218d8c25-bc2c-48c1-899c-e3b2f67618e9",
        "cursor": {
          "ref": "9e478fa8-df3a-4fb3-b737-ed88d38b1477",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "21de18fb-8452-4eb0-b9df-4652fd5b0e52"
        },
        "item": {
          "id": "218d8c25-bc2c-48c1-899c-e3b2f67618e9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e5fcb973-c310-4448-8ca4-4b320ff6ae26",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 3854,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 502",
              "stack": "AssertionError: expected response to have status code 422 but got 502\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "3c9c91bb-b53d-4aa2-b34b-a417a216234e",
        "cursor": {
          "ref": "762bcffc-335e-498e-9e8a-905e407a7c26",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "fdde7c1d-813f-459d-811b-9f62886b55c3"
        },
        "item": {
          "id": "3c9c91bb-b53d-4aa2-b34b-a417a216234e",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d5a1c3d4-c118-46df-bda6-22934ae5589d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "bcfc2680-a7f3-443d-baf3-d8a8efbc1c0f",
        "cursor": {
          "ref": "2f45b3dd-ade0-4599-a215-ad5ef8db3120",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "52d38dbc-7eb1-474f-8868-7519ff1c9aa8"
        },
        "item": {
          "id": "bcfc2680-a7f3-443d-baf3-d8a8efbc1c0f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "7c368ba7-80bd-445b-b5cd-80d3a8881b6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "305efc4e-e8df-4219-811f-fcd8fc21be31",
        "cursor": {
          "ref": "e94619c2-a320-4692-be53-9bdc006b877b",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9443b32e-b382-4f2c-9279-697a16d89f52"
        },
        "item": {
          "id": "305efc4e-e8df-4219-811f-fcd8fc21be31",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "991e9013-6639-4e3b-a2e2-c798571791a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "623a0615-97d7-4ca5-b4a6-e77847be85b9",
        "cursor": {
          "ref": "5f2c5963-37ee-4161-82fa-061c64be670e",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "157c46eb-11f8-4ab9-9504-dcf141bbf5d8"
        },
        "item": {
          "id": "623a0615-97d7-4ca5-b4a6-e77847be85b9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "2e92dde9-6bf9-427e-89cb-3f51c0a5be6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "e5b8d767-6f19-49ad-9c34-ee30bb3c2fe1",
        "cursor": {
          "ref": "0d221bf9-6ae4-478b-9c23-64e90b388b82",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e807b56f-501b-4d41-86a9-b9137480f15e"
        },
        "item": {
          "id": "e5b8d767-6f19-49ad-9c34-ee30bb3c2fe1",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1af1f901-4602-4f5d-bb3d-ff6c1209d286",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "4690f256-905b-42d2-9311-b50074a7320a",
        "cursor": {
          "ref": "e56bc536-a2de-453c-be61-33c6b5fd48f1",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c1c6c645-667b-445e-a73b-3089158825d5"
        },
        "item": {
          "id": "4690f256-905b-42d2-9311-b50074a7320a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "8adf3ba4-6431-4648-afc1-913add2c51db",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "d09bac8a-d56f-4c59-bdd7-78800f79ac57",
        "cursor": {
          "ref": "2d3165be-687a-4787-8a8d-36924dc2236a",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "dde9fc47-5433-49ca-a597-db0fe63bb0fc"
        },
        "item": {
          "id": "d09bac8a-d56f-4c59-bdd7-78800f79ac57",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f881b59d-e1ae-42bc-a2c0-7f05bbc08398",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 503",
              "stack": "AssertionError: expected response to have status code 422 but got 503\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "af8a6e8b-78d0-4c65-8371-6b1ef7452399",
        "cursor": {
          "ref": "43221196-81ed-456b-8d9c-cb5a651aabbc",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "111b8b74-f44b-4d4a-88b8-da50b02f8a35"
        },
        "item": {
          "id": "af8a6e8b-78d0-4c65-8371-6b1ef7452399",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "ed2b7469-b996-46c9-adfa-9442e3844273",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "5b66f858-c2ac-48d4-8037-9c0f1eb8f159",
        "cursor": {
          "ref": "20836d21-636a-43af-a478-6004fbdb4291",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d04673f4-0411-4eae-a958-7db67c0b87b0"
        },
        "item": {
          "id": "5b66f858-c2ac-48d4-8037-9c0f1eb8f159",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "fb7ba098-f533-4105-9f80-7c3dc546114d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "2372f169-26e2-4b2e-a265-8b875bbbb5c0",
        "cursor": {
          "ref": "5be0f157-c656-4ff6-9355-d291a269a8f9",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7d7df0e7-7edb-49bc-8e6e-3cc586952df9"
        },
        "item": {
          "id": "2372f169-26e2-4b2e-a265-8b875bbbb5c0",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1707b91c-88bd-409f-a9af-caf4412219f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "40713a55-3dc6-4a65-b723-64f3f70ce118",
        "cursor": {
          "ref": "a8eac5b3-5034-453b-912d-980c4017fa98",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "06ef562c-acc8-4e96-8bd7-18a23ac7e7a0"
        },
        "item": {
          "id": "40713a55-3dc6-4a65-b723-64f3f70ce118",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "7b55a11e-2bbb-416f-8103-81df769d104f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "8c37b98b-f977-41f5-b29d-6e30a1724092",
        "cursor": {
          "ref": "4305969b-168d-4c57-85ed-014a4f393963",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "979ac1e9-c7bd-485b-937f-d550ed7f7fe3"
        },
        "item": {
          "id": "8c37b98b-f977-41f5-b29d-6e30a1724092",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5e7abcb5-da88-4577-9966-5a2e99e01d3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "a00f964b-da90-4ff9-90a3-25289f68381b",
        "cursor": {
          "ref": "c29316ac-5478-4b82-abe7-c5c878efc220",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "5fe18ea3-8875-4f6b-8206-564b3624f723"
        },
        "item": {
          "id": "a00f964b-da90-4ff9-90a3-25289f68381b",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "415849fb-8ac0-4104-9ed8-1eabe46d4f4c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "f3a036b4-a6fa-48f3-a96c-c738198db9eb",
        "cursor": {
          "ref": "ae5416b4-ecac-471a-b24e-e12ea285c05f",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "002ee2ce-47c6-443d-ac9c-8312ee124e01"
        },
        "item": {
          "id": "f3a036b4-a6fa-48f3-a96c-c738198db9eb",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "dbe3a5e6-cfae-4147-92f5-dc567ecf8367",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "cb8fd8ce-c3aa-4c8a-a651-03d723a03289",
        "cursor": {
          "ref": "4f53514b-cab8-4a63-bf9b-1c961e885f7c",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "97918bba-7973-4934-92ea-8df58a50b912"
        },
        "item": {
          "id": "cb8fd8ce-c3aa-4c8a-a651-03d723a03289",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b051703e-4593-4c8c-b8a5-213bd9e3ae44",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "ebcd36ec-4550-42c3-90aa-78d135fc551f",
        "cursor": {
          "ref": "0a9c789f-2852-4a40-a575-49ea996271c9",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "cf6556a3-d860-477c-b68d-876453cd3f2d"
        },
        "item": {
          "id": "ebcd36ec-4550-42c3-90aa-78d135fc551f",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "712d295f-da60-4973-949a-42257e3f3cea",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 24,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "c708c273-bba7-40c3-9e2a-432773234aae",
        "cursor": {
          "ref": "86e8b62c-3611-4cdb-998c-6447e6eb8945",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "eb26ac32-1fd0-4f86-8bce-bf7befa2c597"
        },
        "item": {
          "id": "c708c273-bba7-40c3-9e2a-432773234aae",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a826b08d-4003-42ff-8628-4699e56c2778",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "4dd6a3f7-6b74-44e7-aad9-6e20cb09cdb6",
        "cursor": {
          "ref": "04bbc5ba-22c5-4a6f-9db7-163c935c686c",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "560390b8-c411-44eb-bc0c-15d8ef048191"
        },
        "item": {
          "id": "4dd6a3f7-6b74-44e7-aad9-6e20cb09cdb6",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1d4cae4d-55aa-42d2-a248-6adf25a46442",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "492c5d9a-24dc-4b35-afb0-eb27c1359d27",
        "cursor": {
          "ref": "7766e947-5ca8-47ec-9ff3-19c45fba9ebe",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "3d26b231-c850-4585-99c5-2d4f8f763ef4"
        },
        "item": {
          "id": "492c5d9a-24dc-4b35-afb0-eb27c1359d27",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "566c935b-a45b-4d45-b778-994fd0fbd972",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "5062109a-83fa-478d-a400-763f4b912556",
        "cursor": {
          "ref": "f2154f87-b2ea-4629-8fbe-00475e07f918",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "331a2a14-2d19-4230-9ca6-c0193965a540"
        },
        "item": {
          "id": "5062109a-83fa-478d-a400-763f4b912556",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "667f94db-73aa-419a-bb20-5318b9d667e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5a490ac9-b3d4-4453-9dcd-d4f0ba39e615",
        "cursor": {
          "ref": "d3dbba8c-e7e4-4b7a-b272-f566e486b378",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "d7c07a29-364d-4579-a674-aa19a75dcba4"
        },
        "item": {
          "id": "5a490ac9-b3d4-4453-9dcd-d4f0ba39e615",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5bd3d64d-c826-4b4f-9c3f-2fe6fb0fbeb7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5cd17885-9bed-44bf-b4b3-d73e1509b761",
        "cursor": {
          "ref": "52f6cec6-b058-4f61-abcd-6bf742cbb69e",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "3b1a4ef1-3a89-4be2-a3c9-ba0a9ceb10e2"
        },
        "item": {
          "id": "5cd17885-9bed-44bf-b4b3-d73e1509b761",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "f813fb7b-1cfe-432c-abca-2b7113488ed8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 24,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "c42c701a-885c-4e9a-99b2-a8bfbb2cb84d",
        "cursor": {
          "ref": "52d4e152-7048-4984-b339-a341d4215b0b",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "06e6fad4-94e6-4a95-9267-d4c28b7d327a"
        },
        "item": {
          "id": "c42c701a-885c-4e9a-99b2-a8bfbb2cb84d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a1199566-3562-4d56-9743-263b6b9a7d09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "b93e37ee-29fb-4f9c-978c-0f3b9d7dddc4",
        "cursor": {
          "ref": "be29df86-9287-409c-ae84-8f77cddbc49d",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2ab215ab-75bc-4c34-b124-7e3e33998ad7"
        },
        "item": {
          "id": "b93e37ee-29fb-4f9c-978c-0f3b9d7dddc4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fc4c3130-97b3-4655-a749-18a201f0b112",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "969d8583-30bb-429b-9852-7a3cb8c73fc9",
        "cursor": {
          "ref": "c38a14a9-8d4c-4ad6-9d9c-152a538b8b3c",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2d5f8147-e68e-4cbe-8185-9fec0a5a14bb"
        },
        "item": {
          "id": "969d8583-30bb-429b-9852-7a3cb8c73fc9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e202f0b1-60a9-46d5-b6f6-bee111c2ef93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "19734bf2-bb83-4267-952d-35e59a2a6e28",
        "cursor": {
          "ref": "443eafee-a57f-41da-b88a-a2cbbeaaccf0",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "6964f04f-85c8-4f4d-ab21-b4d1a864cc58"
        },
        "item": {
          "id": "19734bf2-bb83-4267-952d-35e59a2a6e28",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e1b13bf1-9582-4d48-b9b2-c101c7ad2bab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "4d8cd32e-bc00-4180-a42d-9783df5b910b",
        "cursor": {
          "ref": "418b0df3-5131-4bc7-a34a-31a9ee9d470b",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b6d87727-b975-4c9b-b485-2fbf17eab332"
        },
        "item": {
          "id": "4d8cd32e-bc00-4180-a42d-9783df5b910b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b651805f-acbb-4520-9ef1-d7d2b5a11b67",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "9da43bff-c30d-4825-951c-93431d0d5a95",
        "cursor": {
          "ref": "157f4102-644d-4af2-8d4a-e78860533266",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d4398783-589f-48a5-81ac-1106b34d1443"
        },
        "item": {
          "id": "9da43bff-c30d-4825-951c-93431d0d5a95",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a5dac150-f7db-4066-a0eb-be4fa5f82819",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "339c5a23-25e3-4f23-bf0e-ea065a9157dc",
        "cursor": {
          "ref": "79a3d5e6-ffb8-415c-9283-f21a47eed74e",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c671244a-42a1-46e7-a361-e9e90f735630"
        },
        "item": {
          "id": "339c5a23-25e3-4f23-bf0e-ea065a9157dc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "44d93671-345d-4c8b-a7a7-e3e13fc04b4f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "45db6d62-ffef-4a7f-94ce-3a1cf9d6c551",
        "cursor": {
          "ref": "ee219095-61b5-4fa8-b4a8-c8c07d4bbaa6",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "264f91f4-397d-4b70-9a70-d983fce55f0b"
        },
        "item": {
          "id": "45db6d62-ffef-4a7f-94ce-3a1cf9d6c551",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5aec4602-b8c6-4569-ba39-962f4772b26f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "617fb29d-fc39-49f9-8b2d-3564adf0f408",
        "cursor": {
          "ref": "61695cbb-4738-415e-ae2a-7b33a6d73ba1",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "84a797b1-2518-45ac-905f-6bc0c9cf81e9"
        },
        "item": {
          "id": "617fb29d-fc39-49f9-8b2d-3564adf0f408",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7153a41a-89d2-4418-a7fb-23d0747f4257",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "f79b5d5a-bcfa-448c-a3a7-fa0c188114a2",
        "cursor": {
          "ref": "9ad76b89-9a0f-4d55-a102-fca828843117",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "d2679a62-8f25-4d8a-a8b1-5298ccedad07"
        },
        "item": {
          "id": "f79b5d5a-bcfa-448c-a3a7-fa0c188114a2",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "2c6f0ba6-5b42-4ef4-86d5-e133e56f25b2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "dfb44898-b62e-40a9-b913-b98e17a9b953",
        "cursor": {
          "ref": "7f9f8b66-cfea-47c9-9b9a-ec507a41f735",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "322963ee-b984-488c-9560-215f5f5977ba"
        },
        "item": {
          "id": "dfb44898-b62e-40a9-b913-b98e17a9b953",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "aec8842d-495e-4b48-909b-29313fe0ed31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "d351860a-c318-4784-bbba-d17136c8fc20",
        "cursor": {
          "ref": "8f5bfc56-ffff-4dd4-85fa-5145a740f5c4",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a16a7e2e-0fe5-4de0-9013-819d8f266232"
        },
        "item": {
          "id": "d351860a-c318-4784-bbba-d17136c8fc20",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4bd8a459-168c-4ac4-9c59-b41c0c4b226b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "8dc2d137-00a9-4a62-9529-332a67575aba",
        "cursor": {
          "ref": "042f88b0-db3d-44bc-9b12-9797d814f05e",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a3d07925-b22b-4cd9-8392-6457d945087f"
        },
        "item": {
          "id": "8dc2d137-00a9-4a62-9529-332a67575aba",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8304dc32-5e5c-4ad8-b54a-bf6cbdc1e003",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "ecd53d7a-4a89-490a-abae-277fdbe39d2d",
        "cursor": {
          "ref": "93d86669-ea87-4c4b-a18d-a84619aa5b12",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4a5816fd-d686-4a1d-9cd6-8ac8904580ca"
        },
        "item": {
          "id": "ecd53d7a-4a89-490a-abae-277fdbe39d2d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "9de6c723-1961-4ec1-8fbf-91d56e92da18",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "6bbe2e70-0784-47c1-bf28-559e0e24d661",
        "cursor": {
          "ref": "d24584ad-ae4d-438a-a410-1051c9b87f97",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "833b2d98-588d-403e-aa1b-8da794eeca80"
        },
        "item": {
          "id": "6bbe2e70-0784-47c1-bf28-559e0e24d661",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "47f14896-cd67-444d-b8f4-672c3def2fda",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "568569fa-f687-4d68-9fae-10dfd18ec1d8",
        "cursor": {
          "ref": "65ad4f09-b11d-43c8-8c5c-761397dcdffd",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "14b8b4e9-c135-420f-a166-9a61964e379f"
        },
        "item": {
          "id": "568569fa-f687-4d68-9fae-10dfd18ec1d8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2828d671-2b6f-4e01-89c0-325d64d6fb9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "43b72730-df97-462f-b654-3bfe51392197",
        "cursor": {
          "ref": "33b4f095-6133-48e1-aa0d-0e80923f240c",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a7f2df01-dcdd-432f-b315-e025c51b208e"
        },
        "item": {
          "id": "43b72730-df97-462f-b654-3bfe51392197",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2ddfe361-f0ef-4297-8d2b-6def7c66096a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "a9bb5d92-87e5-4425-a40b-ea49d07160a7",
        "cursor": {
          "ref": "3a073a95-a93e-4c78-8ecc-a8d29774d87f",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "55e3880f-1d9f-4fd2-9ec9-38bc4a5727d8"
        },
        "item": {
          "id": "a9bb5d92-87e5-4425-a40b-ea49d07160a7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0e31f745-7fab-4972-8749-3523f6351137",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a93ee32e-dd65-4d9a-9a77-ed7566fedf91",
        "cursor": {
          "ref": "6a44cc4d-2554-49e9-9801-1ad1db7ce217",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "405ea949-2d6a-4fc5-9a3e-cbcd6238b746"
        },
        "item": {
          "id": "a93ee32e-dd65-4d9a-9a77-ed7566fedf91",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "4210dd9e-4561-438d-828f-3d7a71ec39a7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "4bfa4a57-ac58-459a-acdf-89e0601e8e7a",
        "cursor": {
          "ref": "1c0a9401-5b8c-4c34-a8ce-26ecb6ec5b0c",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2af89b2f-f4c9-497e-9aff-eb5bf91cf55d"
        },
        "item": {
          "id": "4bfa4a57-ac58-459a-acdf-89e0601e8e7a",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ca32276d-1bba-45ab-892c-06ececcec15b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "f86392a8-1bd2-4439-b506-6712bdf30024",
        "cursor": {
          "ref": "2c802f95-ddcc-4e7e-80ed-75b7f48eb843",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "7917685d-9f7f-4a02-b0b6-287114d6c566"
        },
        "item": {
          "id": "f86392a8-1bd2-4439-b506-6712bdf30024",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4d5e3f06-6a86-4d3f-a169-e040d9755c8c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "c5d695e7-330d-4efe-98e1-001460e7454b",
        "cursor": {
          "ref": "7cc5f0c8-4707-4f39-886e-d10b95c63525",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "943a2661-e5d3-4440-b94d-03d213eda6c3"
        },
        "item": {
          "id": "c5d695e7-330d-4efe-98e1-001460e7454b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6d93766c-e1e0-47cf-bce8-ead31f21122e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "ddd32f52-5b47-48b9-b0b3-f305191d1410",
        "cursor": {
          "ref": "c16e3033-821d-455a-971f-74270487c16f",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "29636249-087c-4687-b8ac-ac1b22fa3b09"
        },
        "item": {
          "id": "ddd32f52-5b47-48b9-b0b3-f305191d1410",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2c60267d-4717-431d-8aad-1c95a094c141",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "32dfc5f2-20b1-48e4-8037-9ea48ca6e2dc",
        "cursor": {
          "ref": "1cb2bd83-2107-448d-b65c-ee8c9b7fcbc3",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b9d3a8eb-7ce8-4161-a1c2-0dfdf011ed19"
        },
        "item": {
          "id": "32dfc5f2-20b1-48e4-8037-9ea48ca6e2dc",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d67d48cb-471b-4cc4-862b-cd198266bcbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "60b6954f-a8e7-4e61-84be-fb65f22b7b15",
        "cursor": {
          "ref": "fea9fa2b-984b-4f75-810b-9e4507035abd",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "12ceaf35-3ba7-46f7-83db-162cd6b0b6a0"
        },
        "item": {
          "id": "60b6954f-a8e7-4e61-84be-fb65f22b7b15",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cc4f5d9d-b4d4-4de1-9b62-e2ac9118e476",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "4d4badb9-51a8-4460-bd7e-5a82275ceb37",
        "cursor": {
          "ref": "f5180bb9-a9f2-45bb-8806-724a92c48915",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "9a2fb212-8fb5-48aa-8851-8f1338ff17c4"
        },
        "item": {
          "id": "4d4badb9-51a8-4460-bd7e-5a82275ceb37",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e83936d6-cf60-4bc6-b8f3-b55887efbdf6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "16904f51-c717-42aa-92c8-f55c969bddfc",
        "cursor": {
          "ref": "d141d21c-b06c-4227-9194-4630ee9f8637",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9054dbf0-c753-44fd-8824-44daef6c527e"
        },
        "item": {
          "id": "16904f51-c717-42aa-92c8-f55c969bddfc",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "49ff29e6-99c4-4ce8-82a6-e741cd1ef325",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "10abbf67-8013-4d76-bf67-fd99ab06c0de",
        "cursor": {
          "ref": "8f142ae7-b5b1-4d04-a6aa-66e504da190a",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e2b14a5a-0490-4135-8ce1-7dc303fd43b4"
        },
        "item": {
          "id": "10abbf67-8013-4d76-bf67-fd99ab06c0de",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "58b32220-fb77-4bf6-ab55-9c2875ae6674",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "3f003342-4b0f-4355-88cb-c39d5d722778",
        "cursor": {
          "ref": "414d06f8-5672-4559-9347-c6990d54975f",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "865c4ed5-bf64-477d-bbdd-dfe9503d08c9"
        },
        "item": {
          "id": "3f003342-4b0f-4355-88cb-c39d5d722778",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "2f25f625-df3e-470c-9412-48edd9801f04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "06d355a1-f1c8-4818-b0a3-de0c563ff858",
        "cursor": {
          "ref": "9850936f-730b-4613-9e84-a2945bfe1cf2",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4862d859-b0d4-43ee-a538-48b28c19dd0b"
        },
        "item": {
          "id": "06d355a1-f1c8-4818-b0a3-de0c563ff858",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "43cf70c7-7ec7-4136-a508-3f09ac3679f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "fe1c89a1-8cb9-4131-9ba1-25a12d026589",
        "cursor": {
          "ref": "d001e0af-3969-481a-b6d5-ffdace0826d0",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a3af9b81-41f7-44ec-81cd-fd8457fbaa56"
        },
        "item": {
          "id": "fe1c89a1-8cb9-4131-9ba1-25a12d026589",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5aa1ea33-8a3c-4d19-960f-0f1399d670ff",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "9192733b-9bcf-481c-98e8-57b0ea1b7e1d",
        "cursor": {
          "ref": "a5552d3a-291f-48a9-832f-18f946ac7d23",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "91eca5ab-0607-463c-9135-995ae25d0cf6"
        },
        "item": {
          "id": "9192733b-9bcf-481c-98e8-57b0ea1b7e1d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e0a0c25a-de79-430d-b0d0-8cc8077132bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "1f8a7f62-f47c-4bd8-857a-d103437249c8",
        "cursor": {
          "ref": "1232204a-1196-4db8-ab67-301494767d82",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dbeaeb26-97cb-4ed1-af58-60882c06b813"
        },
        "item": {
          "id": "1f8a7f62-f47c-4bd8-857a-d103437249c8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "be4bf1e4-7edf-4816-90ca-73e1e9a9fb20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "667e6420-a795-41c3-bb60-fee8dce6d8c5",
        "cursor": {
          "ref": "fba8a8f2-c58c-4c28-aa80-9ef1ce1d15d6",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0337044a-a46f-4608-8f18-94531fce9f54"
        },
        "item": {
          "id": "667e6420-a795-41c3-bb60-fee8dce6d8c5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7ccec06f-0ee5-477b-95ec-3daa85e144a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "e252f208-888a-4286-8cb2-8ffeebb6aa43",
        "cursor": {
          "ref": "45a76a5e-8290-48f5-a5ec-fbf709a0a3a4",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "782ae7ec-96bd-4737-be18-04bc184f60be"
        },
        "item": {
          "id": "e252f208-888a-4286-8cb2-8ffeebb6aa43",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "edb0cbda-989b-456d-9130-fc72da9f6989",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "ecc71808-71ac-477c-8205-ccb0ca6e92c3",
        "cursor": {
          "ref": "dbd458a1-5303-4331-bbdf-2c8cf00cbc79",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "585c9604-16ec-4203-8448-69b0e56ba27d"
        },
        "item": {
          "id": "ecc71808-71ac-477c-8205-ccb0ca6e92c3",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "e3a71ff2-f654-479c-8a97-1a616726d9d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "c80f928d-55cb-4441-ad25-4051947e0f7f",
        "cursor": {
          "ref": "0efe042e-e52a-413d-8096-e0d0dfdc7e76",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "576af459-8cff-4353-95d9-61a560c0877c"
        },
        "item": {
          "id": "c80f928d-55cb-4441-ad25-4051947e0f7f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e6bc0695-b8b9-48b3-82b7-41e7e188062a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "2cfb1d2c-74c6-486b-9f6e-86c1b0d7d473",
        "cursor": {
          "ref": "c11dce95-6e82-400a-8c44-9b0c608a1c24",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "753acfba-508b-4bea-ac28-227cfc5cbadd"
        },
        "item": {
          "id": "2cfb1d2c-74c6-486b-9f6e-86c1b0d7d473",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d40ee1e6-ea4b-4236-9d45-f632d3d40f9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "c4f81180-d73d-413f-b993-35dffc9a95dc",
        "cursor": {
          "ref": "ac76e93c-3ca2-48fe-a128-f94b9f226329",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9c274187-2fa5-4f9d-92ed-9e6915c86891"
        },
        "item": {
          "id": "c4f81180-d73d-413f-b993-35dffc9a95dc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "7677fbba-bfd6-4337-ab1f-a1640bd59901",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "ac919f8e-c5f3-48f1-9780-6384c1b3cd4b",
        "cursor": {
          "ref": "373fef53-1cb7-4d48-a34f-17df96cdadc0",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7c5b07bf-fe96-47fb-a29e-569ec9332392"
        },
        "item": {
          "id": "ac919f8e-c5f3-48f1-9780-6384c1b3cd4b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ef66a3c3-a1ae-4a1d-af59-1b1bc98f6672",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "6e15cf9a-4188-4424-8f28-fa515559f62f",
        "cursor": {
          "ref": "099813cc-6518-472e-b6b0-c6adcb11be06",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "ef028260-c07a-4208-b8e2-fade6ce30f4b"
        },
        "item": {
          "id": "6e15cf9a-4188-4424-8f28-fa515559f62f",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ea930d35-9c90-45d6-abb2-c91634787c22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "c0a7519e-7d8d-4ae7-9246-7ac2b7f8150f",
        "cursor": {
          "ref": "ca1a84c0-cc46-4b1e-bdc2-0fe6bd6259f7",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1316f93d-4d03-4701-a4dd-c1dca20a2d4a"
        },
        "item": {
          "id": "c0a7519e-7d8d-4ae7-9246-7ac2b7f8150f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b373376d-0d1c-4164-bc3e-210b9792a6b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c0a7519e-7d8d-4ae7-9246-7ac2b7f8150f",
        "cursor": {
          "ref": "ca1a84c0-cc46-4b1e-bdc2-0fe6bd6259f7",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1316f93d-4d03-4701-a4dd-c1dca20a2d4a"
        },
        "item": {
          "id": "c0a7519e-7d8d-4ae7-9246-7ac2b7f8150f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b373376d-0d1c-4164-bc3e-210b9792a6b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "5ef38023-d715-456e-a3b4-34113c9a98f6",
        "cursor": {
          "ref": "bf36360e-947c-47db-9f9c-fae0f00bd1dd",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9060e01b-9612-49f5-ad87-41b11e56dac7"
        },
        "item": {
          "id": "5ef38023-d715-456e-a3b4-34113c9a98f6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "92399b33-d899-4461-a576-a2180fbb9191",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "5ef38023-d715-456e-a3b4-34113c9a98f6",
        "cursor": {
          "ref": "bf36360e-947c-47db-9f9c-fae0f00bd1dd",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "9060e01b-9612-49f5-ad87-41b11e56dac7"
        },
        "item": {
          "id": "5ef38023-d715-456e-a3b4-34113c9a98f6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "92399b33-d899-4461-a576-a2180fbb9191",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "e09b2975-0a53-409d-8551-cc6954e50973",
        "cursor": {
          "ref": "ae3b7e39-955e-41e3-a301-7358f115666b",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c08b5395-41e7-4cad-b44c-111fbb74820b"
        },
        "item": {
          "id": "e09b2975-0a53-409d-8551-cc6954e50973",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "737f465e-a09e-4b60-b4f8-994aabdb014b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "e09b2975-0a53-409d-8551-cc6954e50973",
        "cursor": {
          "ref": "ae3b7e39-955e-41e3-a301-7358f115666b",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c08b5395-41e7-4cad-b44c-111fbb74820b"
        },
        "item": {
          "id": "e09b2975-0a53-409d-8551-cc6954e50973",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "737f465e-a09e-4b60-b4f8-994aabdb014b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "f3cc1acf-952e-412e-95d2-3942a065b274",
        "cursor": {
          "ref": "fb018f5d-f16f-4319-bb95-5d508e7d00a9",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "78b3dd56-6ab2-4bc0-ba25-b3847e277e9e"
        },
        "item": {
          "id": "f3cc1acf-952e-412e-95d2-3942a065b274",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "42d310b8-6e6f-457e-875e-bc9c34706c09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f3cc1acf-952e-412e-95d2-3942a065b274",
        "cursor": {
          "ref": "fb018f5d-f16f-4319-bb95-5d508e7d00a9",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "78b3dd56-6ab2-4bc0-ba25-b3847e277e9e"
        },
        "item": {
          "id": "f3cc1acf-952e-412e-95d2-3942a065b274",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "42d310b8-6e6f-457e-875e-bc9c34706c09",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "cd82e841-0858-48dd-b760-c3b0d90de6f5",
        "cursor": {
          "ref": "47fb5441-a6c4-4c05-a49d-08f8214b273a",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f484b6f1-a78f-4e13-a3ba-b40ac4888333"
        },
        "item": {
          "id": "cd82e841-0858-48dd-b760-c3b0d90de6f5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6af9368b-7088-4106-ad1d-5fe0818351bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "cd82e841-0858-48dd-b760-c3b0d90de6f5",
        "cursor": {
          "ref": "47fb5441-a6c4-4c05-a49d-08f8214b273a",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f484b6f1-a78f-4e13-a3ba-b40ac4888333"
        },
        "item": {
          "id": "cd82e841-0858-48dd-b760-c3b0d90de6f5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "6af9368b-7088-4106-ad1d-5fe0818351bd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "9506fbcc-c610-443f-b3cb-aaea29bf9996",
        "cursor": {
          "ref": "1cea3b93-28cc-42ce-b652-a7f9a6eb3569",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "337791f7-8723-4c9c-8d93-0d2e00494b47"
        },
        "item": {
          "id": "9506fbcc-c610-443f-b3cb-aaea29bf9996",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5528a530-9a4b-4376-8e9a-98aa9325e615",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "9506fbcc-c610-443f-b3cb-aaea29bf9996",
        "cursor": {
          "ref": "1cea3b93-28cc-42ce-b652-a7f9a6eb3569",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "337791f7-8723-4c9c-8d93-0d2e00494b47"
        },
        "item": {
          "id": "9506fbcc-c610-443f-b3cb-aaea29bf9996",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5528a530-9a4b-4376-8e9a-98aa9325e615",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "bea5364b-9940-4c2a-be09-18548835c561",
        "cursor": {
          "ref": "1b4b02e6-b213-4f04-a7ea-20e0abe3b613",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3370bc6b-c454-493e-8fff-e0398bc3ebec"
        },
        "item": {
          "id": "bea5364b-9940-4c2a-be09-18548835c561",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "154eb83b-f584-4531-9897-151e59994c2a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "bea5364b-9940-4c2a-be09-18548835c561",
        "cursor": {
          "ref": "1b4b02e6-b213-4f04-a7ea-20e0abe3b613",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "3370bc6b-c454-493e-8fff-e0398bc3ebec"
        },
        "item": {
          "id": "bea5364b-9940-4c2a-be09-18548835c561",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "154eb83b-f584-4531-9897-151e59994c2a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "d12f4d20-2552-4374-936b-414951b445ca",
        "cursor": {
          "ref": "534988a0-fc2b-4a36-a8bf-229d41b97345",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9c902acc-5ea9-42a2-b84b-fb49cd6d1781"
        },
        "item": {
          "id": "d12f4d20-2552-4374-936b-414951b445ca",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "246f92f2-6613-4e0c-9895-ecf817f259af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "d12f4d20-2552-4374-936b-414951b445ca",
        "cursor": {
          "ref": "534988a0-fc2b-4a36-a8bf-229d41b97345",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "9c902acc-5ea9-42a2-b84b-fb49cd6d1781"
        },
        "item": {
          "id": "d12f4d20-2552-4374-936b-414951b445ca",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "246f92f2-6613-4e0c-9895-ecf817f259af",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "7b3e6375-58c3-4015-9550-9ae6dcff4373",
        "cursor": {
          "ref": "899c8ba6-12a8-4ee6-a7c3-8609ca762519",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "00568f30-d2c9-4541-a89b-ed13ceb53813"
        },
        "item": {
          "id": "7b3e6375-58c3-4015-9550-9ae6dcff4373",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fc208a5d-68fb-4c31-b8eb-61921c850e9d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7b3e6375-58c3-4015-9550-9ae6dcff4373",
        "cursor": {
          "ref": "899c8ba6-12a8-4ee6-a7c3-8609ca762519",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "00568f30-d2c9-4541-a89b-ed13ceb53813"
        },
        "item": {
          "id": "7b3e6375-58c3-4015-9550-9ae6dcff4373",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "fc208a5d-68fb-4c31-b8eb-61921c850e9d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "ddf703e1-ee18-47d7-82c8-c5f3aab1ef6b",
        "cursor": {
          "ref": "9b859330-4537-43f2-9434-a1543b55f48e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "07810e05-90ef-46a8-96ea-ee1496808094"
        },
        "item": {
          "id": "ddf703e1-ee18-47d7-82c8-c5f3aab1ef6b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a7b54c4d-db98-4b58-8634-25b6fc23180c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ddf703e1-ee18-47d7-82c8-c5f3aab1ef6b",
        "cursor": {
          "ref": "9b859330-4537-43f2-9434-a1543b55f48e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "07810e05-90ef-46a8-96ea-ee1496808094"
        },
        "item": {
          "id": "ddf703e1-ee18-47d7-82c8-c5f3aab1ef6b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a7b54c4d-db98-4b58-8634-25b6fc23180c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "c4b07638-a569-456d-bf3b-d2d145ca4073",
        "cursor": {
          "ref": "b241991e-ba54-49ab-a1d9-391fee5192c8",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e8a6ffe8-cb86-400f-af06-244c7ea85b07"
        },
        "item": {
          "id": "c4b07638-a569-456d-bf3b-d2d145ca4073",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b2e48c80-ec86-4b1e-9926-fa72f058e2d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c4b07638-a569-456d-bf3b-d2d145ca4073",
        "cursor": {
          "ref": "b241991e-ba54-49ab-a1d9-391fee5192c8",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "e8a6ffe8-cb86-400f-af06-244c7ea85b07"
        },
        "item": {
          "id": "c4b07638-a569-456d-bf3b-d2d145ca4073",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b2e48c80-ec86-4b1e-9926-fa72f058e2d9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "1768ebe8-f0e6-405b-929e-8e8d13e3125c",
        "cursor": {
          "ref": "c42e0cdf-91eb-45af-b3b6-43daf55be5a9",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "409803fd-3b1e-45a7-acbc-04ae68e58fb7"
        },
        "item": {
          "id": "1768ebe8-f0e6-405b-929e-8e8d13e3125c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c15a1bea-dfde-4043-afd1-9b46fe6cae3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "1768ebe8-f0e6-405b-929e-8e8d13e3125c",
        "cursor": {
          "ref": "c42e0cdf-91eb-45af-b3b6-43daf55be5a9",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "409803fd-3b1e-45a7-acbc-04ae68e58fb7"
        },
        "item": {
          "id": "1768ebe8-f0e6-405b-929e-8e8d13e3125c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c15a1bea-dfde-4043-afd1-9b46fe6cae3c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "f3044229-ca6f-43aa-b290-729c67885ddd",
        "cursor": {
          "ref": "8b76f89b-a2a7-4435-a557-5f92ed73da4f",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b266c6ff-f76b-44f0-9f5c-c1426b4d2878"
        },
        "item": {
          "id": "f3044229-ca6f-43aa-b290-729c67885ddd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "09bd15fe-15a6-4f6b-9899-e551eb682542",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "f3044229-ca6f-43aa-b290-729c67885ddd",
        "cursor": {
          "ref": "8b76f89b-a2a7-4435-a557-5f92ed73da4f",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b266c6ff-f76b-44f0-9f5c-c1426b4d2878"
        },
        "item": {
          "id": "f3044229-ca6f-43aa-b290-729c67885ddd",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "09bd15fe-15a6-4f6b-9899-e551eb682542",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7004f28e-2fe3-4a5b-a08f-2607935471b4",
        "cursor": {
          "ref": "8e58802c-aeb8-483e-a70e-1fdb816b5fa7",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7f9c3f78-c439-493a-b8ec-57b2f1e8bf09"
        },
        "item": {
          "id": "7004f28e-2fe3-4a5b-a08f-2607935471b4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cc000d5e-c019-461c-9d56-ee2702d87f5f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "7004f28e-2fe3-4a5b-a08f-2607935471b4",
        "cursor": {
          "ref": "8e58802c-aeb8-483e-a70e-1fdb816b5fa7",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7f9c3f78-c439-493a-b8ec-57b2f1e8bf09"
        },
        "item": {
          "id": "7004f28e-2fe3-4a5b-a08f-2607935471b4",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "cc000d5e-c019-461c-9d56-ee2702d87f5f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "e74046f1-5418-420b-ab85-8a8acb5682fb",
        "cursor": {
          "ref": "82cfe7b7-de60-42ff-80de-f7ef676d1bd2",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "07089e3b-a3c5-4d95-a59a-ce6bc7573062"
        },
        "item": {
          "id": "e74046f1-5418-420b-ab85-8a8acb5682fb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "76ce0961-716e-479e-b5de-74648bb84fa9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e74046f1-5418-420b-ab85-8a8acb5682fb",
        "cursor": {
          "ref": "82cfe7b7-de60-42ff-80de-f7ef676d1bd2",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "07089e3b-a3c5-4d95-a59a-ce6bc7573062"
        },
        "item": {
          "id": "e74046f1-5418-420b-ab85-8a8acb5682fb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "76ce0961-716e-479e-b5de-74648bb84fa9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "90e1953c-42d6-4f2a-bb4b-ed1bd1f80b15",
        "cursor": {
          "ref": "8169577a-5bae-43b3-9b2b-f9cc0e3034ce",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fcd2f5e9-8bfb-4cf3-a7b7-2534db852290"
        },
        "item": {
          "id": "90e1953c-42d6-4f2a-bb4b-ed1bd1f80b15",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a9c12a37-b03a-4dcb-8ce7-02a413566a60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "90e1953c-42d6-4f2a-bb4b-ed1bd1f80b15",
        "cursor": {
          "ref": "8169577a-5bae-43b3-9b2b-f9cc0e3034ce",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "fcd2f5e9-8bfb-4cf3-a7b7-2534db852290"
        },
        "item": {
          "id": "90e1953c-42d6-4f2a-bb4b-ed1bd1f80b15",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "a9c12a37-b03a-4dcb-8ce7-02a413566a60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "28b4676e-197f-4de4-a4ae-40c0141d53bf",
        "cursor": {
          "ref": "62ed2215-3edb-42ca-853f-ff3e292f809e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "63ebf354-7b18-474d-be85-d23ba223fbae"
        },
        "item": {
          "id": "28b4676e-197f-4de4-a4ae-40c0141d53bf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e78e76e6-da40-4f18-be9b-c607fff59d66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "28b4676e-197f-4de4-a4ae-40c0141d53bf",
        "cursor": {
          "ref": "62ed2215-3edb-42ca-853f-ff3e292f809e",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "63ebf354-7b18-474d-be85-d23ba223fbae"
        },
        "item": {
          "id": "28b4676e-197f-4de4-a4ae-40c0141d53bf",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e78e76e6-da40-4f18-be9b-c607fff59d66",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "91cde6d3-3703-4021-ba60-47a0ea2155c6",
        "cursor": {
          "ref": "53a0ba97-f194-4175-98a9-779cede6ada0",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7c28fcac-bd5a-40e3-95b4-c36ff65a88ca"
        },
        "item": {
          "id": "91cde6d3-3703-4021-ba60-47a0ea2155c6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "63b43b2c-c25f-453b-9e7f-acba02a01afa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "91cde6d3-3703-4021-ba60-47a0ea2155c6",
        "cursor": {
          "ref": "53a0ba97-f194-4175-98a9-779cede6ada0",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7c28fcac-bd5a-40e3-95b4-c36ff65a88ca"
        },
        "item": {
          "id": "91cde6d3-3703-4021-ba60-47a0ea2155c6",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "63b43b2c-c25f-453b-9e7f-acba02a01afa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "b9a96017-1821-4947-87fc-d71bce933618",
        "cursor": {
          "ref": "3e27ff23-94eb-487e-8fba-8f826001567f",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cdf13a9a-9ec8-4e55-ab53-ef9ecc6d5e6c"
        },
        "item": {
          "id": "b9a96017-1821-4947-87fc-d71bce933618",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "affddb2a-ac2c-4076-b215-b2e44e8757fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b9a96017-1821-4947-87fc-d71bce933618",
        "cursor": {
          "ref": "3e27ff23-94eb-487e-8fba-8f826001567f",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "cdf13a9a-9ec8-4e55-ab53-ef9ecc6d5e6c"
        },
        "item": {
          "id": "b9a96017-1821-4947-87fc-d71bce933618",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "affddb2a-ac2c-4076-b215-b2e44e8757fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "cb8bdd37-05a1-4d9b-968d-bee93eab1d59",
        "cursor": {
          "ref": "09c77cb8-a486-43a1-a913-410adf05a997",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8273a88e-2bb0-4666-ae80-61c0e31798ab"
        },
        "item": {
          "id": "cb8bdd37-05a1-4d9b-968d-bee93eab1d59",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "51f12ec6-5c1f-476c-a2ce-26b43c3829d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "cb8bdd37-05a1-4d9b-968d-bee93eab1d59",
        "cursor": {
          "ref": "09c77cb8-a486-43a1-a913-410adf05a997",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "8273a88e-2bb0-4666-ae80-61c0e31798ab"
        },
        "item": {
          "id": "cb8bdd37-05a1-4d9b-968d-bee93eab1d59",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "51f12ec6-5c1f-476c-a2ce-26b43c3829d5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "6f34eb0f-2075-482d-b3f6-7c9f8d836c8e",
        "cursor": {
          "ref": "1023ea8a-4f34-490b-bb2f-648965591339",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fac3d5c4-ed1d-4d87-8f3d-bcf5af02306f"
        },
        "item": {
          "id": "6f34eb0f-2075-482d-b3f6-7c9f8d836c8e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d186e5c9-54f7-42d2-9c77-ebfc06301dae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "6f34eb0f-2075-482d-b3f6-7c9f8d836c8e",
        "cursor": {
          "ref": "1023ea8a-4f34-490b-bb2f-648965591339",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "fac3d5c4-ed1d-4d87-8f3d-bcf5af02306f"
        },
        "item": {
          "id": "6f34eb0f-2075-482d-b3f6-7c9f8d836c8e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d186e5c9-54f7-42d2-9c77-ebfc06301dae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "5c47ba55-5352-4c79-afa7-74a6d7cacc52",
        "cursor": {
          "ref": "da55ff6e-8ae5-4064-8459-5ce2e90772dc",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3dd411d3-0d0b-4da9-920d-1d45bb21ad81"
        },
        "item": {
          "id": "5c47ba55-5352-4c79-afa7-74a6d7cacc52",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4d8f22c9-c756-4a26-9e39-d1b734390203",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 24,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "5c47ba55-5352-4c79-afa7-74a6d7cacc52",
        "cursor": {
          "ref": "da55ff6e-8ae5-4064-8459-5ce2e90772dc",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3dd411d3-0d0b-4da9-920d-1d45bb21ad81"
        },
        "item": {
          "id": "5c47ba55-5352-4c79-afa7-74a6d7cacc52",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4d8f22c9-c756-4a26-9e39-d1b734390203",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 24,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4146b41e-f492-4c3a-a6a7-97b3afb344da",
        "cursor": {
          "ref": "481617b1-40c1-4cff-b56a-b7977f940f79",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4c8f1c3e-6ae2-4bd0-b82d-86e202cae3f4"
        },
        "item": {
          "id": "4146b41e-f492-4c3a-a6a7-97b3afb344da",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6283b15c-140f-4718-a0a0-7a9b28b7654a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "4146b41e-f492-4c3a-a6a7-97b3afb344da",
        "cursor": {
          "ref": "481617b1-40c1-4cff-b56a-b7977f940f79",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4c8f1c3e-6ae2-4bd0-b82d-86e202cae3f4"
        },
        "item": {
          "id": "4146b41e-f492-4c3a-a6a7-97b3afb344da",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6283b15c-140f-4718-a0a0-7a9b28b7654a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "6ad41c61-2003-44b8-931e-3e6d5c9b13c0",
        "cursor": {
          "ref": "1ac6f4ad-ae2c-451f-a138-6409ae7c168a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "11898951-7ac6-42fe-a314-314e100a836d"
        },
        "item": {
          "id": "6ad41c61-2003-44b8-931e-3e6d5c9b13c0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a6258aad-881d-4998-998e-a2f3b8cc77a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "6ad41c61-2003-44b8-931e-3e6d5c9b13c0",
        "cursor": {
          "ref": "1ac6f4ad-ae2c-451f-a138-6409ae7c168a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "11898951-7ac6-42fe-a314-314e100a836d"
        },
        "item": {
          "id": "6ad41c61-2003-44b8-931e-3e6d5c9b13c0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "a6258aad-881d-4998-998e-a2f3b8cc77a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "4ab5874e-633c-41c6-b42c-1b6b0e069752",
        "cursor": {
          "ref": "8b666589-3918-45bc-a24d-1b4513cd6b3b",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cf0b7528-c442-4667-bebc-803b4fc35421"
        },
        "item": {
          "id": "4ab5874e-633c-41c6-b42c-1b6b0e069752",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5dc5908c-8b40-45ba-b015-8abdd3861901",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "4ab5874e-633c-41c6-b42c-1b6b0e069752",
        "cursor": {
          "ref": "8b666589-3918-45bc-a24d-1b4513cd6b3b",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "cf0b7528-c442-4667-bebc-803b4fc35421"
        },
        "item": {
          "id": "4ab5874e-633c-41c6-b42c-1b6b0e069752",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5dc5908c-8b40-45ba-b015-8abdd3861901",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "00a058f2-e138-49a8-98ef-3d3c4e187d3f",
        "cursor": {
          "ref": "a7ef96d1-d6e7-4a84-8391-d7453f3b8a19",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "727c824c-f241-4537-804e-9cbf0fa8013f"
        },
        "item": {
          "id": "00a058f2-e138-49a8-98ef-3d3c4e187d3f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "acb06916-a42a-4771-aef0-b825d6696966",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "00a058f2-e138-49a8-98ef-3d3c4e187d3f",
        "cursor": {
          "ref": "a7ef96d1-d6e7-4a84-8391-d7453f3b8a19",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "727c824c-f241-4537-804e-9cbf0fa8013f"
        },
        "item": {
          "id": "00a058f2-e138-49a8-98ef-3d3c4e187d3f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "acb06916-a42a-4771-aef0-b825d6696966",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "ee53f1b7-02bc-44c2-84c0-9e6449bc21f2",
        "cursor": {
          "ref": "5a23a451-bae6-4588-a71b-4b6aa4634e44",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "66227330-a6da-4f96-a4ac-cce4c02b6796"
        },
        "item": {
          "id": "ee53f1b7-02bc-44c2-84c0-9e6449bc21f2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1856ee76-dda5-4523-8f67-23eb93f5744e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "ee53f1b7-02bc-44c2-84c0-9e6449bc21f2",
        "cursor": {
          "ref": "5a23a451-bae6-4588-a71b-4b6aa4634e44",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "66227330-a6da-4f96-a4ac-cce4c02b6796"
        },
        "item": {
          "id": "ee53f1b7-02bc-44c2-84c0-9e6449bc21f2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1856ee76-dda5-4523-8f67-23eb93f5744e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1e1fbdd1-0d2d-447d-9e7a-e737da74db08",
        "cursor": {
          "ref": "ed4cc247-f13b-45a6-89ac-ead3c37e8c77",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7bbf3a7b-efc0-4f71-9331-6f4d82335c39"
        },
        "item": {
          "id": "1e1fbdd1-0d2d-447d-9e7a-e737da74db08",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a0a2adda-b291-4440-afff-a64cf48f496c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "1e1fbdd1-0d2d-447d-9e7a-e737da74db08",
        "cursor": {
          "ref": "ed4cc247-f13b-45a6-89ac-ead3c37e8c77",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "7bbf3a7b-efc0-4f71-9331-6f4d82335c39"
        },
        "item": {
          "id": "1e1fbdd1-0d2d-447d-9e7a-e737da74db08",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a0a2adda-b291-4440-afff-a64cf48f496c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "7f2cc977-b809-45a8-8a76-43760a951de1",
        "cursor": {
          "ref": "3f4c87c5-881c-4f8f-b3bc-c8f06e5d03fa",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "17f52c08-fd79-41af-af18-7d119f69be7e"
        },
        "item": {
          "id": "7f2cc977-b809-45a8-8a76-43760a951de1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cd044c6b-45a7-4889-acee-5fffa0ee4d98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "7f2cc977-b809-45a8-8a76-43760a951de1",
        "cursor": {
          "ref": "3f4c87c5-881c-4f8f-b3bc-c8f06e5d03fa",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "17f52c08-fd79-41af-af18-7d119f69be7e"
        },
        "item": {
          "id": "7f2cc977-b809-45a8-8a76-43760a951de1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cd044c6b-45a7-4889-acee-5fffa0ee4d98",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "7a9f228d-a61f-481b-bec5-e361ee18d3e9",
        "cursor": {
          "ref": "f0303153-1f8c-413a-acbc-bf895ab03746",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b9ef44d8-7518-4053-b596-f0db3b9ab0d4"
        },
        "item": {
          "id": "7a9f228d-a61f-481b-bec5-e361ee18d3e9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1fd3577d-66d8-4f37-9b4f-cc4b76a9d422",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7a9f228d-a61f-481b-bec5-e361ee18d3e9",
        "cursor": {
          "ref": "f0303153-1f8c-413a-acbc-bf895ab03746",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b9ef44d8-7518-4053-b596-f0db3b9ab0d4"
        },
        "item": {
          "id": "7a9f228d-a61f-481b-bec5-e361ee18d3e9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1fd3577d-66d8-4f37-9b4f-cc4b76a9d422",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3dd7555e-7e9c-41ec-a94c-fe4f31b23f05",
        "cursor": {
          "ref": "861181ed-0945-4879-b4eb-0245aa53edc9",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "97f673fc-7c32-47a3-9b91-8ab5ba199c2e"
        },
        "item": {
          "id": "3dd7555e-7e9c-41ec-a94c-fe4f31b23f05",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8e74d91a-72a8-4078-9676-689e372ddc14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "3dd7555e-7e9c-41ec-a94c-fe4f31b23f05",
        "cursor": {
          "ref": "861181ed-0945-4879-b4eb-0245aa53edc9",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "97f673fc-7c32-47a3-9b91-8ab5ba199c2e"
        },
        "item": {
          "id": "3dd7555e-7e9c-41ec-a94c-fe4f31b23f05",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8e74d91a-72a8-4078-9676-689e372ddc14",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "aaa5be3d-0740-41e2-b9b5-f23d408f754d",
        "cursor": {
          "ref": "d256932e-f09d-4f37-b003-b2b679b7fde4",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b456ae63-97cd-44a0-ae3f-f1e08b0e874d"
        },
        "item": {
          "id": "aaa5be3d-0740-41e2-b9b5-f23d408f754d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4377ea9b-0c26-4127-a566-ece055b8eedd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "aaa5be3d-0740-41e2-b9b5-f23d408f754d",
        "cursor": {
          "ref": "d256932e-f09d-4f37-b003-b2b679b7fde4",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b456ae63-97cd-44a0-ae3f-f1e08b0e874d"
        },
        "item": {
          "id": "aaa5be3d-0740-41e2-b9b5-f23d408f754d",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "4377ea9b-0c26-4127-a566-ece055b8eedd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b17f4267-c040-4fa5-8ba4-fc2e376ce70a",
        "cursor": {
          "ref": "4be5d9cd-300d-45e8-a099-c0d03dd4f250",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "faea35d9-1681-4026-83cb-6c7be4768f73"
        },
        "item": {
          "id": "b17f4267-c040-4fa5-8ba4-fc2e376ce70a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "181d0162-d06c-459e-9e01-28cd913384c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "b17f4267-c040-4fa5-8ba4-fc2e376ce70a",
        "cursor": {
          "ref": "4be5d9cd-300d-45e8-a099-c0d03dd4f250",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "faea35d9-1681-4026-83cb-6c7be4768f73"
        },
        "item": {
          "id": "b17f4267-c040-4fa5-8ba4-fc2e376ce70a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "181d0162-d06c-459e-9e01-28cd913384c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "820ef3f1-42c1-45a0-91e9-9d6708ddd9a0",
        "cursor": {
          "ref": "813afad1-bc25-43e7-a0a2-dd13101044c4",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "82a2d27b-43b7-42ff-a2f5-daba280236ce"
        },
        "item": {
          "id": "820ef3f1-42c1-45a0-91e9-9d6708ddd9a0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a1fd91e6-be6e-41de-b24b-a625eb7605bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "820ef3f1-42c1-45a0-91e9-9d6708ddd9a0",
        "cursor": {
          "ref": "813afad1-bc25-43e7-a0a2-dd13101044c4",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "82a2d27b-43b7-42ff-a2f5-daba280236ce"
        },
        "item": {
          "id": "820ef3f1-42c1-45a0-91e9-9d6708ddd9a0",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a1fd91e6-be6e-41de-b24b-a625eb7605bb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "0bf5e3ab-c210-49a3-a0f5-7180e185e27b",
        "cursor": {
          "ref": "dcb5e4e9-0147-476e-acbe-d32058ec716c",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f81370d3-f737-4abf-93b2-ca5af3d1d036"
        },
        "item": {
          "id": "0bf5e3ab-c210-49a3-a0f5-7180e185e27b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c3095ddc-e84f-4fce-b552-3e3baf20b489",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "0bf5e3ab-c210-49a3-a0f5-7180e185e27b",
        "cursor": {
          "ref": "dcb5e4e9-0147-476e-acbe-d32058ec716c",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f81370d3-f737-4abf-93b2-ca5af3d1d036"
        },
        "item": {
          "id": "0bf5e3ab-c210-49a3-a0f5-7180e185e27b",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "c3095ddc-e84f-4fce-b552-3e3baf20b489",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "e6094770-302b-4b80-b65a-3a39b1b87789",
        "cursor": {
          "ref": "1139a32f-58cd-44cf-86cd-1154bc3273a0",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6a130a66-f7ca-4a7d-9354-2fbc0c1d79fd"
        },
        "item": {
          "id": "e6094770-302b-4b80-b65a-3a39b1b87789",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d22b1b7f-8580-4a33-80ae-d3489002d3a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "e6094770-302b-4b80-b65a-3a39b1b87789",
        "cursor": {
          "ref": "1139a32f-58cd-44cf-86cd-1154bc3273a0",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6a130a66-f7ca-4a7d-9354-2fbc0c1d79fd"
        },
        "item": {
          "id": "e6094770-302b-4b80-b65a-3a39b1b87789",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d22b1b7f-8580-4a33-80ae-d3489002d3a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "0f02b43c-d3a7-49d1-bd93-a8de555d24fe",
        "cursor": {
          "ref": "781ed46c-f899-4e6b-a804-6b917a0d2bcf",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "92dee8de-a020-4e7a-88a2-d0544a2f4103"
        },
        "item": {
          "id": "0f02b43c-d3a7-49d1-bd93-a8de555d24fe",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "10ec6c3d-eb7d-461e-9ff2-83984dacfedc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "0f02b43c-d3a7-49d1-bd93-a8de555d24fe",
        "cursor": {
          "ref": "781ed46c-f899-4e6b-a804-6b917a0d2bcf",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "92dee8de-a020-4e7a-88a2-d0544a2f4103"
        },
        "item": {
          "id": "0f02b43c-d3a7-49d1-bd93-a8de555d24fe",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "10ec6c3d-eb7d-461e-9ff2-83984dacfedc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "62fbd99f-718a-4cf4-996e-43d1b17bd440",
        "cursor": {
          "ref": "dadf9619-aaca-4eb5-b371-2e12b4d7d94d",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "113fc799-86f3-41ab-94bf-fc75a42af275"
        },
        "item": {
          "id": "62fbd99f-718a-4cf4-996e-43d1b17bd440",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9dbc452f-c3ad-4265-9060-d6663678789b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "62fbd99f-718a-4cf4-996e-43d1b17bd440",
        "cursor": {
          "ref": "dadf9619-aaca-4eb5-b371-2e12b4d7d94d",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "113fc799-86f3-41ab-94bf-fc75a42af275"
        },
        "item": {
          "id": "62fbd99f-718a-4cf4-996e-43d1b17bd440",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "9dbc452f-c3ad-4265-9060-d6663678789b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "2d50cdcf-27c9-416b-bd4e-93fb67ec1387",
        "cursor": {
          "ref": "6e521ea6-7f3d-4856-a99b-cbd6f2a4ee0c",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e08050c2-13eb-4c69-8cfd-1cdc64341a48"
        },
        "item": {
          "id": "2d50cdcf-27c9-416b-bd4e-93fb67ec1387",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "40f6658d-43e0-42fb-9732-ac5c6a594c8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "2d50cdcf-27c9-416b-bd4e-93fb67ec1387",
        "cursor": {
          "ref": "6e521ea6-7f3d-4856-a99b-cbd6f2a4ee0c",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e08050c2-13eb-4c69-8cfd-1cdc64341a48"
        },
        "item": {
          "id": "2d50cdcf-27c9-416b-bd4e-93fb67ec1387",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "40f6658d-43e0-42fb-9732-ac5c6a594c8b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "50d1f305-d4e5-486a-b01e-99e0c359a068",
        "cursor": {
          "ref": "221ed0cd-26bf-470f-adcd-cf3aa93fc91e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6817877d-6215-4149-a2b4-b8206952c792"
        },
        "item": {
          "id": "50d1f305-d4e5-486a-b01e-99e0c359a068",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9e372026-ebc6-44d9-a5be-c890ac7b0403",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "50d1f305-d4e5-486a-b01e-99e0c359a068",
        "cursor": {
          "ref": "221ed0cd-26bf-470f-adcd-cf3aa93fc91e",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "6817877d-6215-4149-a2b4-b8206952c792"
        },
        "item": {
          "id": "50d1f305-d4e5-486a-b01e-99e0c359a068",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9e372026-ebc6-44d9-a5be-c890ac7b0403",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "a16670d9-b002-481a-884e-b5eb7f80b8d5",
        "cursor": {
          "ref": "b55e327e-60bd-4194-a6ef-21030bd72e58",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5a6a7b96-77ae-4197-93e8-8cebd71093c1"
        },
        "item": {
          "id": "a16670d9-b002-481a-884e-b5eb7f80b8d5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5484f758-5b9c-4de2-90b7-6f9f847574f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "a16670d9-b002-481a-884e-b5eb7f80b8d5",
        "cursor": {
          "ref": "b55e327e-60bd-4194-a6ef-21030bd72e58",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "5a6a7b96-77ae-4197-93e8-8cebd71093c1"
        },
        "item": {
          "id": "a16670d9-b002-481a-884e-b5eb7f80b8d5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5484f758-5b9c-4de2-90b7-6f9f847574f6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "26867928-0489-4b40-9c86-007bfa735dba",
        "cursor": {
          "ref": "490c8397-22b3-4c69-b904-51313986e5f3",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "acb113f0-3081-4618-8931-357784961888"
        },
        "item": {
          "id": "26867928-0489-4b40-9c86-007bfa735dba",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "25fabc5d-b79d-4504-920a-d590d4956770",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "26867928-0489-4b40-9c86-007bfa735dba",
        "cursor": {
          "ref": "490c8397-22b3-4c69-b904-51313986e5f3",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "acb113f0-3081-4618-8931-357784961888"
        },
        "item": {
          "id": "26867928-0489-4b40-9c86-007bfa735dba",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "25fabc5d-b79d-4504-920a-d590d4956770",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "312222ac-2847-482a-b054-1b021291b74d",
        "cursor": {
          "ref": "df3c0457-2b54-4355-9a22-5277c109f107",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1512a899-7819-4019-991e-c2a44936871f"
        },
        "item": {
          "id": "312222ac-2847-482a-b054-1b021291b74d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2ef5ff22-baf7-47eb-84b4-09c6e1b8c28f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "312222ac-2847-482a-b054-1b021291b74d",
        "cursor": {
          "ref": "df3c0457-2b54-4355-9a22-5277c109f107",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1512a899-7819-4019-991e-c2a44936871f"
        },
        "item": {
          "id": "312222ac-2847-482a-b054-1b021291b74d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2ef5ff22-baf7-47eb-84b4-09c6e1b8c28f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "8a5d6159-04fc-46f6-bc94-38180fc9253e",
        "cursor": {
          "ref": "79107fd8-d596-4ec4-a303-633278c5c10e",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "aa18c9bc-1b2a-49d3-999d-a28180b75879"
        },
        "item": {
          "id": "8a5d6159-04fc-46f6-bc94-38180fc9253e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "68dc621f-6b8c-4869-bfef-f4abe02365b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "8a5d6159-04fc-46f6-bc94-38180fc9253e",
        "cursor": {
          "ref": "79107fd8-d596-4ec4-a303-633278c5c10e",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "aa18c9bc-1b2a-49d3-999d-a28180b75879"
        },
        "item": {
          "id": "8a5d6159-04fc-46f6-bc94-38180fc9253e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "68dc621f-6b8c-4869-bfef-f4abe02365b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "9016f6e8-5341-473c-8418-15d3c57591b0",
        "cursor": {
          "ref": "750ceb1e-6f22-4ba1-8596-83f4264151ad",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ed5256a0-2044-48a8-93c4-0ef89f14d6b0"
        },
        "item": {
          "id": "9016f6e8-5341-473c-8418-15d3c57591b0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "97ab3466-3708-49be-bcf8-b86d08120ab4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "9016f6e8-5341-473c-8418-15d3c57591b0",
        "cursor": {
          "ref": "750ceb1e-6f22-4ba1-8596-83f4264151ad",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ed5256a0-2044-48a8-93c4-0ef89f14d6b0"
        },
        "item": {
          "id": "9016f6e8-5341-473c-8418-15d3c57591b0",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "97ab3466-3708-49be-bcf8-b86d08120ab4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "12fabc46-4276-41c5-a6a1-62962de68cc0",
        "cursor": {
          "ref": "c8af8e19-5388-4e7f-ae1d-5da3f045e50d",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2e8a47d5-819e-48da-acff-1404d03d9810"
        },
        "item": {
          "id": "12fabc46-4276-41c5-a6a1-62962de68cc0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a4498ab0-e658-469d-849d-27620744035c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "12fabc46-4276-41c5-a6a1-62962de68cc0",
        "cursor": {
          "ref": "c8af8e19-5388-4e7f-ae1d-5da3f045e50d",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "2e8a47d5-819e-48da-acff-1404d03d9810"
        },
        "item": {
          "id": "12fabc46-4276-41c5-a6a1-62962de68cc0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a4498ab0-e658-469d-849d-27620744035c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "d16c3c21-0f55-4efa-8775-061a166cd450",
        "cursor": {
          "ref": "fbe0998b-1270-4d1e-88fe-c417cab0f9c3",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cb12c670-2997-4b0b-89ef-8e76df78881c"
        },
        "item": {
          "id": "d16c3c21-0f55-4efa-8775-061a166cd450",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7ab5ad04-3880-4f3b-919b-8670d58a5bdc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "d16c3c21-0f55-4efa-8775-061a166cd450",
        "cursor": {
          "ref": "fbe0998b-1270-4d1e-88fe-c417cab0f9c3",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "cb12c670-2997-4b0b-89ef-8e76df78881c"
        },
        "item": {
          "id": "d16c3c21-0f55-4efa-8775-061a166cd450",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "7ab5ad04-3880-4f3b-919b-8670d58a5bdc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "795ce4f1-9aba-46e1-9c58-9065052d4922",
        "cursor": {
          "ref": "c4f8e9ab-3508-47a6-94fb-6fc82b7ea2cc",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "72648e34-5798-4fab-9d94-d4da0a33f110"
        },
        "item": {
          "id": "795ce4f1-9aba-46e1-9c58-9065052d4922",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "395fdac3-3980-4bec-8239-0fe4d6afa277",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "795ce4f1-9aba-46e1-9c58-9065052d4922",
        "cursor": {
          "ref": "c4f8e9ab-3508-47a6-94fb-6fc82b7ea2cc",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "72648e34-5798-4fab-9d94-d4da0a33f110"
        },
        "item": {
          "id": "795ce4f1-9aba-46e1-9c58-9065052d4922",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "395fdac3-3980-4bec-8239-0fe4d6afa277",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "d818a5af-4f99-41ff-856a-72b3aee892fd",
        "cursor": {
          "ref": "1792da34-06f2-4a74-bc75-03040b97d230",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "aa553ca6-a57e-4f6e-9fbb-333652a274f5"
        },
        "item": {
          "id": "d818a5af-4f99-41ff-856a-72b3aee892fd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d3b57aa4-e02b-4d57-ab59-6f0b179812ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d818a5af-4f99-41ff-856a-72b3aee892fd",
        "cursor": {
          "ref": "1792da34-06f2-4a74-bc75-03040b97d230",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "aa553ca6-a57e-4f6e-9fbb-333652a274f5"
        },
        "item": {
          "id": "d818a5af-4f99-41ff-856a-72b3aee892fd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d3b57aa4-e02b-4d57-ab59-6f0b179812ab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "20e93740-60d2-4f45-b5dc-53481ea2fac6",
        "cursor": {
          "ref": "fa10dc65-4587-4ddc-a326-0d7c1a392228",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6e8300b5-f586-4dcb-bbf8-9d675ef6444d"
        },
        "item": {
          "id": "20e93740-60d2-4f45-b5dc-53481ea2fac6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ee242753-d097-43ba-b69c-34a4a2dc22fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "20e93740-60d2-4f45-b5dc-53481ea2fac6",
        "cursor": {
          "ref": "fa10dc65-4587-4ddc-a326-0d7c1a392228",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6e8300b5-f586-4dcb-bbf8-9d675ef6444d"
        },
        "item": {
          "id": "20e93740-60d2-4f45-b5dc-53481ea2fac6",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ee242753-d097-43ba-b69c-34a4a2dc22fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "abc146ec-eae9-45ff-81cb-39b09beaf9b5",
        "cursor": {
          "ref": "74359731-1711-4e0e-9c5b-8a631004c155",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e53859bc-c441-479d-9685-0bbec60f8f45"
        },
        "item": {
          "id": "abc146ec-eae9-45ff-81cb-39b09beaf9b5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "acb35c18-1afa-4d42-9cb1-b8fb903e2f3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "abc146ec-eae9-45ff-81cb-39b09beaf9b5",
        "cursor": {
          "ref": "74359731-1711-4e0e-9c5b-8a631004c155",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e53859bc-c441-479d-9685-0bbec60f8f45"
        },
        "item": {
          "id": "abc146ec-eae9-45ff-81cb-39b09beaf9b5",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "acb35c18-1afa-4d42-9cb1-b8fb903e2f3a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "5279c4c8-c94b-412c-9ae3-86a63c6b331c",
        "cursor": {
          "ref": "8f9baea1-7b2a-4f6e-910c-f399c1b79087",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "84577e29-3e61-496c-ae14-737f471a198a"
        },
        "item": {
          "id": "5279c4c8-c94b-412c-9ae3-86a63c6b331c",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "918c3221-62e8-4996-b1b3-f47586e05925",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "5279c4c8-c94b-412c-9ae3-86a63c6b331c",
        "cursor": {
          "ref": "8f9baea1-7b2a-4f6e-910c-f399c1b79087",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "84577e29-3e61-496c-ae14-737f471a198a"
        },
        "item": {
          "id": "5279c4c8-c94b-412c-9ae3-86a63c6b331c",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "918c3221-62e8-4996-b1b3-f47586e05925",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "980e62bb-6b6c-4c3e-9513-5249549c1689",
        "cursor": {
          "ref": "a7ced9de-bbe6-47bc-8de2-f0c9817a3767",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9f05e9d9-684b-44b5-8e88-7759f0640fa2"
        },
        "item": {
          "id": "980e62bb-6b6c-4c3e-9513-5249549c1689",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2781cbac-3373-457a-a89a-e4fc16b30ceb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "980e62bb-6b6c-4c3e-9513-5249549c1689",
        "cursor": {
          "ref": "a7ced9de-bbe6-47bc-8de2-f0c9817a3767",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9f05e9d9-684b-44b5-8e88-7759f0640fa2"
        },
        "item": {
          "id": "980e62bb-6b6c-4c3e-9513-5249549c1689",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2781cbac-3373-457a-a89a-e4fc16b30ceb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "45afd674-1b76-42b2-8ca4-3fe53c1608b6",
        "cursor": {
          "ref": "d4bd6c99-a61b-4d13-b73c-6a1b4b0fe25e",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4cbf8f69-62b1-48f8-90a9-7b3fb33ba048"
        },
        "item": {
          "id": "45afd674-1b76-42b2-8ca4-3fe53c1608b6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c13bf79f-9676-49a2-958b-9140fb9a8a0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "45afd674-1b76-42b2-8ca4-3fe53c1608b6",
        "cursor": {
          "ref": "d4bd6c99-a61b-4d13-b73c-6a1b4b0fe25e",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "4cbf8f69-62b1-48f8-90a9-7b3fb33ba048"
        },
        "item": {
          "id": "45afd674-1b76-42b2-8ca4-3fe53c1608b6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "c13bf79f-9676-49a2-958b-9140fb9a8a0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "02c23c2a-eda9-4a44-8521-7ddb48b75e12",
        "cursor": {
          "ref": "29a7087b-cb9e-40d6-b0a1-ce39f5a85a3b",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "22eef805-20c5-4022-a05f-6e4f811ba955"
        },
        "item": {
          "id": "02c23c2a-eda9-4a44-8521-7ddb48b75e12",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9315c228-f0ad-418c-b8e2-4c80948f904e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "02c23c2a-eda9-4a44-8521-7ddb48b75e12",
        "cursor": {
          "ref": "29a7087b-cb9e-40d6-b0a1-ce39f5a85a3b",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "22eef805-20c5-4022-a05f-6e4f811ba955"
        },
        "item": {
          "id": "02c23c2a-eda9-4a44-8521-7ddb48b75e12",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9315c228-f0ad-418c-b8e2-4c80948f904e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "bf4ce4bf-d8c1-4236-b219-325950bf0681",
        "cursor": {
          "ref": "53316f0d-01fa-40aa-8d09-078f8e9734a4",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6884e195-460c-4f3c-a33b-9562a369cb39"
        },
        "item": {
          "id": "bf4ce4bf-d8c1-4236-b219-325950bf0681",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cf7f924e-5b96-4972-a106-6fcd3996f729",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "bf4ce4bf-d8c1-4236-b219-325950bf0681",
        "cursor": {
          "ref": "53316f0d-01fa-40aa-8d09-078f8e9734a4",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "6884e195-460c-4f3c-a33b-9562a369cb39"
        },
        "item": {
          "id": "bf4ce4bf-d8c1-4236-b219-325950bf0681",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "cf7f924e-5b96-4972-a106-6fcd3996f729",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "d9f874e7-2d4e-4558-a189-a35edf85b910",
        "cursor": {
          "ref": "889370c8-e164-42c4-b6ce-17d6cd5f8f71",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "48db3869-02b0-44d5-b936-9fbad47371ac"
        },
        "item": {
          "id": "d9f874e7-2d4e-4558-a189-a35edf85b910",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "602f2b38-9eee-4197-a8ef-7c835a84986c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "d9f874e7-2d4e-4558-a189-a35edf85b910",
        "cursor": {
          "ref": "889370c8-e164-42c4-b6ce-17d6cd5f8f71",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "48db3869-02b0-44d5-b936-9fbad47371ac"
        },
        "item": {
          "id": "d9f874e7-2d4e-4558-a189-a35edf85b910",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "602f2b38-9eee-4197-a8ef-7c835a84986c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "e9601857-ba84-48e7-8016-f9ea1be81c78",
        "cursor": {
          "ref": "b95eb8ef-9443-4c8e-abef-fbf31352406a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2b35ee1d-5665-4c59-a880-05a08fe36f57"
        },
        "item": {
          "id": "e9601857-ba84-48e7-8016-f9ea1be81c78",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4c887e0d-fce4-47c7-ac05-5bbd545e5abf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "e9601857-ba84-48e7-8016-f9ea1be81c78",
        "cursor": {
          "ref": "b95eb8ef-9443-4c8e-abef-fbf31352406a",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2b35ee1d-5665-4c59-a880-05a08fe36f57"
        },
        "item": {
          "id": "e9601857-ba84-48e7-8016-f9ea1be81c78",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "4c887e0d-fce4-47c7-ac05-5bbd545e5abf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "2618395e-d046-48d8-9b4a-d57469f763a7",
        "cursor": {
          "ref": "66e3f689-610f-4f04-b808-85a59cda41e8",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d558bf4f-04a6-4fa2-b45f-b7b0b0e31bd5"
        },
        "item": {
          "id": "2618395e-d046-48d8-9b4a-d57469f763a7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5a74e0a7-02fa-4bfa-bacc-dc87b53fa827",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "2618395e-d046-48d8-9b4a-d57469f763a7",
        "cursor": {
          "ref": "66e3f689-610f-4f04-b808-85a59cda41e8",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d558bf4f-04a6-4fa2-b45f-b7b0b0e31bd5"
        },
        "item": {
          "id": "2618395e-d046-48d8-9b4a-d57469f763a7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "5a74e0a7-02fa-4bfa-bacc-dc87b53fa827",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "01868acc-2a65-46b0-a303-6a2f66778322",
        "cursor": {
          "ref": "677c6590-50d8-427b-aa3d-8cdde7bc49e6",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "baeb065c-73db-4b1b-b570-9edf8ca02d49"
        },
        "item": {
          "id": "01868acc-2a65-46b0-a303-6a2f66778322",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dd66c0a9-fdc7-4bee-8312-51605c486383",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "01868acc-2a65-46b0-a303-6a2f66778322",
        "cursor": {
          "ref": "677c6590-50d8-427b-aa3d-8cdde7bc49e6",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "baeb065c-73db-4b1b-b570-9edf8ca02d49"
        },
        "item": {
          "id": "01868acc-2a65-46b0-a303-6a2f66778322",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dd66c0a9-fdc7-4bee-8312-51605c486383",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "41305154-2bdc-42db-985f-ec755d03966d",
        "cursor": {
          "ref": "281f7f2e-fa0a-4bd6-9f05-f5c9a5f346f6",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bc04b114-8aff-460b-b7d9-c5cf0ca7b59b"
        },
        "item": {
          "id": "41305154-2bdc-42db-985f-ec755d03966d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "01f7b337-ecfe-48ba-b8e2-629dcd4173a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "41305154-2bdc-42db-985f-ec755d03966d",
        "cursor": {
          "ref": "281f7f2e-fa0a-4bd6-9f05-f5c9a5f346f6",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "bc04b114-8aff-460b-b7d9-c5cf0ca7b59b"
        },
        "item": {
          "id": "41305154-2bdc-42db-985f-ec755d03966d",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "01f7b337-ecfe-48ba-b8e2-629dcd4173a9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "ba50d57e-b3db-4871-810d-90ee3fb0577e",
        "cursor": {
          "ref": "af7ff365-0a99-4bc4-b1a5-9be860be9116",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ba048788-3c35-4054-99b0-c8e1c1d4c89f"
        },
        "item": {
          "id": "ba50d57e-b3db-4871-810d-90ee3fb0577e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "82b5bb16-fbdb-427a-8250-a24520acd687",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "ba50d57e-b3db-4871-810d-90ee3fb0577e",
        "cursor": {
          "ref": "af7ff365-0a99-4bc4-b1a5-9be860be9116",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ba048788-3c35-4054-99b0-c8e1c1d4c89f"
        },
        "item": {
          "id": "ba50d57e-b3db-4871-810d-90ee3fb0577e",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "82b5bb16-fbdb-427a-8250-a24520acd687",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f85cf707-a7f9-4885-81d3-9b7562544973",
        "cursor": {
          "ref": "55bc4d1c-f127-4f87-aa45-a25b5d2f4c7f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "48b7c685-9d19-42b2-a76b-e45a3166f5bf"
        },
        "item": {
          "id": "f85cf707-a7f9-4885-81d3-9b7562544973",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "63e587c8-95fd-4aff-b95c-27093704f673",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "f85cf707-a7f9-4885-81d3-9b7562544973",
        "cursor": {
          "ref": "55bc4d1c-f127-4f87-aa45-a25b5d2f4c7f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "48b7c685-9d19-42b2-a76b-e45a3166f5bf"
        },
        "item": {
          "id": "f85cf707-a7f9-4885-81d3-9b7562544973",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "63e587c8-95fd-4aff-b95c-27093704f673",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "269a3708-e2fa-47c7-8e35-411b39c700fc",
        "cursor": {
          "ref": "94cd2080-2153-477b-acdf-49d2935017d5",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2dfcf4c6-a98f-458b-9ac5-f33e274e49ed"
        },
        "item": {
          "id": "269a3708-e2fa-47c7-8e35-411b39c700fc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f9efc804-8bd3-4ee5-82c5-bfc672d87738",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "269a3708-e2fa-47c7-8e35-411b39c700fc",
        "cursor": {
          "ref": "94cd2080-2153-477b-acdf-49d2935017d5",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "2dfcf4c6-a98f-458b-9ac5-f33e274e49ed"
        },
        "item": {
          "id": "269a3708-e2fa-47c7-8e35-411b39c700fc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f9efc804-8bd3-4ee5-82c5-bfc672d87738",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "15141b04-4f79-4dc0-9c2b-937c9a5c6fa3",
        "cursor": {
          "ref": "ae3ae132-ef28-458f-9ff1-cbc2e2b98ebc",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "19e843df-00c0-4a45-9a39-13236a564f27"
        },
        "item": {
          "id": "15141b04-4f79-4dc0-9c2b-937c9a5c6fa3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0b154361-2a13-442a-9f0e-4f54bca9b91c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "15141b04-4f79-4dc0-9c2b-937c9a5c6fa3",
        "cursor": {
          "ref": "ae3ae132-ef28-458f-9ff1-cbc2e2b98ebc",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "19e843df-00c0-4a45-9a39-13236a564f27"
        },
        "item": {
          "id": "15141b04-4f79-4dc0-9c2b-937c9a5c6fa3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0b154361-2a13-442a-9f0e-4f54bca9b91c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "3adce1a2-243f-40b1-9ffc-a7950b088fdd",
        "cursor": {
          "ref": "58dcbc0b-23ca-4349-af65-b7ef4de13838",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a82faeb2-01e9-4d9b-8556-0992369de470"
        },
        "item": {
          "id": "3adce1a2-243f-40b1-9ffc-a7950b088fdd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "10b6cd7c-7322-4b0b-a1f2-79bca9e68968",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "3adce1a2-243f-40b1-9ffc-a7950b088fdd",
        "cursor": {
          "ref": "58dcbc0b-23ca-4349-af65-b7ef4de13838",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a82faeb2-01e9-4d9b-8556-0992369de470"
        },
        "item": {
          "id": "3adce1a2-243f-40b1-9ffc-a7950b088fdd",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "10b6cd7c-7322-4b0b-a1f2-79bca9e68968",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "11de7d4d-0c51-4b11-a82f-bc5749016d4e",
        "cursor": {
          "ref": "59b8bed8-17c9-4f83-9cfd-0cefa31e6082",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "08917dd9-b4d0-4a70-84f2-e9948b23666b"
        },
        "item": {
          "id": "11de7d4d-0c51-4b11-a82f-bc5749016d4e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "134a30c1-a626-4dc3-b6d8-24147cc67976",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "11de7d4d-0c51-4b11-a82f-bc5749016d4e",
        "cursor": {
          "ref": "59b8bed8-17c9-4f83-9cfd-0cefa31e6082",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "08917dd9-b4d0-4a70-84f2-e9948b23666b"
        },
        "item": {
          "id": "11de7d4d-0c51-4b11-a82f-bc5749016d4e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "134a30c1-a626-4dc3-b6d8-24147cc67976",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "210647e6-7e5e-462c-9820-61cc7d7bb1bf",
        "cursor": {
          "ref": "6b346529-f24a-426e-9096-c6ef0e215ec0",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7ee10c40-9918-4726-bbc7-5b531ce2fb81"
        },
        "item": {
          "id": "210647e6-7e5e-462c-9820-61cc7d7bb1bf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "17924bfb-3017-44f7-afd0-37911738fdb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "210647e6-7e5e-462c-9820-61cc7d7bb1bf",
        "cursor": {
          "ref": "6b346529-f24a-426e-9096-c6ef0e215ec0",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7ee10c40-9918-4726-bbc7-5b531ce2fb81"
        },
        "item": {
          "id": "210647e6-7e5e-462c-9820-61cc7d7bb1bf",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "17924bfb-3017-44f7-afd0-37911738fdb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "af5c6e25-d0d1-41fe-9d66-8a807abd35ee",
        "cursor": {
          "ref": "860f9c71-b1c8-4d07-ad41-9052cfadab1b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b2f8dcd0-e575-418f-890b-e430d680891b"
        },
        "item": {
          "id": "af5c6e25-d0d1-41fe-9d66-8a807abd35ee",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e66b0ce0-9589-4b9e-bec1-553e5d3ba799",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "af5c6e25-d0d1-41fe-9d66-8a807abd35ee",
        "cursor": {
          "ref": "860f9c71-b1c8-4d07-ad41-9052cfadab1b",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b2f8dcd0-e575-418f-890b-e430d680891b"
        },
        "item": {
          "id": "af5c6e25-d0d1-41fe-9d66-8a807abd35ee",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e66b0ce0-9589-4b9e-bec1-553e5d3ba799",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "0532df49-40e7-4d80-97a5-3ca2adec74f6",
        "cursor": {
          "ref": "f5c79c8e-d254-43f1-af2c-9b93fe020269",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cc67bc62-4c73-43f0-b7a7-aaf497144ed2"
        },
        "item": {
          "id": "0532df49-40e7-4d80-97a5-3ca2adec74f6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ec874444-17ce-4eae-b56c-9edb6e9b69b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "0532df49-40e7-4d80-97a5-3ca2adec74f6",
        "cursor": {
          "ref": "f5c79c8e-d254-43f1-af2c-9b93fe020269",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "cc67bc62-4c73-43f0-b7a7-aaf497144ed2"
        },
        "item": {
          "id": "0532df49-40e7-4d80-97a5-3ca2adec74f6",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ec874444-17ce-4eae-b56c-9edb6e9b69b5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "0f31f564-a50e-44b8-a2c4-3e46b479db98",
        "cursor": {
          "ref": "863ef841-f490-43ed-aa3b-fa4a28303aab",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ec59458a-d05e-43f1-8336-3f98ed9ccc2e"
        },
        "item": {
          "id": "0f31f564-a50e-44b8-a2c4-3e46b479db98",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0b0c3f6a-7f24-404e-9450-f7d8f6642c3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "0f31f564-a50e-44b8-a2c4-3e46b479db98",
        "cursor": {
          "ref": "863ef841-f490-43ed-aa3b-fa4a28303aab",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "ec59458a-d05e-43f1-8336-3f98ed9ccc2e"
        },
        "item": {
          "id": "0f31f564-a50e-44b8-a2c4-3e46b479db98",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0b0c3f6a-7f24-404e-9450-f7d8f6642c3e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "67fa2773-8e66-4711-804c-f6ed85f4959c",
        "cursor": {
          "ref": "e5a729c3-94f9-4683-bf9e-cf2167ab0ba6",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "70ce7b71-1491-4481-8b39-9a635a8fa4b3"
        },
        "item": {
          "id": "67fa2773-8e66-4711-804c-f6ed85f4959c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "db45da3b-9978-49c7-88cf-cf294491acc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "67fa2773-8e66-4711-804c-f6ed85f4959c",
        "cursor": {
          "ref": "e5a729c3-94f9-4683-bf9e-cf2167ab0ba6",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "70ce7b71-1491-4481-8b39-9a635a8fa4b3"
        },
        "item": {
          "id": "67fa2773-8e66-4711-804c-f6ed85f4959c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "db45da3b-9978-49c7-88cf-cf294491acc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "977b8d6a-ae51-469b-92ad-50f3234b0cfd",
        "cursor": {
          "ref": "3cd4002d-6868-4bbf-a18a-fbff299a8c3c",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "455f3009-dd30-4935-a3b8-33917da5c2a6"
        },
        "item": {
          "id": "977b8d6a-ae51-469b-92ad-50f3234b0cfd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f1221f3b-c1c3-4879-b491-308a9fa31143",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "977b8d6a-ae51-469b-92ad-50f3234b0cfd",
        "cursor": {
          "ref": "3cd4002d-6868-4bbf-a18a-fbff299a8c3c",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "455f3009-dd30-4935-a3b8-33917da5c2a6"
        },
        "item": {
          "id": "977b8d6a-ae51-469b-92ad-50f3234b0cfd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f1221f3b-c1c3-4879-b491-308a9fa31143",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3146bb3e-582d-4422-b79e-74c82e9fec8d",
        "cursor": {
          "ref": "8d025aa8-e012-4ba9-bd1d-90e9fa7e432f",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "964f8473-1a7a-4920-9ac5-23cb1352d1d3"
        },
        "item": {
          "id": "3146bb3e-582d-4422-b79e-74c82e9fec8d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d11b6215-9690-40e1-9d15-ccf5062d7f83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3146bb3e-582d-4422-b79e-74c82e9fec8d",
        "cursor": {
          "ref": "8d025aa8-e012-4ba9-bd1d-90e9fa7e432f",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "964f8473-1a7a-4920-9ac5-23cb1352d1d3"
        },
        "item": {
          "id": "3146bb3e-582d-4422-b79e-74c82e9fec8d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d11b6215-9690-40e1-9d15-ccf5062d7f83",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "ceba1f17-d3bb-464b-9a78-7dd1d0dc70a7",
        "cursor": {
          "ref": "dece0dda-6dd4-4cdb-bab0-9c1e4d7c5018",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "455d575a-9420-48d0-873c-ca36d9325f2d"
        },
        "item": {
          "id": "ceba1f17-d3bb-464b-9a78-7dd1d0dc70a7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7836aa75-000e-49c6-9e59-18749f5960f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "ceba1f17-d3bb-464b-9a78-7dd1d0dc70a7",
        "cursor": {
          "ref": "dece0dda-6dd4-4cdb-bab0-9c1e4d7c5018",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "455d575a-9420-48d0-873c-ca36d9325f2d"
        },
        "item": {
          "id": "ceba1f17-d3bb-464b-9a78-7dd1d0dc70a7",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7836aa75-000e-49c6-9e59-18749f5960f7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "74e7ec7f-8457-4be0-b6de-3ac879e9804f",
        "cursor": {
          "ref": "de56ebd9-8fa7-4062-8bbc-d678e6319557",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f5bb2a0f-3400-45b3-b7b0-4764e80faa84"
        },
        "item": {
          "id": "74e7ec7f-8457-4be0-b6de-3ac879e9804f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5c0da833-c33d-4538-bb49-2048cae36cad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "74e7ec7f-8457-4be0-b6de-3ac879e9804f",
        "cursor": {
          "ref": "de56ebd9-8fa7-4062-8bbc-d678e6319557",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "f5bb2a0f-3400-45b3-b7b0-4764e80faa84"
        },
        "item": {
          "id": "74e7ec7f-8457-4be0-b6de-3ac879e9804f",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "5c0da833-c33d-4538-bb49-2048cae36cad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "f992ce06-bef3-4f13-bd17-e1a87383bc55",
        "cursor": {
          "ref": "4b59c7d7-5f90-4a12-8719-9ec620ee6ef0",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f0819f83-875f-4023-bf95-43de12e9778d"
        },
        "item": {
          "id": "f992ce06-bef3-4f13-bd17-e1a87383bc55",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "74da3e01-1afa-45e0-a3a8-66b8494cb10f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "f992ce06-bef3-4f13-bd17-e1a87383bc55",
        "cursor": {
          "ref": "4b59c7d7-5f90-4a12-8719-9ec620ee6ef0",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "f0819f83-875f-4023-bf95-43de12e9778d"
        },
        "item": {
          "id": "f992ce06-bef3-4f13-bd17-e1a87383bc55",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "74da3e01-1afa-45e0-a3a8-66b8494cb10f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "741b962d-4258-43e5-ab72-9a60eb8717ce",
        "cursor": {
          "ref": "85dc9316-2245-494e-9acb-56e3a4e56d2f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fcb49cdf-e6a2-4a15-a322-f739db081cbe"
        },
        "item": {
          "id": "741b962d-4258-43e5-ab72-9a60eb8717ce",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6bb5f2a4-af08-4e28-a222-639d3b297f77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "741b962d-4258-43e5-ab72-9a60eb8717ce",
        "cursor": {
          "ref": "85dc9316-2245-494e-9acb-56e3a4e56d2f",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fcb49cdf-e6a2-4a15-a322-f739db081cbe"
        },
        "item": {
          "id": "741b962d-4258-43e5-ab72-9a60eb8717ce",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6bb5f2a4-af08-4e28-a222-639d3b297f77",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "6bd18b66-381b-4199-9549-3447205de9e3",
        "cursor": {
          "ref": "55ed924f-9112-47c9-8f24-837cad86e807",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b54410e8-dc9a-4475-91d9-2965bcefbeae"
        },
        "item": {
          "id": "6bd18b66-381b-4199-9549-3447205de9e3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e231a47a-8d13-4bc8-8ef9-bb5fcb4e97ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6bd18b66-381b-4199-9549-3447205de9e3",
        "cursor": {
          "ref": "55ed924f-9112-47c9-8f24-837cad86e807",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "b54410e8-dc9a-4475-91d9-2965bcefbeae"
        },
        "item": {
          "id": "6bd18b66-381b-4199-9549-3447205de9e3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e231a47a-8d13-4bc8-8ef9-bb5fcb4e97ae",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6a4c69f4-92bb-458f-a1de-5756e174df78",
        "cursor": {
          "ref": "3a4c46b4-2cc6-4526-b4f0-942e29d66169",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c59960f2-68f6-4186-9915-7b2927378555"
        },
        "item": {
          "id": "6a4c69f4-92bb-458f-a1de-5756e174df78",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9ff10949-302e-44b5-953a-089513754e58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "6a4c69f4-92bb-458f-a1de-5756e174df78",
        "cursor": {
          "ref": "3a4c46b4-2cc6-4526-b4f0-942e29d66169",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "c59960f2-68f6-4186-9915-7b2927378555"
        },
        "item": {
          "id": "6a4c69f4-92bb-458f-a1de-5756e174df78",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9ff10949-302e-44b5-953a-089513754e58",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "47271a4c-3134-42a7-bf13-382c2d071387",
        "cursor": {
          "ref": "74b28353-a6ac-4989-b5c8-9933b8521933",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "eed5f7ef-c327-4ba9-a5ad-30ef7cd69ad7"
        },
        "item": {
          "id": "47271a4c-3134-42a7-bf13-382c2d071387",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5cc7defc-eb2c-45af-a6da-ccd4d7be4d55",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "47271a4c-3134-42a7-bf13-382c2d071387",
        "cursor": {
          "ref": "74b28353-a6ac-4989-b5c8-9933b8521933",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "eed5f7ef-c327-4ba9-a5ad-30ef7cd69ad7"
        },
        "item": {
          "id": "47271a4c-3134-42a7-bf13-382c2d071387",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5cc7defc-eb2c-45af-a6da-ccd4d7be4d55",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "55cdd0e3-59fe-479b-b94c-2f685eb8230e",
        "cursor": {
          "ref": "b887c4a0-3bd7-4b1d-937c-857438edb50f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6ae3d4d8-9744-49b1-8d23-7e11df0a475a"
        },
        "item": {
          "id": "55cdd0e3-59fe-479b-b94c-2f685eb8230e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "36718382-0263-4178-b443-561471c67394",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "55cdd0e3-59fe-479b-b94c-2f685eb8230e",
        "cursor": {
          "ref": "b887c4a0-3bd7-4b1d-937c-857438edb50f",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6ae3d4d8-9744-49b1-8d23-7e11df0a475a"
        },
        "item": {
          "id": "55cdd0e3-59fe-479b-b94c-2f685eb8230e",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "36718382-0263-4178-b443-561471c67394",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "f544b2b0-379a-4857-8432-eb1e028ec9e0",
        "cursor": {
          "ref": "211f95d8-cfb7-4654-9871-812a6125c744",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3711a72b-c585-475b-9ea7-7dafa26b114b"
        },
        "item": {
          "id": "f544b2b0-379a-4857-8432-eb1e028ec9e0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "300579d2-c655-48bb-ac81-78c09a8b0015",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 24,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "f544b2b0-379a-4857-8432-eb1e028ec9e0",
        "cursor": {
          "ref": "211f95d8-cfb7-4654-9871-812a6125c744",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "3711a72b-c585-475b-9ea7-7dafa26b114b"
        },
        "item": {
          "id": "f544b2b0-379a-4857-8432-eb1e028ec9e0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "300579d2-c655-48bb-ac81-78c09a8b0015",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 24,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "972122bc-e260-4609-8d1c-24f4a8357ac4",
        "cursor": {
          "ref": "09a0c6dd-09e8-492c-b050-bf283cda22f4",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "710061de-4dda-47e5-b856-289e7ec7ff85"
        },
        "item": {
          "id": "972122bc-e260-4609-8d1c-24f4a8357ac4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d439374e-2306-4572-beb0-84f0970b9c6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "972122bc-e260-4609-8d1c-24f4a8357ac4",
        "cursor": {
          "ref": "09a0c6dd-09e8-492c-b050-bf283cda22f4",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "710061de-4dda-47e5-b856-289e7ec7ff85"
        },
        "item": {
          "id": "972122bc-e260-4609-8d1c-24f4a8357ac4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d439374e-2306-4572-beb0-84f0970b9c6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "11fea036-c8bd-413f-a3ce-f511adc493b2",
        "cursor": {
          "ref": "7a4bbcd6-4842-41a3-956b-879d300f6a16",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7fb6bd49-c583-4a22-947c-7304bab866f2"
        },
        "item": {
          "id": "11fea036-c8bd-413f-a3ce-f511adc493b2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fd2ad5b4-8dc0-4c79-9eb1-f391d38198a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "11fea036-c8bd-413f-a3ce-f511adc493b2",
        "cursor": {
          "ref": "7a4bbcd6-4842-41a3-956b-879d300f6a16",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "7fb6bd49-c583-4a22-947c-7304bab866f2"
        },
        "item": {
          "id": "11fea036-c8bd-413f-a3ce-f511adc493b2",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fd2ad5b4-8dc0-4c79-9eb1-f391d38198a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "24aa0606-7507-41e2-bd85-ff3801535967",
        "cursor": {
          "ref": "685d3785-9182-4fa3-a980-f1c414f2258e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f6682be8-3817-4e7d-9f64-3c214b06493a"
        },
        "item": {
          "id": "24aa0606-7507-41e2-bd85-ff3801535967",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2e2801d0-6cd0-4d30-a0c1-baad49817cf0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "24aa0606-7507-41e2-bd85-ff3801535967",
        "cursor": {
          "ref": "685d3785-9182-4fa3-a980-f1c414f2258e",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f6682be8-3817-4e7d-9f64-3c214b06493a"
        },
        "item": {
          "id": "24aa0606-7507-41e2-bd85-ff3801535967",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2e2801d0-6cd0-4d30-a0c1-baad49817cf0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "5498e423-b221-4149-be82-14b23f78ff03",
        "cursor": {
          "ref": "ad0bbb8a-9536-4dc9-a857-80786a90c4ad",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "907a0dbd-1dce-484c-b3fe-f8b6453ab71c"
        },
        "item": {
          "id": "5498e423-b221-4149-be82-14b23f78ff03",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f7f96236-6276-4539-93ca-f0a484542c02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "5498e423-b221-4149-be82-14b23f78ff03",
        "cursor": {
          "ref": "ad0bbb8a-9536-4dc9-a857-80786a90c4ad",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "907a0dbd-1dce-484c-b3fe-f8b6453ab71c"
        },
        "item": {
          "id": "5498e423-b221-4149-be82-14b23f78ff03",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f7f96236-6276-4539-93ca-f0a484542c02",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "8eacfa44-416f-4c79-8385-51104131f3d4",
        "cursor": {
          "ref": "52d74704-e7fc-449d-a17b-5d1ef411de88",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "448113c1-af67-4fac-9582-6501d9be90e3"
        },
        "item": {
          "id": "8eacfa44-416f-4c79-8385-51104131f3d4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c3e79ebb-c398-4701-8e52-89b7ece4cc07",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "8eacfa44-416f-4c79-8385-51104131f3d4",
        "cursor": {
          "ref": "52d74704-e7fc-449d-a17b-5d1ef411de88",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "448113c1-af67-4fac-9582-6501d9be90e3"
        },
        "item": {
          "id": "8eacfa44-416f-4c79-8385-51104131f3d4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c3e79ebb-c398-4701-8e52-89b7ece4cc07",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "75164b20-eabd-486b-a23a-6db0958fdd10",
        "cursor": {
          "ref": "d3e916d9-f29d-48a0-b0ac-e4a844a35e49",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ea903d77-6d49-4f48-8f00-a8750d0c4046"
        },
        "item": {
          "id": "75164b20-eabd-486b-a23a-6db0958fdd10",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c40aa91d-8296-49ce-b697-19c2fbb78f57",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "75164b20-eabd-486b-a23a-6db0958fdd10",
        "cursor": {
          "ref": "d3e916d9-f29d-48a0-b0ac-e4a844a35e49",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "ea903d77-6d49-4f48-8f00-a8750d0c4046"
        },
        "item": {
          "id": "75164b20-eabd-486b-a23a-6db0958fdd10",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c40aa91d-8296-49ce-b697-19c2fbb78f57",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "23cd6114-36dc-49db-a4c4-02d035a12026",
        "cursor": {
          "ref": "9c063357-6f29-4f22-a682-7be1e1b23b8b",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7162ad58-7857-4f83-b423-2a65bb860c8a"
        },
        "item": {
          "id": "23cd6114-36dc-49db-a4c4-02d035a12026",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9d579688-5328-4c28-b87c-71ec52c984ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "23cd6114-36dc-49db-a4c4-02d035a12026",
        "cursor": {
          "ref": "9c063357-6f29-4f22-a682-7be1e1b23b8b",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "7162ad58-7857-4f83-b423-2a65bb860c8a"
        },
        "item": {
          "id": "23cd6114-36dc-49db-a4c4-02d035a12026",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "9d579688-5328-4c28-b87c-71ec52c984ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "f05b09c1-ba4b-4364-ae80-71efaeea9061",
        "cursor": {
          "ref": "ae2d0b4e-f060-4547-ab95-b5a1304b8e09",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "22a72383-d6ba-4458-81e3-f2f97df56466"
        },
        "item": {
          "id": "f05b09c1-ba4b-4364-ae80-71efaeea9061",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3ce5382b-b999-424a-8524-00a24ee41894",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "f05b09c1-ba4b-4364-ae80-71efaeea9061",
        "cursor": {
          "ref": "ae2d0b4e-f060-4547-ab95-b5a1304b8e09",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "22a72383-d6ba-4458-81e3-f2f97df56466"
        },
        "item": {
          "id": "f05b09c1-ba4b-4364-ae80-71efaeea9061",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3ce5382b-b999-424a-8524-00a24ee41894",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "fbb09702-0f05-43e3-bdf7-850dcf7d7b6a",
        "cursor": {
          "ref": "b643f16f-bfd3-4ca1-9e2e-49288a9be73b",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e42627bc-cbcc-45e1-b548-ec47f0b6891c"
        },
        "item": {
          "id": "fbb09702-0f05-43e3-bdf7-850dcf7d7b6a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0b9f842f-2a2d-4e4f-9baa-f5b011a1bfbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "fbb09702-0f05-43e3-bdf7-850dcf7d7b6a",
        "cursor": {
          "ref": "b643f16f-bfd3-4ca1-9e2e-49288a9be73b",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e42627bc-cbcc-45e1-b548-ec47f0b6891c"
        },
        "item": {
          "id": "fbb09702-0f05-43e3-bdf7-850dcf7d7b6a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "0b9f842f-2a2d-4e4f-9baa-f5b011a1bfbf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "c70da7a7-4191-4c41-8eef-4099e4338597",
        "cursor": {
          "ref": "af1a6cce-f158-4c31-8efb-683f009f36f3",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "836ae546-a49d-47e9-8f40-f30cdaf2ddfa"
        },
        "item": {
          "id": "c70da7a7-4191-4c41-8eef-4099e4338597",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "434bc60c-7c1b-44cb-8f5e-dcbd99750f1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 25,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "c70da7a7-4191-4c41-8eef-4099e4338597",
        "cursor": {
          "ref": "af1a6cce-f158-4c31-8efb-683f009f36f3",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "836ae546-a49d-47e9-8f40-f30cdaf2ddfa"
        },
        "item": {
          "id": "c70da7a7-4191-4c41-8eef-4099e4338597",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "434bc60c-7c1b-44cb-8f5e-dcbd99750f1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 25,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "cdb097dc-39ea-4309-9d16-dd6988c5c342",
        "cursor": {
          "ref": "e9541530-3fc0-4aa9-b5c5-424c463a94b1",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fda97f19-bc26-405d-814c-9a0a1ec2917b"
        },
        "item": {
          "id": "cdb097dc-39ea-4309-9d16-dd6988c5c342",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "167546d2-c4cf-447e-85cd-de7518e5b7d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "cdb097dc-39ea-4309-9d16-dd6988c5c342",
        "cursor": {
          "ref": "e9541530-3fc0-4aa9-b5c5-424c463a94b1",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fda97f19-bc26-405d-814c-9a0a1ec2917b"
        },
        "item": {
          "id": "cdb097dc-39ea-4309-9d16-dd6988c5c342",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "167546d2-c4cf-447e-85cd-de7518e5b7d8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "ad61be60-7d84-46fc-a053-5ff7402beba9",
        "cursor": {
          "ref": "7ca66d47-98f2-4266-9bcc-5e8e21d33e69",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2f6f4a00-bfa0-411b-b91f-997fe2f0df5e"
        },
        "item": {
          "id": "ad61be60-7d84-46fc-a053-5ff7402beba9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "879cfa09-72b7-4f96-a5cf-30b810b4b5cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "ad61be60-7d84-46fc-a053-5ff7402beba9",
        "cursor": {
          "ref": "7ca66d47-98f2-4266-9bcc-5e8e21d33e69",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "2f6f4a00-bfa0-411b-b91f-997fe2f0df5e"
        },
        "item": {
          "id": "ad61be60-7d84-46fc-a053-5ff7402beba9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "879cfa09-72b7-4f96-a5cf-30b810b4b5cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "c53ba6d5-c3f0-4121-a06c-06a39cc9462e",
        "cursor": {
          "ref": "40fd8771-c37c-46f3-96ef-326941b583b5",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "68bdfd0d-6dd0-4e3b-bfd2-3d5a35ae279d"
        },
        "item": {
          "id": "c53ba6d5-c3f0-4121-a06c-06a39cc9462e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "11db169b-7bec-4d54-b30f-405184fab0bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "c53ba6d5-c3f0-4121-a06c-06a39cc9462e",
        "cursor": {
          "ref": "40fd8771-c37c-46f3-96ef-326941b583b5",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "68bdfd0d-6dd0-4e3b-bfd2-3d5a35ae279d"
        },
        "item": {
          "id": "c53ba6d5-c3f0-4121-a06c-06a39cc9462e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "11db169b-7bec-4d54-b30f-405184fab0bf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "f9a6a960-35da-4cdd-b8dc-bbe96eb66d5f",
        "cursor": {
          "ref": "bc3b93ee-98de-422a-a2f2-bcc3cf3f403d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7960f472-e826-4f47-ab77-7114f7d9bbda"
        },
        "item": {
          "id": "f9a6a960-35da-4cdd-b8dc-bbe96eb66d5f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4137d7fc-07aa-4170-9869-3ddfab7ebb0e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f9a6a960-35da-4cdd-b8dc-bbe96eb66d5f",
        "cursor": {
          "ref": "bc3b93ee-98de-422a-a2f2-bcc3cf3f403d",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "7960f472-e826-4f47-ab77-7114f7d9bbda"
        },
        "item": {
          "id": "f9a6a960-35da-4cdd-b8dc-bbe96eb66d5f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "4137d7fc-07aa-4170-9869-3ddfab7ebb0e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "17f02627-e5cb-4f42-ae75-d2df50999b15",
        "cursor": {
          "ref": "eaecf84d-1a89-47b1-8417-8f9b0a82b00a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "be877296-90b3-4212-abde-84eb539edfd5"
        },
        "item": {
          "id": "17f02627-e5cb-4f42-ae75-d2df50999b15",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bbffb474-df0b-4bb2-ac58-c77b72dca5e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "17f02627-e5cb-4f42-ae75-d2df50999b15",
        "cursor": {
          "ref": "eaecf84d-1a89-47b1-8417-8f9b0a82b00a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "be877296-90b3-4212-abde-84eb539edfd5"
        },
        "item": {
          "id": "17f02627-e5cb-4f42-ae75-d2df50999b15",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bbffb474-df0b-4bb2-ac58-c77b72dca5e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "5012b476-2a2a-4881-b30c-ef706958acc4",
        "cursor": {
          "ref": "c623b37d-e07a-4db9-a860-93e2d51e2521",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b71823d9-f703-480f-9564-0acd22991bc9"
        },
        "item": {
          "id": "5012b476-2a2a-4881-b30c-ef706958acc4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "17d988e9-8379-40c6-9b25-00eda45f8943",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "5012b476-2a2a-4881-b30c-ef706958acc4",
        "cursor": {
          "ref": "c623b37d-e07a-4db9-a860-93e2d51e2521",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "b71823d9-f703-480f-9564-0acd22991bc9"
        },
        "item": {
          "id": "5012b476-2a2a-4881-b30c-ef706958acc4",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "17d988e9-8379-40c6-9b25-00eda45f8943",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "b873587e-1847-481e-837d-3b5555f74a6a",
        "cursor": {
          "ref": "1e285528-6866-4c74-b5b1-8d97e8a0c54d",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "891eaf9c-a183-409a-846d-df4d69135b4c"
        },
        "item": {
          "id": "b873587e-1847-481e-837d-3b5555f74a6a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b4c6d3df-6145-4f44-80f5-cc2f1d2ba481",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "b873587e-1847-481e-837d-3b5555f74a6a",
        "cursor": {
          "ref": "1e285528-6866-4c74-b5b1-8d97e8a0c54d",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "891eaf9c-a183-409a-846d-df4d69135b4c"
        },
        "item": {
          "id": "b873587e-1847-481e-837d-3b5555f74a6a",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b4c6d3df-6145-4f44-80f5-cc2f1d2ba481",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "347d6d9d-e265-494e-b6c7-e07c48d3c229",
        "cursor": {
          "ref": "a75905eb-dcf6-4f85-886c-2cd01abb32e8",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ba619a60-7143-4ff2-b91a-12702c58dd2d"
        },
        "item": {
          "id": "347d6d9d-e265-494e-b6c7-e07c48d3c229",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "143e5c76-8730-4b17-94be-3bee06a24104",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "347d6d9d-e265-494e-b6c7-e07c48d3c229",
        "cursor": {
          "ref": "a75905eb-dcf6-4f85-886c-2cd01abb32e8",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "ba619a60-7143-4ff2-b91a-12702c58dd2d"
        },
        "item": {
          "id": "347d6d9d-e265-494e-b6c7-e07c48d3c229",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "143e5c76-8730-4b17-94be-3bee06a24104",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "4126429e-0680-4dba-bc7f-9e957efa9d2c",
        "cursor": {
          "ref": "b0c8e118-ff6d-4e9c-898b-dda9da514196",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "dbd6cfb7-32e3-4195-9ebc-4c2decad7f68"
        },
        "item": {
          "id": "4126429e-0680-4dba-bc7f-9e957efa9d2c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "94d21906-65e2-4e97-94d1-92149e350d03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "4126429e-0680-4dba-bc7f-9e957efa9d2c",
        "cursor": {
          "ref": "b0c8e118-ff6d-4e9c-898b-dda9da514196",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "dbd6cfb7-32e3-4195-9ebc-4c2decad7f68"
        },
        "item": {
          "id": "4126429e-0680-4dba-bc7f-9e957efa9d2c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "94d21906-65e2-4e97-94d1-92149e350d03",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "d57a6504-2bdd-4634-8fae-1e9cdee8fe79",
        "cursor": {
          "ref": "9aadadf5-c70f-4552-858f-15be557be8ad",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d66d6ef0-600f-49fd-b599-4b1ee82c87f2"
        },
        "item": {
          "id": "d57a6504-2bdd-4634-8fae-1e9cdee8fe79",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d43f3726-b1f1-46e3-abcd-c65f22fb52a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "d57a6504-2bdd-4634-8fae-1e9cdee8fe79",
        "cursor": {
          "ref": "9aadadf5-c70f-4552-858f-15be557be8ad",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d66d6ef0-600f-49fd-b599-4b1ee82c87f2"
        },
        "item": {
          "id": "d57a6504-2bdd-4634-8fae-1e9cdee8fe79",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d43f3726-b1f1-46e3-abcd-c65f22fb52a5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "abc94a5d-15ea-46b4-81d5-69c685c8eb52",
        "cursor": {
          "ref": "709575e0-d00d-498c-a491-dc4c306f1ce5",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f715bc61-3c3b-41fc-855b-be29558fae1b"
        },
        "item": {
          "id": "abc94a5d-15ea-46b4-81d5-69c685c8eb52",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0a808698-2d5c-470a-b1d4-d21f3764ec17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "abc94a5d-15ea-46b4-81d5-69c685c8eb52",
        "cursor": {
          "ref": "709575e0-d00d-498c-a491-dc4c306f1ce5",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f715bc61-3c3b-41fc-855b-be29558fae1b"
        },
        "item": {
          "id": "abc94a5d-15ea-46b4-81d5-69c685c8eb52",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0a808698-2d5c-470a-b1d4-d21f3764ec17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "f6f60017-c3f9-41bb-b88e-a2c702eef562",
        "cursor": {
          "ref": "b2c8ee70-cbe3-4012-ba2b-db7d5a08c807",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4de42100-0632-4899-9659-39cb9cb81d1f"
        },
        "item": {
          "id": "f6f60017-c3f9-41bb-b88e-a2c702eef562",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "59ad9568-bdcc-483d-a8a1-346cd7923990",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f6f60017-c3f9-41bb-b88e-a2c702eef562",
        "cursor": {
          "ref": "b2c8ee70-cbe3-4012-ba2b-db7d5a08c807",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "4de42100-0632-4899-9659-39cb9cb81d1f"
        },
        "item": {
          "id": "f6f60017-c3f9-41bb-b88e-a2c702eef562",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "59ad9568-bdcc-483d-a8a1-346cd7923990",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "ddd54c78-3df6-4c15-8b62-2e6289bf28c6",
        "cursor": {
          "ref": "478d3686-d159-4ad8-8988-e2fee5190665",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a9f81687-63ec-4132-8c77-bc88d79a88a7"
        },
        "item": {
          "id": "ddd54c78-3df6-4c15-8b62-2e6289bf28c6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "44eb77b7-bca5-4d5c-8353-453522e93cda",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ddd54c78-3df6-4c15-8b62-2e6289bf28c6",
        "cursor": {
          "ref": "478d3686-d159-4ad8-8988-e2fee5190665",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a9f81687-63ec-4132-8c77-bc88d79a88a7"
        },
        "item": {
          "id": "ddd54c78-3df6-4c15-8b62-2e6289bf28c6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "44eb77b7-bca5-4d5c-8353-453522e93cda",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "402f6791-5680-451f-b6c5-66db34ca979d",
        "cursor": {
          "ref": "e7077534-f455-4028-a862-c9d3a994be2f",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "70774d89-5508-4894-b9b7-929fa357fb8d"
        },
        "item": {
          "id": "402f6791-5680-451f-b6c5-66db34ca979d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "45100af7-bfe0-41c5-a65f-c2befeea039f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "402f6791-5680-451f-b6c5-66db34ca979d",
        "cursor": {
          "ref": "e7077534-f455-4028-a862-c9d3a994be2f",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "70774d89-5508-4894-b9b7-929fa357fb8d"
        },
        "item": {
          "id": "402f6791-5680-451f-b6c5-66db34ca979d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "45100af7-bfe0-41c5-a65f-c2befeea039f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "bfc66b07-fa71-434c-9237-f93a20df27f5",
        "cursor": {
          "ref": "99a67c48-7cf2-422f-b732-2e68ca59041f",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6590afe6-62b3-402b-87f4-d25540b72b9b"
        },
        "item": {
          "id": "bfc66b07-fa71-434c-9237-f93a20df27f5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6a4ddf6c-55e0-47a2-9b51-964d659dcbef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "bfc66b07-fa71-434c-9237-f93a20df27f5",
        "cursor": {
          "ref": "99a67c48-7cf2-422f-b732-2e68ca59041f",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6590afe6-62b3-402b-87f4-d25540b72b9b"
        },
        "item": {
          "id": "bfc66b07-fa71-434c-9237-f93a20df27f5",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "6a4ddf6c-55e0-47a2-9b51-964d659dcbef",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "115d7f37-7f73-4be8-8225-e9c026b05077",
        "cursor": {
          "ref": "f705d0cd-5134-462f-a321-4808c1ee76c4",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3d7c9f48-c078-4071-ae30-5149036a8aed"
        },
        "item": {
          "id": "115d7f37-7f73-4be8-8225-e9c026b05077",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "86e6baef-81c6-48ff-8275-fb04398386e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "115d7f37-7f73-4be8-8225-e9c026b05077",
        "cursor": {
          "ref": "f705d0cd-5134-462f-a321-4808c1ee76c4",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3d7c9f48-c078-4071-ae30-5149036a8aed"
        },
        "item": {
          "id": "115d7f37-7f73-4be8-8225-e9c026b05077",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "86e6baef-81c6-48ff-8275-fb04398386e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "7c9a1132-207a-4ff8-afd1-a59dcd6a5c0c",
        "cursor": {
          "ref": "a0752b50-6c48-4ffd-ba1d-98d66317bc2c",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "78a13fe8-bfc2-4a58-9506-6a99a0947e1a"
        },
        "item": {
          "id": "7c9a1132-207a-4ff8-afd1-a59dcd6a5c0c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4a865bf7-9dce-4f32-b8ae-5ed8d8f58943",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7c9a1132-207a-4ff8-afd1-a59dcd6a5c0c",
        "cursor": {
          "ref": "a0752b50-6c48-4ffd-ba1d-98d66317bc2c",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "78a13fe8-bfc2-4a58-9506-6a99a0947e1a"
        },
        "item": {
          "id": "7c9a1132-207a-4ff8-afd1-a59dcd6a5c0c",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4a865bf7-9dce-4f32-b8ae-5ed8d8f58943",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9c550aaf-6198-4a02-a4b6-7e7913eee320",
        "cursor": {
          "ref": "d3e8891c-5c34-40d6-9c03-acf43710d4f2",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ec4e370e-418e-421b-8042-3ef2b8f1116e"
        },
        "item": {
          "id": "9c550aaf-6198-4a02-a4b6-7e7913eee320",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ce4d28ca-2b8d-4115-98ea-5286f5488844",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "9c550aaf-6198-4a02-a4b6-7e7913eee320",
        "cursor": {
          "ref": "d3e8891c-5c34-40d6-9c03-acf43710d4f2",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "ec4e370e-418e-421b-8042-3ef2b8f1116e"
        },
        "item": {
          "id": "9c550aaf-6198-4a02-a4b6-7e7913eee320",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "ce4d28ca-2b8d-4115-98ea-5286f5488844",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "fa73e734-4d2c-4bdb-8ae6-fce34d369439",
        "cursor": {
          "ref": "4aadd39a-ba35-42e5-a30a-0489147c1280",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ae67c37b-5a45-4c16-b843-271e765fffd7"
        },
        "item": {
          "id": "fa73e734-4d2c-4bdb-8ae6-fce34d369439",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0bfaa59b-c16b-4edd-aee6-e9cebff93b34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "fa73e734-4d2c-4bdb-8ae6-fce34d369439",
        "cursor": {
          "ref": "4aadd39a-ba35-42e5-a30a-0489147c1280",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ae67c37b-5a45-4c16-b843-271e765fffd7"
        },
        "item": {
          "id": "fa73e734-4d2c-4bdb-8ae6-fce34d369439",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0bfaa59b-c16b-4edd-aee6-e9cebff93b34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "493a25fd-316d-419a-b97f-b75c37f75f21",
        "cursor": {
          "ref": "cc4218e7-b9ed-4b55-900f-1b6ccaede5c1",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "169ab71b-0d17-4f6c-b2dc-8e5dd00d69f7"
        },
        "item": {
          "id": "493a25fd-316d-419a-b97f-b75c37f75f21",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2e6ef99f-8c78-408a-8973-893055c466d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "493a25fd-316d-419a-b97f-b75c37f75f21",
        "cursor": {
          "ref": "cc4218e7-b9ed-4b55-900f-1b6ccaede5c1",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "169ab71b-0d17-4f6c-b2dc-8e5dd00d69f7"
        },
        "item": {
          "id": "493a25fd-316d-419a-b97f-b75c37f75f21",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2e6ef99f-8c78-408a-8973-893055c466d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ddb63c4c-f8a9-4c78-887a-e04a633f4be1",
        "cursor": {
          "ref": "064779f7-a9b7-4857-818e-cf8e5c6fcd54",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e9c4d564-6d8d-41dd-99f1-873a7fbc6dbe"
        },
        "item": {
          "id": "ddb63c4c-f8a9-4c78-887a-e04a633f4be1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "215cd112-aad3-48e2-ab86-a005056e3e76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ddb63c4c-f8a9-4c78-887a-e04a633f4be1",
        "cursor": {
          "ref": "064779f7-a9b7-4857-818e-cf8e5c6fcd54",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e9c4d564-6d8d-41dd-99f1-873a7fbc6dbe"
        },
        "item": {
          "id": "ddb63c4c-f8a9-4c78-887a-e04a633f4be1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "215cd112-aad3-48e2-ab86-a005056e3e76",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "6440c785-0ed2-4fa6-a6fa-038d0ece54e8",
        "cursor": {
          "ref": "4e85bacf-8fbb-43a3-b7a8-1bffc8b31d20",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "26c0becb-6e6a-47bc-bc7e-dc0a50a0e632"
        },
        "item": {
          "id": "6440c785-0ed2-4fa6-a6fa-038d0ece54e8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2835ea18-847a-494b-bd19-75ea14390548",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "6440c785-0ed2-4fa6-a6fa-038d0ece54e8",
        "cursor": {
          "ref": "4e85bacf-8fbb-43a3-b7a8-1bffc8b31d20",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "26c0becb-6e6a-47bc-bc7e-dc0a50a0e632"
        },
        "item": {
          "id": "6440c785-0ed2-4fa6-a6fa-038d0ece54e8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2835ea18-847a-494b-bd19-75ea14390548",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "938613ef-aecd-473e-b69c-0e42c109d248",
        "cursor": {
          "ref": "851ee2b2-3f11-444c-8d60-41160b589bcd",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "020d024c-f10d-45f3-af51-c32c4dc09012"
        },
        "item": {
          "id": "938613ef-aecd-473e-b69c-0e42c109d248",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6b6edc93-f1b6-4634-bd9b-ef9cebc618cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "938613ef-aecd-473e-b69c-0e42c109d248",
        "cursor": {
          "ref": "851ee2b2-3f11-444c-8d60-41160b589bcd",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "020d024c-f10d-45f3-af51-c32c4dc09012"
        },
        "item": {
          "id": "938613ef-aecd-473e-b69c-0e42c109d248",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6b6edc93-f1b6-4634-bd9b-ef9cebc618cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "f1bb5652-db6f-4e14-a8fc-3eda2e43278e",
        "cursor": {
          "ref": "71081962-2ddf-4c56-8c00-dd1bf945364b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a91f2aa1-d321-4176-ab7a-32071f33c093"
        },
        "item": {
          "id": "f1bb5652-db6f-4e14-a8fc-3eda2e43278e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8e98b00e-5bda-4a1e-ab74-176bc53e7e8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "f1bb5652-db6f-4e14-a8fc-3eda2e43278e",
        "cursor": {
          "ref": "71081962-2ddf-4c56-8c00-dd1bf945364b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a91f2aa1-d321-4176-ab7a-32071f33c093"
        },
        "item": {
          "id": "f1bb5652-db6f-4e14-a8fc-3eda2e43278e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "8e98b00e-5bda-4a1e-ab74-176bc53e7e8d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "69d4abff-3f55-4ed5-9162-9ae76ecbd82f",
        "cursor": {
          "ref": "8593b638-eb39-4169-b6cf-af2bffd5c48d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e3170a96-7e36-4898-be86-14175dfc27e7"
        },
        "item": {
          "id": "69d4abff-3f55-4ed5-9162-9ae76ecbd82f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a7ac6dd8-d79a-4588-8521-fe838922532a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "69d4abff-3f55-4ed5-9162-9ae76ecbd82f",
        "cursor": {
          "ref": "8593b638-eb39-4169-b6cf-af2bffd5c48d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e3170a96-7e36-4898-be86-14175dfc27e7"
        },
        "item": {
          "id": "69d4abff-3f55-4ed5-9162-9ae76ecbd82f",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "a7ac6dd8-d79a-4588-8521-fe838922532a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "dfc92731-0578-421d-9fed-d458a7ee14e1",
        "cursor": {
          "ref": "9e82060d-65b9-41ed-92e6-8a6e0edd1020",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "63e9d514-9d43-4aab-92e0-57748fbff8ae"
        },
        "item": {
          "id": "dfc92731-0578-421d-9fed-d458a7ee14e1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e3acc73f-0bb2-4ff8-ab45-cfe33b4db761",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "dfc92731-0578-421d-9fed-d458a7ee14e1",
        "cursor": {
          "ref": "9e82060d-65b9-41ed-92e6-8a6e0edd1020",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "63e9d514-9d43-4aab-92e0-57748fbff8ae"
        },
        "item": {
          "id": "dfc92731-0578-421d-9fed-d458a7ee14e1",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e3acc73f-0bb2-4ff8-ab45-cfe33b4db761",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 21,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "bf092d3c-283d-4607-a5b3-ef6bb2a23665",
        "cursor": {
          "ref": "5f927f9f-ba64-4d60-aff9-ce091d242fba",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e4edaa4f-4e04-4b6d-8cd2-2ea7105e22c7"
        },
        "item": {
          "id": "bf092d3c-283d-4607-a5b3-ef6bb2a23665",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1a63b275-9d09-496e-9b40-53166023f406",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "bf092d3c-283d-4607-a5b3-ef6bb2a23665",
        "cursor": {
          "ref": "5f927f9f-ba64-4d60-aff9-ce091d242fba",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e4edaa4f-4e04-4b6d-8cd2-2ea7105e22c7"
        },
        "item": {
          "id": "bf092d3c-283d-4607-a5b3-ef6bb2a23665",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "1a63b275-9d09-496e-9b40-53166023f406",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "490729d8-2960-40e7-9b62-3eab1fec7698",
        "cursor": {
          "ref": "985bdfa5-1f2f-43b1-984e-ab9283d935f4",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f70b9f4d-585f-4b09-a801-1af402b301e3"
        },
        "item": {
          "id": "490729d8-2960-40e7-9b62-3eab1fec7698",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "959f04bd-c53f-4ed4-90d6-8ea50e8eeeb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "490729d8-2960-40e7-9b62-3eab1fec7698",
        "cursor": {
          "ref": "985bdfa5-1f2f-43b1-984e-ab9283d935f4",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f70b9f4d-585f-4b09-a801-1af402b301e3"
        },
        "item": {
          "id": "490729d8-2960-40e7-9b62-3eab1fec7698",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "959f04bd-c53f-4ed4-90d6-8ea50e8eeeb5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "e8eee432-f6ca-4c4d-bab1-c2d5a0033760",
        "cursor": {
          "ref": "3514ce82-2d1c-439b-8d7d-74441a2b0310",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b21b1a7d-270c-4234-a947-efc606e7841a"
        },
        "item": {
          "id": "e8eee432-f6ca-4c4d-bab1-c2d5a0033760",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cfbbd96d-988c-47da-b641-39f736b34504",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "e8eee432-f6ca-4c4d-bab1-c2d5a0033760",
        "cursor": {
          "ref": "3514ce82-2d1c-439b-8d7d-74441a2b0310",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b21b1a7d-270c-4234-a947-efc606e7841a"
        },
        "item": {
          "id": "e8eee432-f6ca-4c4d-bab1-c2d5a0033760",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "cfbbd96d-988c-47da-b641-39f736b34504",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 23,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "137d7c4c-3c31-4e18-8536-3237dbf5b282",
        "cursor": {
          "ref": "923380d7-836b-4928-b1d7-b5c16a740f5f",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "06fd2185-b588-4ff2-b07d-e8e56630f06e"
        },
        "item": {
          "id": "137d7c4c-3c31-4e18-8536-3237dbf5b282",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "155fb403-9233-4b08-8871-320d058e900a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "137d7c4c-3c31-4e18-8536-3237dbf5b282",
        "cursor": {
          "ref": "923380d7-836b-4928-b1d7-b5c16a740f5f",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "06fd2185-b588-4ff2-b07d-e8e56630f06e"
        },
        "item": {
          "id": "137d7c4c-3c31-4e18-8536-3237dbf5b282",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "155fb403-9233-4b08-8871-320d058e900a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "acbef954-df51-4f91-a08f-8ffb4c2915df",
        "cursor": {
          "ref": "c13c7acf-cf1d-417d-8fd2-d363e5ec4f6b",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1870de16-a34f-42dc-8958-da3a7518a591"
        },
        "item": {
          "id": "acbef954-df51-4f91-a08f-8ffb4c2915df",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "46aa2425-3706-4302-8833-60bc5d8b445f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "acbef954-df51-4f91-a08f-8ffb4c2915df",
        "cursor": {
          "ref": "c13c7acf-cf1d-417d-8fd2-d363e5ec4f6b",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1870de16-a34f-42dc-8958-da3a7518a591"
        },
        "item": {
          "id": "acbef954-df51-4f91-a08f-8ffb4c2915df",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "46aa2425-3706-4302-8833-60bc5d8b445f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "4fc56ae7-dcb2-4783-893c-1001ed07765e",
        "cursor": {
          "ref": "633c03de-c861-4650-b26e-3be25ba3bb54",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f1a237c1-cc84-4e21-9ecf-fc84334a1bc9"
        },
        "item": {
          "id": "4fc56ae7-dcb2-4783-893c-1001ed07765e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0a978a6a-102a-415d-9f22-7c19503317e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "4fc56ae7-dcb2-4783-893c-1001ed07765e",
        "cursor": {
          "ref": "633c03de-c861-4650-b26e-3be25ba3bb54",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f1a237c1-cc84-4e21-9ecf-fc84334a1bc9"
        },
        "item": {
          "id": "4fc56ae7-dcb2-4783-893c-1001ed07765e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0a978a6a-102a-415d-9f22-7c19503317e7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "b03b64d5-9ef2-4e28-9ebe-f5d4b2d261ae",
        "cursor": {
          "ref": "1de53a20-7594-4c03-a311-3e56a55941ff",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7a46e3e7-ad02-4d2c-b957-555d8afe4c18"
        },
        "item": {
          "id": "b03b64d5-9ef2-4e28-9ebe-f5d4b2d261ae",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f3a1b755-8f95-4a15-be2d-f4f4d71b44a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "b03b64d5-9ef2-4e28-9ebe-f5d4b2d261ae",
        "cursor": {
          "ref": "1de53a20-7594-4c03-a311-3e56a55941ff",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7a46e3e7-ad02-4d2c-b957-555d8afe4c18"
        },
        "item": {
          "id": "b03b64d5-9ef2-4e28-9ebe-f5d4b2d261ae",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f3a1b755-8f95-4a15-be2d-f4f4d71b44a3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "d4e13e83-1b94-48b6-ae86-2997542d57f5",
        "cursor": {
          "ref": "94bdf262-de2a-49c1-8a60-15b723b2c0f4",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "420b2716-8482-49d0-9c07-be816dcb44ba"
        },
        "item": {
          "id": "d4e13e83-1b94-48b6-ae86-2997542d57f5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ab80217f-1022-44af-8515-e67c332277d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "d4e13e83-1b94-48b6-ae86-2997542d57f5",
        "cursor": {
          "ref": "94bdf262-de2a-49c1-8a60-15b723b2c0f4",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "420b2716-8482-49d0-9c07-be816dcb44ba"
        },
        "item": {
          "id": "d4e13e83-1b94-48b6-ae86-2997542d57f5",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ab80217f-1022-44af-8515-e67c332277d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e9c40082-39c4-4ebf-9c9c-275e46571415",
        "cursor": {
          "ref": "81801cb4-d2fc-4d1a-b874-aa0a3bf481cb",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "87b7e348-f5ec-416e-9865-8a46ff4612f1"
        },
        "item": {
          "id": "e9c40082-39c4-4ebf-9c9c-275e46571415",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9361af90-39a1-4d7b-933c-b8d7f0d7e5eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "e9c40082-39c4-4ebf-9c9c-275e46571415",
        "cursor": {
          "ref": "81801cb4-d2fc-4d1a-b874-aa0a3bf481cb",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "87b7e348-f5ec-416e-9865-8a46ff4612f1"
        },
        "item": {
          "id": "e9c40082-39c4-4ebf-9c9c-275e46571415",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9361af90-39a1-4d7b-933c-b8d7f0d7e5eb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "563bb6c4-7e0e-49e8-be80-016d1212552d",
        "cursor": {
          "ref": "f021711c-e5a3-41be-a22a-8eeceb1ba46f",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3b502d12-9d90-4373-bcb3-7e1068bbde9a"
        },
        "item": {
          "id": "563bb6c4-7e0e-49e8-be80-016d1212552d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "965bd77e-be76-491e-893b-d8b7cdb684dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "563bb6c4-7e0e-49e8-be80-016d1212552d",
        "cursor": {
          "ref": "f021711c-e5a3-41be-a22a-8eeceb1ba46f",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3b502d12-9d90-4373-bcb3-7e1068bbde9a"
        },
        "item": {
          "id": "563bb6c4-7e0e-49e8-be80-016d1212552d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "965bd77e-be76-491e-893b-d8b7cdb684dc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "d496c702-01eb-43b1-b51b-944dd0a45975",
        "cursor": {
          "ref": "8eebe788-892d-4fc8-b046-ac48c06a39cb",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0bc14d36-9a92-498e-9eee-0581cd08f34f"
        },
        "item": {
          "id": "d496c702-01eb-43b1-b51b-944dd0a45975",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5d60b53b-f642-48e8-8382-55483dc40828",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d496c702-01eb-43b1-b51b-944dd0a45975",
        "cursor": {
          "ref": "8eebe788-892d-4fc8-b046-ac48c06a39cb",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0bc14d36-9a92-498e-9eee-0581cd08f34f"
        },
        "item": {
          "id": "d496c702-01eb-43b1-b51b-944dd0a45975",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5d60b53b-f642-48e8-8382-55483dc40828",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "179fe6a7-5992-4fc7-b52a-bdc7b0bb671b",
        "cursor": {
          "ref": "8108129f-7587-4b29-ae29-94367c404da9",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3d7a0761-72db-41df-8f12-6e75dd2e616c"
        },
        "item": {
          "id": "179fe6a7-5992-4fc7-b52a-bdc7b0bb671b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e1d53816-4bd9-4c45-839e-138f4ac3ad2f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "179fe6a7-5992-4fc7-b52a-bdc7b0bb671b",
        "cursor": {
          "ref": "8108129f-7587-4b29-ae29-94367c404da9",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "3d7a0761-72db-41df-8f12-6e75dd2e616c"
        },
        "item": {
          "id": "179fe6a7-5992-4fc7-b52a-bdc7b0bb671b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e1d53816-4bd9-4c45-839e-138f4ac3ad2f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "38dbba82-fd1d-4c4c-bc8e-41b20f126dfb",
        "cursor": {
          "ref": "7aade43a-14a7-41da-9e57-89d5f94b3751",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ca297f48-5321-47d3-99ad-6ae6e2d06f68"
        },
        "item": {
          "id": "38dbba82-fd1d-4c4c-bc8e-41b20f126dfb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e4b047a0-01cb-4db2-a81d-20a233d382c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "38dbba82-fd1d-4c4c-bc8e-41b20f126dfb",
        "cursor": {
          "ref": "7aade43a-14a7-41da-9e57-89d5f94b3751",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "ca297f48-5321-47d3-99ad-6ae6e2d06f68"
        },
        "item": {
          "id": "38dbba82-fd1d-4c4c-bc8e-41b20f126dfb",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "e4b047a0-01cb-4db2-a81d-20a233d382c7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7db3cdf4-08d4-4136-96b6-b3c1217e2786",
        "cursor": {
          "ref": "47addf66-23ea-44ff-b648-7587c980771d",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a62736d9-058f-4a37-9fc6-7b6799a94de1"
        },
        "item": {
          "id": "7db3cdf4-08d4-4136-96b6-b3c1217e2786",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22f30544-6bb5-4945-bcfd-7ea28abf17e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "7db3cdf4-08d4-4136-96b6-b3c1217e2786",
        "cursor": {
          "ref": "47addf66-23ea-44ff-b648-7587c980771d",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "a62736d9-058f-4a37-9fc6-7b6799a94de1"
        },
        "item": {
          "id": "7db3cdf4-08d4-4136-96b6-b3c1217e2786",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "22f30544-6bb5-4945-bcfd-7ea28abf17e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "f8b85fbb-0734-48bd-a77b-6bc853703d96",
        "cursor": {
          "ref": "6da71ba4-1050-49b6-a461-3bfbd3d3eb94",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "15bfa290-3e34-4a48-9d82-9af055eefb33"
        },
        "item": {
          "id": "f8b85fbb-0734-48bd-a77b-6bc853703d96",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5f51ba24-7b2d-490c-b006-d3c2eae1909f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "f8b85fbb-0734-48bd-a77b-6bc853703d96",
        "cursor": {
          "ref": "6da71ba4-1050-49b6-a461-3bfbd3d3eb94",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "15bfa290-3e34-4a48-9d82-9af055eefb33"
        },
        "item": {
          "id": "f8b85fbb-0734-48bd-a77b-6bc853703d96",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "5f51ba24-7b2d-490c-b006-d3c2eae1909f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "6a6cbd19-0475-40c2-9396-8ecf9e30fcac",
        "cursor": {
          "ref": "2601f045-0426-4eaf-9b7a-99348d0adcca",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c6f9eea5-6032-40b4-be5a-3efd4b7ab4b7"
        },
        "item": {
          "id": "6a6cbd19-0475-40c2-9396-8ecf9e30fcac",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "19d279d0-5c35-4529-8fb3-25e5a439fb22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "6a6cbd19-0475-40c2-9396-8ecf9e30fcac",
        "cursor": {
          "ref": "2601f045-0426-4eaf-9b7a-99348d0adcca",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "c6f9eea5-6032-40b4-be5a-3efd4b7ab4b7"
        },
        "item": {
          "id": "6a6cbd19-0475-40c2-9396-8ecf9e30fcac",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "19d279d0-5c35-4529-8fb3-25e5a439fb22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 22,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "e4aee545-6642-4ed8-91a2-335e5209333d",
        "cursor": {
          "ref": "e5b6aeb3-16f9-4c2f-85f5-b02c12fa9cf4",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d64cd2dc-72be-4d5b-9027-d64b29694680"
        },
        "item": {
          "id": "e4aee545-6642-4ed8-91a2-335e5209333d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a4a377da-85ac-497d-9510-b3456646ddf1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "e4aee545-6642-4ed8-91a2-335e5209333d",
        "cursor": {
          "ref": "e5b6aeb3-16f9-4c2f-85f5-b02c12fa9cf4",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d64cd2dc-72be-4d5b-9027-d64b29694680"
        },
        "item": {
          "id": "e4aee545-6642-4ed8-91a2-335e5209333d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a4a377da-85ac-497d-9510-b3456646ddf1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 19,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "740b19da-eb56-47d6-813a-37e7115dc816",
        "cursor": {
          "ref": "760b9f0b-4313-4cc0-adca-2808aeee27d6",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7ecb1357-3474-4eec-91ef-4833c317f143"
        },
        "item": {
          "id": "740b19da-eb56-47d6-813a-37e7115dc816",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ba11f3f7-c35b-4a98-a971-18a1742bde9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "740b19da-eb56-47d6-813a-37e7115dc816",
        "cursor": {
          "ref": "760b9f0b-4313-4cc0-adca-2808aeee27d6",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "7ecb1357-3474-4eec-91ef-4833c317f143"
        },
        "item": {
          "id": "740b19da-eb56-47d6-813a-37e7115dc816",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ba11f3f7-c35b-4a98-a971-18a1742bde9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 20,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "61cb2c5d-feec-4d0c-945a-96c02b52e2bc",
        "cursor": {
          "ref": "3e2fc7e1-f3f4-4751-9a1c-bfc2b440df04",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "37a85e93-c5a9-455b-a298-8d65b6d1d0cb"
        },
        "item": {
          "id": "61cb2c5d-feec-4d0c-945a-96c02b52e2bc",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "61cb2c5d-feec-4d0c-945a-96c02b52e2bc",
        "cursor": {
          "ref": "3e2fc7e1-f3f4-4751-9a1c-bfc2b440df04",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "37a85e93-c5a9-455b-a298-8d65b6d1d0cb"
        },
        "item": {
          "id": "61cb2c5d-feec-4d0c-945a-96c02b52e2bc",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "61cb2c5d-feec-4d0c-945a-96c02b52e2bc",
        "cursor": {
          "ref": "3e2fc7e1-f3f4-4751-9a1c-bfc2b440df04",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "37a85e93-c5a9-455b-a298-8d65b6d1d0cb"
        },
        "item": {
          "id": "61cb2c5d-feec-4d0c-945a-96c02b52e2bc",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "97f2b929-ad14-4a5b-be40-566e3da548c3",
        "cursor": {
          "ref": "4568c2a2-d35a-4b26-9f40-b3e54f3e5d36",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "39859994-fadf-4d3d-a1bc-12f933077071"
        },
        "item": {
          "id": "97f2b929-ad14-4a5b-be40-566e3da548c3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "97f2b929-ad14-4a5b-be40-566e3da548c3",
        "cursor": {
          "ref": "4568c2a2-d35a-4b26-9f40-b3e54f3e5d36",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "39859994-fadf-4d3d-a1bc-12f933077071"
        },
        "item": {
          "id": "97f2b929-ad14-4a5b-be40-566e3da548c3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "97f2b929-ad14-4a5b-be40-566e3da548c3",
        "cursor": {
          "ref": "4568c2a2-d35a-4b26-9f40-b3e54f3e5d36",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "39859994-fadf-4d3d-a1bc-12f933077071"
        },
        "item": {
          "id": "97f2b929-ad14-4a5b-be40-566e3da548c3",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "4e9b52ca-e160-458a-b137-d66e612d67fd",
        "cursor": {
          "ref": "0b14f1b4-2abe-4c01-9697-e98f936397e3",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "75d36ee4-9065-426d-ae0d-b7972965e6e9"
        },
        "item": {
          "id": "4e9b52ca-e160-458a-b137-d66e612d67fd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4e9b52ca-e160-458a-b137-d66e612d67fd",
        "cursor": {
          "ref": "0b14f1b4-2abe-4c01-9697-e98f936397e3",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "75d36ee4-9065-426d-ae0d-b7972965e6e9"
        },
        "item": {
          "id": "4e9b52ca-e160-458a-b137-d66e612d67fd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "4e9b52ca-e160-458a-b137-d66e612d67fd",
        "cursor": {
          "ref": "0b14f1b4-2abe-4c01-9697-e98f936397e3",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "75d36ee4-9065-426d-ae0d-b7972965e6e9"
        },
        "item": {
          "id": "4e9b52ca-e160-458a-b137-d66e612d67fd",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "b070ff51-7b3d-4efa-8b1d-04dac3818650",
        "cursor": {
          "ref": "2ba8294e-e607-455b-9ed0-38871b72c858",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "884e041c-f42b-4459-9475-4ec68364f774"
        },
        "item": {
          "id": "b070ff51-7b3d-4efa-8b1d-04dac3818650",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b070ff51-7b3d-4efa-8b1d-04dac3818650",
        "cursor": {
          "ref": "2ba8294e-e607-455b-9ed0-38871b72c858",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "884e041c-f42b-4459-9475-4ec68364f774"
        },
        "item": {
          "id": "b070ff51-7b3d-4efa-8b1d-04dac3818650",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "b070ff51-7b3d-4efa-8b1d-04dac3818650",
        "cursor": {
          "ref": "2ba8294e-e607-455b-9ed0-38871b72c858",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "884e041c-f42b-4459-9475-4ec68364f774"
        },
        "item": {
          "id": "b070ff51-7b3d-4efa-8b1d-04dac3818650",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "d212c2a8-a37e-490a-b38e-cc6942828bb3",
        "cursor": {
          "ref": "25bdf175-81fc-47da-aed2-c0cb94abb8f6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "877e8062-720b-4614-8d72-ee697fbe9238"
        },
        "item": {
          "id": "d212c2a8-a37e-490a-b38e-cc6942828bb3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d212c2a8-a37e-490a-b38e-cc6942828bb3",
        "cursor": {
          "ref": "25bdf175-81fc-47da-aed2-c0cb94abb8f6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "877e8062-720b-4614-8d72-ee697fbe9238"
        },
        "item": {
          "id": "d212c2a8-a37e-490a-b38e-cc6942828bb3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "d212c2a8-a37e-490a-b38e-cc6942828bb3",
        "cursor": {
          "ref": "25bdf175-81fc-47da-aed2-c0cb94abb8f6",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "877e8062-720b-4614-8d72-ee697fbe9238"
        },
        "item": {
          "id": "d212c2a8-a37e-490a-b38e-cc6942828bb3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "03001615-333a-4b81-9bd1-047e7070de89",
        "cursor": {
          "ref": "1bce9b69-840d-43b5-a51f-ebb48593813a",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "58f1b8cf-0eeb-4ab0-8f22-5d59b53ec55f"
        },
        "item": {
          "id": "03001615-333a-4b81-9bd1-047e7070de89",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "03001615-333a-4b81-9bd1-047e7070de89",
        "cursor": {
          "ref": "1bce9b69-840d-43b5-a51f-ebb48593813a",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "58f1b8cf-0eeb-4ab0-8f22-5d59b53ec55f"
        },
        "item": {
          "id": "03001615-333a-4b81-9bd1-047e7070de89",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "03001615-333a-4b81-9bd1-047e7070de89",
        "cursor": {
          "ref": "1bce9b69-840d-43b5-a51f-ebb48593813a",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "58f1b8cf-0eeb-4ab0-8f22-5d59b53ec55f"
        },
        "item": {
          "id": "03001615-333a-4b81-9bd1-047e7070de89",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}